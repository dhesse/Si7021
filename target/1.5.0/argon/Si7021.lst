
/Users/dirkhesse/code/Si7021/target/1.5.0/argon/Si7021.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002c00  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d6c20  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000068  2003e34c  000d6c24  0001e34c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000043c  2003e3b4  2003e3b4  0002e3b4  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d6c8c  000d6c8c  00026c8c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d6cb4  000d6cb4  00026cb4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000e8e01  00000000  00000000  00026cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00011e0f  00000000  00000000  0010fab9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001c804  00000000  00000000  001218c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000024c8  00000000  00000000  0013e0cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000044f8  00000000  00000000  00140594  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00037937  00000000  00000000  00144a8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002ad15  00000000  00000000  0017c3c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    001088fa  00000000  00000000  001a70d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000ccc4  00000000  00000000  002af9d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f002 fb8f 	bl	d6754 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f002 fb94 	bl	d676a <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e34c 	.word	0x2003e34c
   d404c:	000d6c24 	.word	0x000d6c24
   d4050:	2003e3b4 	.word	0x2003e3b4
   d4054:	2003e3b4 	.word	0x2003e3b4
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f001 fd1f 	bl	d5aa0 <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000d6c20 	.word	0x000d6c20
   d4084:	000d6be4 	.word	0x000d6be4

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f000 b946 	b.w	d4318 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 f963 	bl	d4358 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f001 bcc5 	b.w	d5a24 <_post_loop>

000d409a <_Znwj>:
   d409a:	f000 bc11 	b.w	d48c0 <malloc>

000d409e <_ZdlPv>:
   d409e:	f000 bc17 	b.w	d48d0 <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f000 bc15 	b.w	d48d0 <free>
	...

000d40a8 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a8:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40aa:	4a03      	ldr	r2, [pc, #12]	; (d40b8 <__cxa_pure_virtual+0x10>)
   d40ac:	2100      	movs	r1, #0
   d40ae:	200c      	movs	r0, #12
   d40b0:	f000 fb50 	bl	d4754 <panic_>
   d40b4:	e7fe      	b.n	d40b4 <__cxa_pure_virtual+0xc>
   d40b6:	bf00      	nop
   d40b8:	000d4525 	.word	0x000d4525

000d40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40bc:	7800      	ldrb	r0, [r0, #0]
   d40be:	fab0 f080 	clz	r0, r0
   d40c2:	0940      	lsrs	r0, r0, #5
   d40c4:	4770      	bx	lr

000d40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c6:	2301      	movs	r3, #1
   d40c8:	7003      	strb	r3, [r0, #0]
   d40ca:	4770      	bx	lr

000d40cc <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d40cc:	6803      	ldr	r3, [r0, #0]
   d40ce:	b2c9      	uxtb	r1, r1
   d40d0:	689b      	ldr	r3, [r3, #8]
   d40d2:	4718      	bx	r3

000d40d4 <_ZN15Adafruit_Si7021C1EP7TwoWire>:
 *  @brief  Instantiates a new Adafruit_Si7021 class
 *  @param  *theWire
 *          optional wire object
 */
Adafruit_Si7021::Adafruit_Si7021(TwoWire *theWire) {
  _i2caddr = SI7021_DEFAULT_ADDRESS;
   d40d4:	2240      	movs	r2, #64	; 0x40
   d40d6:	7282      	strb	r2, [r0, #10]
  _wire = theWire;
   d40d8:	60c1      	str	r1, [r0, #12]
  sernum_a = sernum_b = 0;
   d40da:	2200      	movs	r2, #0
  _model = SI_7021;
   d40dc:	2103      	movs	r1, #3
 *          optional wire object
 */
Adafruit_Si7021::Adafruit_Si7021(TwoWire *theWire) {
  _i2caddr = SI7021_DEFAULT_ADDRESS;
  _wire = theWire;
  sernum_a = sernum_b = 0;
   d40de:	6042      	str	r2, [r0, #4]
   d40e0:	6002      	str	r2, [r0, #0]
  _model = SI_7021;
   d40e2:	7201      	strb	r1, [r0, #8]
  _revision = 0;
   d40e4:	7242      	strb	r2, [r0, #9]
}
   d40e6:	4770      	bx	lr

000d40e8 <_ZN15Adafruit_Si702112readHumidityEv>:

/*!
 *  @brief  Reads the humidity value from Si7021 (No Master hold)
 *  @return Returns humidity as float value or NAN when there is error timeout
 */
float Adafruit_Si7021::readHumidity() {
   d40e8:	b570      	push	{r4, r5, r6, lr}
   d40ea:	4604      	mov	r4, r0
  _wire->beginTransmission(_i2caddr);
   d40ec:	f990 100a 	ldrsb.w	r1, [r0, #10]
   d40f0:	68c0      	ldr	r0, [r0, #12]
   d40f2:	f000 fff6 	bl	d50e2 <_ZN7TwoWire17beginTransmissionEi>

  _wire->write(SI7021_MEASRH_NOHOLD_CMD);
   d40f6:	21f5      	movs	r1, #245	; 0xf5
   d40f8:	68e0      	ldr	r0, [r4, #12]
   d40fa:	f7ff ffe7 	bl	d40cc <_ZN7TwoWire5writeEi>
  uint8_t err = _wire->endTransmission();
   d40fe:	68e0      	ldr	r0, [r4, #12]
   d4100:	f000 fff6 	bl	d50f0 <_ZN7TwoWire15endTransmissionEv>

  if (err != 0)
   d4104:	2800      	cmp	r0, #0
   d4106:	d13e      	bne.n	d4186 <_ZN15Adafruit_Si702112readHumidityEv+0x9e>
    return NAN; // error

  delay(20); // account for conversion time for reading humidity
   d4108:	2014      	movs	r0, #20
   d410a:	f000 fc01 	bl	d4910 <delay>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d410e:	f000 fa11 	bl	d4534 <HAL_Timer_Get_Milli_Seconds>
   d4112:	4605      	mov	r5, r0
   d4114:	f000 fa0e 	bl	d4534 <HAL_Timer_Get_Milli_Seconds>

  uint32_t start = millis(); // start timeout
  while (millis() - start < _TRANSACTION_TIMEOUT) {
   d4118:	1b40      	subs	r0, r0, r5
   d411a:	2863      	cmp	r0, #99	; 0x63
   d411c:	d833      	bhi.n	d4186 <_ZN15Adafruit_Si702112readHumidityEv+0x9e>
    if (_wire->requestFrom(_i2caddr, 3) == 3) {
   d411e:	2203      	movs	r2, #3
   d4120:	7aa1      	ldrb	r1, [r4, #10]
   d4122:	68e0      	ldr	r0, [r4, #12]
   d4124:	f000 ffd6 	bl	d50d4 <_ZN7TwoWire11requestFromEhj>
   d4128:	2803      	cmp	r0, #3
   d412a:	d128      	bne.n	d417e <_ZN15Adafruit_Si702112readHumidityEv+0x96>
      uint16_t hum = _wire->read() << 8 | _wire->read();
   d412c:	68e0      	ldr	r0, [r4, #12]
   d412e:	6803      	ldr	r3, [r0, #0]
   d4130:	695b      	ldr	r3, [r3, #20]
   d4132:	4798      	blx	r3
   d4134:	4606      	mov	r6, r0
   d4136:	68e0      	ldr	r0, [r4, #12]
   d4138:	6803      	ldr	r3, [r0, #0]
   d413a:	695b      	ldr	r3, [r3, #20]
   d413c:	4798      	blx	r3
   d413e:	4605      	mov	r5, r0
      uint8_t chxsum = _wire->read();
   d4140:	68e0      	ldr	r0, [r4, #12]
   d4142:	6803      	ldr	r3, [r0, #0]

      float humidity = hum;
   d4144:	ea45 2506 	orr.w	r5, r5, r6, lsl #8

  uint32_t start = millis(); // start timeout
  while (millis() - start < _TRANSACTION_TIMEOUT) {
    if (_wire->requestFrom(_i2caddr, 3) == 3) {
      uint16_t hum = _wire->read() << 8 | _wire->read();
      uint8_t chxsum = _wire->read();
   d4148:	695b      	ldr	r3, [r3, #20]

      float humidity = hum;
   d414a:	b2ad      	uxth	r5, r5

  uint32_t start = millis(); // start timeout
  while (millis() - start < _TRANSACTION_TIMEOUT) {
    if (_wire->requestFrom(_i2caddr, 3) == 3) {
      uint16_t hum = _wire->read() << 8 | _wire->read();
      uint8_t chxsum = _wire->read();
   d414c:	4798      	blx	r3

      float humidity = hum;
   d414e:	ee07 5a90 	vmov	s15, r5
      humidity *= 125;
   d4152:	ed9f 7a0e 	vldr	s14, [pc, #56]	; d418c <_ZN15Adafruit_Si702112readHumidityEv+0xa4>
  while (millis() - start < _TRANSACTION_TIMEOUT) {
    if (_wire->requestFrom(_i2caddr, 3) == 3) {
      uint16_t hum = _wire->read() << 8 | _wire->read();
      uint8_t chxsum = _wire->read();

      float humidity = hum;
   d4156:	eef8 7a67 	vcvt.f32.u32	s15, s15
      humidity *= 125;
      humidity /= 65536;
      humidity -= 6;
   d415a:	eeb9 0a08 	vmov.f32	s0, #152	; 0xc0c00000 -6.0
    if (_wire->requestFrom(_i2caddr, 3) == 3) {
      uint16_t hum = _wire->read() << 8 | _wire->read();
      uint8_t chxsum = _wire->read();

      float humidity = hum;
      humidity *= 125;
   d415e:	ee67 7a87 	vmul.f32	s15, s15, s14
      humidity /= 65536;
      humidity -= 6;
   d4162:	ed9f 7a0b 	vldr	s14, [pc, #44]	; d4190 <_ZN15Adafruit_Si702112readHumidityEv+0xa8>
   d4166:	eea7 0a87 	vfma.f32	s0, s15, s14

      return humidity > 100.0 ? 100.0 : humidity;
   d416a:	eddf 7a0a 	vldr	s15, [pc, #40]	; d4194 <_ZN15Adafruit_Si702112readHumidityEv+0xac>
   d416e:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d4172:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4176:	bfc8      	it	gt
   d4178:	eeb0 0a67 	vmovgt.f32	s0, s15
   d417c:	bd70      	pop	{r4, r5, r6, pc}
    }
    delay(6); // 1/2 typical sample processing time
   d417e:	2006      	movs	r0, #6
   d4180:	f000 fbc6 	bl	d4910 <delay>
    return NAN; // error

  delay(20); // account for conversion time for reading humidity

  uint32_t start = millis(); // start timeout
  while (millis() - start < _TRANSACTION_TIMEOUT) {
   d4184:	e7c6      	b.n	d4114 <_ZN15Adafruit_Si702112readHumidityEv+0x2c>

  _wire->write(SI7021_MEASRH_NOHOLD_CMD);
  uint8_t err = _wire->endTransmission();

  if (err != 0)
    return NAN; // error
   d4186:	ed9f 0a04 	vldr	s0, [pc, #16]	; d4198 <_ZN15Adafruit_Si702112readHumidityEv+0xb0>
      return humidity > 100.0 ? 100.0 : humidity;
    }
    delay(6); // 1/2 typical sample processing time
  }
  return NAN; // Error timeout
}
   d418a:	bd70      	pop	{r4, r5, r6, pc}
   d418c:	42fa0000 	.word	0x42fa0000
   d4190:	37800000 	.word	0x37800000
   d4194:	42c80000 	.word	0x42c80000
   d4198:	7fc00000 	.word	0x7fc00000
   d419c:	00000000 	.word	0x00000000

000d41a0 <_ZN15Adafruit_Si702115readTemperatureEv>:
/*!
 *  @brief  Reads the temperature value from Si7021 (No Master hold)
 *  @return Returns temperature as float value or NAN when there is error
 * timeout
 */
float Adafruit_Si7021::readTemperature() {
   d41a0:	b570      	push	{r4, r5, r6, lr}
   d41a2:	4604      	mov	r4, r0
  _wire->beginTransmission(_i2caddr);
   d41a4:	f990 100a 	ldrsb.w	r1, [r0, #10]
   d41a8:	68c0      	ldr	r0, [r0, #12]
   d41aa:	f000 ff9a 	bl	d50e2 <_ZN7TwoWire17beginTransmissionEi>
  _wire->write(SI7021_MEASTEMP_NOHOLD_CMD);
   d41ae:	21f3      	movs	r1, #243	; 0xf3
   d41b0:	68e0      	ldr	r0, [r4, #12]
   d41b2:	f7ff ff8b 	bl	d40cc <_ZN7TwoWire5writeEi>
  uint8_t err = _wire->endTransmission();
   d41b6:	68e0      	ldr	r0, [r4, #12]
   d41b8:	f000 ff9a 	bl	d50f0 <_ZN7TwoWire15endTransmissionEv>

  if (err != 0)
   d41bc:	2800      	cmp	r0, #0
   d41be:	d147      	bne.n	d4250 <_ZN15Adafruit_Si702115readTemperatureEv+0xb0>
    return NAN; // error

  delay(20); // account for conversion time for reading temperature
   d41c0:	2014      	movs	r0, #20
   d41c2:	f000 fba5 	bl	d4910 <delay>
   d41c6:	f000 f9b5 	bl	d4534 <HAL_Timer_Get_Milli_Seconds>
   d41ca:	4605      	mov	r5, r0
   d41cc:	f000 f9b2 	bl	d4534 <HAL_Timer_Get_Milli_Seconds>

  uint32_t start = millis(); // start timeout
  while (millis() - start < _TRANSACTION_TIMEOUT) {
   d41d0:	1b40      	subs	r0, r0, r5
   d41d2:	2863      	cmp	r0, #99	; 0x63
   d41d4:	d83c      	bhi.n	d4250 <_ZN15Adafruit_Si702115readTemperatureEv+0xb0>
    if (_wire->requestFrom(_i2caddr, 3) == 3) {
   d41d6:	2203      	movs	r2, #3
   d41d8:	7aa1      	ldrb	r1, [r4, #10]
   d41da:	68e0      	ldr	r0, [r4, #12]
   d41dc:	f000 ff7a 	bl	d50d4 <_ZN7TwoWire11requestFromEhj>
   d41e0:	2803      	cmp	r0, #3
   d41e2:	d131      	bne.n	d4248 <_ZN15Adafruit_Si702115readTemperatureEv+0xa8>
      uint16_t temp = _wire->read() << 8 | _wire->read();
   d41e4:	68e0      	ldr	r0, [r4, #12]
   d41e6:	6803      	ldr	r3, [r0, #0]
   d41e8:	695b      	ldr	r3, [r3, #20]
   d41ea:	4798      	blx	r3
   d41ec:	4606      	mov	r6, r0
   d41ee:	68e0      	ldr	r0, [r4, #12]
   d41f0:	6803      	ldr	r3, [r0, #0]
   d41f2:	695b      	ldr	r3, [r3, #20]
   d41f4:	4798      	blx	r3
   d41f6:	4605      	mov	r5, r0
      uint8_t chxsum = _wire->read();
   d41f8:	68e0      	ldr	r0, [r4, #12]
   d41fa:	6803      	ldr	r3, [r0, #0]

      float temperature = temp;
      temperature *= 175.72;
   d41fc:	ea45 2506 	orr.w	r5, r5, r6, lsl #8

  uint32_t start = millis(); // start timeout
  while (millis() - start < _TRANSACTION_TIMEOUT) {
    if (_wire->requestFrom(_i2caddr, 3) == 3) {
      uint16_t temp = _wire->read() << 8 | _wire->read();
      uint8_t chxsum = _wire->read();
   d4200:	695b      	ldr	r3, [r3, #20]
   d4202:	4798      	blx	r3

      float temperature = temp;
      temperature *= 175.72;
   d4204:	b2a8      	uxth	r0, r5
   d4206:	ee07 0a90 	vmov	s15, r0
   d420a:	eef8 7a67 	vcvt.f32.u32	s15, s15
   d420e:	ee17 0a90 	vmov	r0, s15
   d4212:	f001 ffdb 	bl	d61cc <__aeabi_f2d>
   d4216:	a314      	add	r3, pc, #80	; (adr r3, d4268 <_ZN15Adafruit_Si702115readTemperatureEv+0xc8>)
   d4218:	e9d3 2300 	ldrd	r2, r3, [r3]
   d421c:	f002 f82a 	bl	d6274 <__aeabi_dmul>
   d4220:	f002 fa3a 	bl	d6698 <__aeabi_d2f>
      temperature /= 65536;
      temperature -= 46.85;
   d4224:	eddf 7a0e 	vldr	s15, [pc, #56]	; d4260 <_ZN15Adafruit_Si702115readTemperatureEv+0xc0>
   d4228:	ee07 0a10 	vmov	s14, r0
   d422c:	ee67 7a27 	vmul.f32	s15, s14, s15
   d4230:	ee17 0a90 	vmov	r0, s15
   d4234:	f001 ffca 	bl	d61cc <__aeabi_f2d>
   d4238:	a307      	add	r3, pc, #28	; (adr r3, d4258 <_ZN15Adafruit_Si702115readTemperatureEv+0xb8>)
   d423a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d423e:	f001 fe65 	bl	d5f0c <__aeabi_dsub>
   d4242:	f002 fa29 	bl	d6698 <__aeabi_d2f>
      return temperature;
   d4246:	e004      	b.n	d4252 <_ZN15Adafruit_Si702115readTemperatureEv+0xb2>
    }
    delay(6); // 1/2 typical sample processing time
   d4248:	2006      	movs	r0, #6
   d424a:	f000 fb61 	bl	d4910 <delay>
    return NAN; // error

  delay(20); // account for conversion time for reading temperature

  uint32_t start = millis(); // start timeout
  while (millis() - start < _TRANSACTION_TIMEOUT) {
   d424e:	e7bd      	b.n	d41cc <_ZN15Adafruit_Si702115readTemperatureEv+0x2c>
  _wire->beginTransmission(_i2caddr);
  _wire->write(SI7021_MEASTEMP_NOHOLD_CMD);
  uint8_t err = _wire->endTransmission();

  if (err != 0)
    return NAN; // error
   d4250:	4804      	ldr	r0, [pc, #16]	; (d4264 <_ZN15Adafruit_Si702115readTemperatureEv+0xc4>)
    }
    delay(6); // 1/2 typical sample processing time
  }

  return NAN; // Error timeout
}
   d4252:	ee00 0a10 	vmov	s0, r0
   d4256:	bd70      	pop	{r4, r5, r6, pc}
   d4258:	cccccccd 	.word	0xcccccccd
   d425c:	40476ccc 	.word	0x40476ccc
   d4260:	37800000 	.word	0x37800000
   d4264:	7fc00000 	.word	0x7fc00000
   d4268:	3d70a3d7 	.word	0x3d70a3d7
   d426c:	4065f70a 	.word	0x4065f70a

000d4270 <_GLOBAL__sub_I__ZN15Adafruit_Si7021C2EP7TwoWire>:

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4270:	f000 b968 	b.w	d4544 <HAL_Pin_Map>

000d4274 <_ZN10JFieldBase11format_nextEPc.isra.6>:
{
private:
    JFieldBase *next;

protected:
    void format_next(char *buf)
   d4274:	4603      	mov	r3, r0
   d4276:	4608      	mov	r0, r1
    {
        if (next)
   d4278:	681a      	ldr	r2, [r3, #0]
   d427a:	b132      	cbz	r2, d428a <_ZN10JFieldBase11format_nextEPc.isra.6+0x16>
        {
            buf[0] = ',';
   d427c:	222c      	movs	r2, #44	; 0x2c
   d427e:	f801 2b01 	strb.w	r2, [r1], #1
            next->format(buf + 1);
   d4282:	6818      	ldr	r0, [r3, #0]
   d4284:	6803      	ldr	r3, [r0, #0]
   d4286:	681b      	ldr	r3, [r3, #0]
   d4288:	4718      	bx	r3
        }
        else 
        {
            sprintf(buf, "}");
   d428a:	4901      	ldr	r1, [pc, #4]	; (d4290 <_ZN10JFieldBase11format_nextEPc.isra.6+0x1c>)
   d428c:	f002 ba9e 	b.w	d67cc <strcpy>
   d4290:	000d6860 	.word	0x000d6860

000d4294 <_ZN6JFieldIfE6formatEPc>:
    format_next(buf + sprintf(buf, "\"%s\": %lu", name, value));
}

template <>
void JField<float>::format(char *buf)
{
   d4294:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4296:	4604      	mov	r4, r0
    format_next(buf + sprintf(buf, "\"%s\": %.2f", name, value));
   d4298:	68c0      	ldr	r0, [r0, #12]
    format_next(buf + sprintf(buf, "\"%s\": %lu", name, value));
}

template <>
void JField<float>::format(char *buf)
{
   d429a:	460d      	mov	r5, r1
    format_next(buf + sprintf(buf, "\"%s\": %.2f", name, value));
   d429c:	f001 ff96 	bl	d61cc <__aeabi_f2d>
   d42a0:	68a2      	ldr	r2, [r4, #8]
   d42a2:	e9cd 0100 	strd	r0, r1, [sp]
   d42a6:	4905      	ldr	r1, [pc, #20]	; (d42bc <_ZN6JFieldIfE6formatEPc+0x28>)
   d42a8:	4628      	mov	r0, r5
   d42aa:	f000 fb19 	bl	d48e0 <sprintf>
   d42ae:	1829      	adds	r1, r5, r0
   d42b0:	1d20      	adds	r0, r4, #4
}
   d42b2:	b003      	add	sp, #12
   d42b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
}

template <>
void JField<float>::format(char *buf)
{
    format_next(buf + sprintf(buf, "\"%s\": %.2f", name, value));
   d42b8:	f7ff bfdc 	b.w	d4274 <_ZN10JFieldBase11format_nextEPc.isra.6>
   d42bc:	000d6862 	.word	0x000d6862

000d42c0 <_ZN10JFieldBaseD1Ev>:

public:
    JFieldBase(JFieldBase *next) : next(next){};
    virtual void format(char *buf) = 0;
    JFieldBase* get_next() { return next; };
    virtual ~JFieldBase() {
   d42c0:	b510      	push	{r4, lr}
   d42c2:	4b05      	ldr	r3, [pc, #20]	; (d42d8 <_ZN10JFieldBaseD1Ev+0x18>)
   d42c4:	6003      	str	r3, [r0, #0]
   d42c6:	4604      	mov	r4, r0
        delete next;
   d42c8:	6840      	ldr	r0, [r0, #4]
   d42ca:	b110      	cbz	r0, d42d2 <_ZN10JFieldBaseD1Ev+0x12>
   d42cc:	6803      	ldr	r3, [r0, #0]
   d42ce:	689b      	ldr	r3, [r3, #8]
   d42d0:	4798      	blx	r3
    };
   d42d2:	4620      	mov	r0, r4
   d42d4:	bd10      	pop	{r4, pc}
   d42d6:	bf00      	nop
   d42d8:	000d6840 	.word	0x000d6840

000d42dc <_ZN6JFieldIfED1Ev>:
};

template <typename T>
class JField : public JFieldBase
   d42dc:	b510      	push	{r4, lr}
   d42de:	4b03      	ldr	r3, [pc, #12]	; (d42ec <_ZN6JFieldIfED1Ev+0x10>)
   d42e0:	6003      	str	r3, [r0, #0]
   d42e2:	4604      	mov	r4, r0
   d42e4:	f7ff ffec 	bl	d42c0 <_ZN10JFieldBaseD1Ev>
   d42e8:	4620      	mov	r0, r4
   d42ea:	bd10      	pop	{r4, pc}
   d42ec:	000d6854 	.word	0x000d6854

000d42f0 <_ZN6JFieldIfED0Ev>:
   d42f0:	b510      	push	{r4, lr}
   d42f2:	4604      	mov	r4, r0
   d42f4:	f7ff fff2 	bl	d42dc <_ZN6JFieldIfED1Ev>
   d42f8:	4620      	mov	r0, r4
   d42fa:	2110      	movs	r1, #16
   d42fc:	f001 fc9b 	bl	d5c36 <_ZdlPvj>
   d4300:	4620      	mov	r0, r4
   d4302:	bd10      	pop	{r4, pc}

000d4304 <_ZN10JFieldBaseD0Ev>:

public:
    JFieldBase(JFieldBase *next) : next(next){};
    virtual void format(char *buf) = 0;
    JFieldBase* get_next() { return next; };
    virtual ~JFieldBase() {
   d4304:	b510      	push	{r4, lr}
   d4306:	4604      	mov	r4, r0
        delete next;
    };
   d4308:	f7ff ffda 	bl	d42c0 <_ZN10JFieldBaseD1Ev>
   d430c:	4620      	mov	r0, r4
   d430e:	2108      	movs	r1, #8
   d4310:	f001 fc91 	bl	d5c36 <_ZdlPvj>
   d4314:	4620      	mov	r0, r4
   d4316:	bd10      	pop	{r4, pc}

000d4318 <setup>:
#define MAIN_DEBUG 1

Adafruit_Si7021 sensor = Adafruit_Si7021();

void setup()
{
   d4318:	b508      	push	{r3, lr}
  Wire.begin();
   d431a:	f001 fc41 	bl	d5ba0 <_Z19__fetch_global_Wirev>
}
   d431e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

Adafruit_Si7021 sensor = Adafruit_Si7021();

void setup()
{
  Wire.begin();
   d4322:	f000 bea3 	b.w	d506c <_ZN7TwoWire5beginEv>
	...

000d4328 <_ZN4JSON4pushIfEEvPKcT_>:
    public:
    JSON() : current(NULL) {};
    ~JSON() {
        delete current;
    }
    template<typename T> void push(const char* name, T value) {
   d4328:	b538      	push	{r3, r4, r5, lr}
   d432a:	4604      	mov	r4, r0
   d432c:	ed2d 8b02 	vpush	{d8}
        current = new JField<T>(name, value, current);
   d4330:	2010      	movs	r0, #16
    public:
    JSON() : current(NULL) {};
    ~JSON() {
        delete current;
    }
    template<typename T> void push(const char* name, T value) {
   d4332:	460d      	mov	r5, r1
   d4334:	eeb0 8a40 	vmov.f32	s16, s0
        current = new JField<T>(name, value, current);
   d4338:	f7ff feaf 	bl	d409a <_Znwj>
   d433c:	b130      	cbz	r0, d434c <_ZN4JSON4pushIfEEvPKcT_+0x24>
            sprintf(buf, "}");
        }
    }

public:
    JFieldBase(JFieldBase *next) : next(next){};
   d433e:	6823      	ldr	r3, [r4, #0]
   d4340:	6043      	str	r3, [r0, #4]
private:
    const char *name;
    T value;

public:
    JField(const char *name, T value, JFieldBase *next) : JFieldBase(next), name(name), value(value){};
   d4342:	4b04      	ldr	r3, [pc, #16]	; (d4354 <_ZN4JSON4pushIfEEvPKcT_+0x2c>)
   d4344:	6003      	str	r3, [r0, #0]
   d4346:	6085      	str	r5, [r0, #8]
   d4348:	ed80 8a03 	vstr	s16, [r0, #12]
    ~JSON() {
        delete current;
    }
    template<typename T> void push(const char* name, T value) {
        current = new JField<T>(name, value, current);
    }
   d434c:	ecbd 8b02 	vpop	{d8}
    JSON() : current(NULL) {};
    ~JSON() {
        delete current;
    }
    template<typename T> void push(const char* name, T value) {
        current = new JField<T>(name, value, current);
   d4350:	6020      	str	r0, [r4, #0]
    }
   d4352:	bd38      	pop	{r3, r4, r5, pc}
   d4354:	000d6854 	.word	0x000d6854

000d4358 <loop>:
}

void loop()
{
   d4358:	b570      	push	{r4, r5, r6, lr}
   d435a:	b0aa      	sub	sp, #168	; 0xa8

class JSON {
    private:
    JFieldBase* current;
    public:
    JSON() : current(NULL) {};
   d435c:	ac2a      	add	r4, sp, #168	; 0xa8
   d435e:	2300      	movs	r3, #0
   d4360:	f844 3da0 	str.w	r3, [r4, #-160]!
  JSON json;
  json.push("temperature", sensor.readTemperature());
   d4364:	4846      	ldr	r0, [pc, #280]	; (d4480 <loop+0x128>)
   d4366:	f7ff ff1b 	bl	d41a0 <_ZN15Adafruit_Si702115readTemperatureEv>
   d436a:	4946      	ldr	r1, [pc, #280]	; (d4484 <loop+0x12c>)
   d436c:	4620      	mov	r0, r4
   d436e:	f7ff ffdb 	bl	d4328 <_ZN4JSON4pushIfEEvPKcT_>
  json.push("humidity", sensor.readHumidity());
   d4372:	4843      	ldr	r0, [pc, #268]	; (d4480 <loop+0x128>)
   d4374:	f7ff feb8 	bl	d40e8 <_ZN15Adafruit_Si702112readHumidityEv>
   d4378:	4943      	ldr	r1, [pc, #268]	; (d4488 <loop+0x130>)
   d437a:	4620      	mov	r0, r4
   d437c:	f7ff ffd4 	bl	d4328 <_ZN4JSON4pushIfEEvPKcT_>
  json.push("voltage", (float)(analogRead(BATT)*0.0011224));
   d4380:	2021      	movs	r0, #33	; 0x21
   d4382:	f001 fbdb 	bl	d5b3c <analogRead>
   d4386:	f001 ff0f 	bl	d61a8 <__aeabi_i2d>
   d438a:	a33b      	add	r3, pc, #236	; (adr r3, d4478 <loop+0x120>)
   d438c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4390:	f001 ff70 	bl	d6274 <__aeabi_dmul>
   d4394:	f002 f980 	bl	d6698 <__aeabi_d2f>
   d4398:	493c      	ldr	r1, [pc, #240]	; (d448c <loop+0x134>)
   d439a:	ee00 0a10 	vmov	s0, r0
   d439e:	4620      	mov	r0, r4
   d43a0:	f7ff ffc2 	bl	d4328 <_ZN4JSON4pushIfEEvPKcT_>
    template<typename T> void push(const char* name, T value) {
        current = new JField<T>(name, value, current);
    }
    void format(char* buf){
        buf[0] = '{';
        current->format(buf+1);
   d43a4:	9802      	ldr	r0, [sp, #8]
    }
    template<typename T> void push(const char* name, T value) {
        current = new JField<T>(name, value, current);
    }
    void format(char* buf){
        buf[0] = '{';
   d43a6:	237b      	movs	r3, #123	; 0x7b
   d43a8:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
        current->format(buf+1);
   d43ac:	6803      	ldr	r3, [r0, #0]
   d43ae:	f10d 0131 	add.w	r1, sp, #49	; 0x31
   d43b2:	681b      	ldr	r3, [r3, #0]
   d43b4:	4798      	blx	r3
  char res[120];
  json.format(res);
#ifdef MAIN_DEBUG
  Serial.println(res);
   d43b6:	f001 fab3 	bl	d5920 <_Z16_fetch_usbserialv>
   d43ba:	a90c      	add	r1, sp, #48	; 0x30
   d43bc:	f001 f8b1 	bl	d5522 <_ZN5Print7printlnEPKc>
   d43c0:	4b33      	ldr	r3, [pc, #204]	; (d4490 <loop+0x138>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d43c2:	4934      	ldr	r1, [pc, #208]	; (d4494 <loop+0x13c>)
   d43c4:	781b      	ldrb	r3, [r3, #0]
   d43c6:	f88d 3000 	strb.w	r3, [sp]
   d43ca:	aa0c      	add	r2, sp, #48	; 0x30
   d43cc:	233c      	movs	r3, #60	; 0x3c
   d43ce:	a806      	add	r0, sp, #24
   d43d0:	f000 fc4e 	bl	d4c70 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d43d4:	9c07      	ldr	r4, [sp, #28]
   d43d6:	b17c      	cbz	r4, d43f8 <loop+0xa0>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d43d8:	6863      	ldr	r3, [r4, #4]
   d43da:	3b01      	subs	r3, #1
   d43dc:	6063      	str	r3, [r4, #4]
   d43de:	b95b      	cbnz	r3, d43f8 <loop+0xa0>
        {
          _M_dispose();
   d43e0:	6823      	ldr	r3, [r4, #0]
   d43e2:	4620      	mov	r0, r4
   d43e4:	689b      	ldr	r3, [r3, #8]
   d43e6:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d43e8:	68a3      	ldr	r3, [r4, #8]
   d43ea:	3b01      	subs	r3, #1
   d43ec:	60a3      	str	r3, [r4, #8]
   d43ee:	b91b      	cbnz	r3, d43f8 <loop+0xa0>
            _M_destroy();
   d43f0:	6823      	ldr	r3, [r4, #0]
   d43f2:	4620      	mov	r0, r4
   d43f4:	68db      	ldr	r3, [r3, #12]
   d43f6:	4798      	blx	r3
public:
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
   d43f8:	2510      	movs	r5, #16
};

class SystemSleepConfigurationHelper {
public:
    SystemSleepConfigurationHelper(const hal_sleep_config_t* config)
        : config_(config) {
   d43fa:	a807      	add	r0, sp, #28
public:
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
   d43fc:	462a      	mov	r2, r5
   d43fe:	2100      	movs	r1, #0
};

class SystemSleepConfigurationHelper {
public:
    SystemSleepConfigurationHelper(const hal_sleep_config_t* config)
        : config_(config) {
   d4400:	9006      	str	r0, [sp, #24]
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
        config_.size = sizeof(hal_sleep_config_t);
        config_.version = HAL_SLEEP_VERSION;
   d4402:	2602      	movs	r6, #2
public:
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
   d4404:	f002 f9b1 	bl	d676a <memset>
   d4408:	2301      	movs	r3, #1
            if (wakeup) {
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   d440a:	4923      	ldr	r1, [pc, #140]	; (d4498 <loop+0x140>)
public:
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
   d440c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
            if (wakeup) {
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   d4410:	4628      	mov	r0, r5
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
        config_.size = sizeof(hal_sleep_config_t);
   d4412:	f8ad 501c 	strh.w	r5, [sp, #28]
        config_.version = HAL_SLEEP_VERSION;
   d4416:	f8ad 601e 	strh.w	r6, [sp, #30]
    }

    // Setters
    SystemSleepConfiguration& mode(SystemSleepMode mode) {
        if (valid_) {
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   d441a:	f88d 3020 	strb.w	r3, [sp, #32]
            if (wakeup) {
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   d441e:	f001 fc15 	bl	d5c4c <_ZnwjRKSt9nothrow_t>
   d4422:	4604      	mov	r4, r0
   d4424:	b310      	cbz	r0, d446c <loop+0x114>
   d4426:	462a      	mov	r2, r5
   d4428:	2100      	movs	r1, #0
   d442a:	f002 f99e 	bl	d676a <memset>
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   d442e:	2304      	movs	r3, #4
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   d4430:	8025      	strh	r5, [r4, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
   d4432:	8066      	strh	r6, [r4, #2]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   d4434:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d4436:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d4438:	60a3      	str	r3, [r4, #8]
            wakeupSource->ms = ms;
   d443a:	4b18      	ldr	r3, [pc, #96]	; (d449c <loop+0x144>)
   d443c:	60e3      	str	r3, [r4, #12]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d443e:	940a      	str	r4, [sp, #40]	; 0x28
#endif
  Particle.publish("ambience/cigarbox", res, PRIVATE);
  SystemSleepConfiguration config;
  config.mode(SystemSleepMode::STOP)
        .duration(2h);
  System.sleep(config);
   d4440:	a803      	add	r0, sp, #12
   d4442:	a906      	add	r1, sp, #24
   d4444:	f001 f900 	bl	d5648 <_ZN11SystemClass5sleepERK24SystemSleepConfiguration>
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
   d4448:	9803      	ldr	r0, [sp, #12]
   d444a:	b108      	cbz	r0, d4450 <loop+0xf8>
            free(wakeupSource_);
   d444c:	f000 fa40 	bl	d48d0 <free>
    }

    // Destructor
    ~SystemSleepConfiguration() {
        // Free memory
        auto wakeupSource = config_.wakeup_sources;
   d4450:	980a      	ldr	r0, [sp, #40]	; 0x28
        while (wakeupSource) {
   d4452:	b128      	cbz	r0, d4460 <loop+0x108>
            auto next = wakeupSource->next;
   d4454:	6884      	ldr	r4, [r0, #8]
            delete wakeupSource;
   d4456:	210c      	movs	r1, #12
   d4458:	f001 fbed 	bl	d5c36 <_ZdlPvj>
            wakeupSource = next;
   d445c:	4620      	mov	r0, r4
   d445e:	e7f8      	b.n	d4452 <loop+0xfa>
    private:
    JFieldBase* current;
    public:
    JSON() : current(NULL) {};
    ~JSON() {
        delete current;
   d4460:	9802      	ldr	r0, [sp, #8]
   d4462:	b130      	cbz	r0, d4472 <loop+0x11a>
   d4464:	6803      	ldr	r3, [r0, #0]
   d4466:	689b      	ldr	r3, [r3, #8]
   d4468:	4798      	blx	r3
   d446a:	e002      	b.n	d4472 <loop+0x11a>
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
            if (!wakeupSource) {
                valid_ = false;
   d446c:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
   d4470:	e7e6      	b.n	d4440 <loop+0xe8>
   d4472:	b02a      	add	sp, #168	; 0xa8
   d4474:	bd70      	pop	{r4, r5, r6, pc}
   d4476:	bf00      	nop
   d4478:	d2c10294 	.word	0xd2c10294
   d447c:	3f5263af 	.word	0x3f5263af
   d4480:	2003e3b8 	.word	0x2003e3b8
   d4484:	000d6880 	.word	0x000d6880
   d4488:	000d688c 	.word	0x000d688c
   d448c:	000d6895 	.word	0x000d6895
   d4490:	2003e3c8 	.word	0x2003e3c8
   d4494:	000d689d 	.word	0x000d689d
   d4498:	000d6b7c 	.word	0x000d6b7c
   d449c:	006ddd00 	.word	0x006ddd00

000d44a0 <_GLOBAL__sub_I__ZN6JFieldIiE6formatEPc>:
   d44a0:	b508      	push	{r3, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d44a2:	4b06      	ldr	r3, [pc, #24]	; (d44bc <_GLOBAL__sub_I__ZN6JFieldIiE6formatEPc+0x1c>)
   d44a4:	2201      	movs	r2, #1
   d44a6:	701a      	strb	r2, [r3, #0]
   d44a8:	f000 f84c 	bl	d4544 <HAL_Pin_Map>
 *  @brief  Class that stores state and functions for interacting with
 *          Si7021 Sensor
 */
class Adafruit_Si7021 {
public:
  Adafruit_Si7021(TwoWire *theWire = &Wire);
   d44ac:	f001 fb78 	bl	d5ba0 <_Z19__fetch_global_Wirev>
   d44b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
#include "Adafruit_Si7021.h"
#include "ujson.hpp"
#define MAIN_DEBUG 1

Adafruit_Si7021 sensor = Adafruit_Si7021();
   d44b4:	4601      	mov	r1, r0
   d44b6:	4802      	ldr	r0, [pc, #8]	; (d44c0 <_GLOBAL__sub_I__ZN6JFieldIiE6formatEPc+0x20>)
   d44b8:	f7ff be0c 	b.w	d40d4 <_ZN15Adafruit_Si7021C1EP7TwoWire>
   d44bc:	2003e3c8 	.word	0x2003e3c8
   d44c0:	2003e3b8 	.word	0x2003e3b8

000d44c4 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d44c4:	b508      	push	{r3, lr}
   d44c6:	4b02      	ldr	r3, [pc, #8]	; (d44d0 <os_thread_is_current+0xc>)
   d44c8:	681b      	ldr	r3, [r3, #0]
   d44ca:	689b      	ldr	r3, [r3, #8]
   d44cc:	9301      	str	r3, [sp, #4]
   d44ce:	bd08      	pop	{r3, pc}
   d44d0:	00030248 	.word	0x00030248

000d44d4 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d44d4:	b508      	push	{r3, lr}
   d44d6:	4b02      	ldr	r3, [pc, #8]	; (d44e0 <os_thread_join+0xc>)
   d44d8:	681b      	ldr	r3, [r3, #0]
   d44da:	691b      	ldr	r3, [r3, #16]
   d44dc:	9301      	str	r3, [sp, #4]
   d44de:	bd08      	pop	{r3, pc}
   d44e0:	00030248 	.word	0x00030248

000d44e4 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d44e4:	b508      	push	{r3, lr}
   d44e6:	4b02      	ldr	r3, [pc, #8]	; (d44f0 <os_thread_cleanup+0xc>)
   d44e8:	681b      	ldr	r3, [r3, #0]
   d44ea:	695b      	ldr	r3, [r3, #20]
   d44ec:	9301      	str	r3, [sp, #4]
   d44ee:	bd08      	pop	{r3, pc}
   d44f0:	00030248 	.word	0x00030248

000d44f4 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d44f4:	b508      	push	{r3, lr}
   d44f6:	4b02      	ldr	r3, [pc, #8]	; (d4500 <os_mutex_recursive_create+0xc>)
   d44f8:	681b      	ldr	r3, [r3, #0]
   d44fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d44fc:	9301      	str	r3, [sp, #4]
   d44fe:	bd08      	pop	{r3, pc}
   d4500:	00030248 	.word	0x00030248

000d4504 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4504:	b508      	push	{r3, lr}
   d4506:	4b02      	ldr	r3, [pc, #8]	; (d4510 <os_mutex_recursive_destroy+0xc>)
   d4508:	681b      	ldr	r3, [r3, #0]
   d450a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d450c:	9301      	str	r3, [sp, #4]
   d450e:	bd08      	pop	{r3, pc}
   d4510:	00030248 	.word	0x00030248

000d4514 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4514:	b508      	push	{r3, lr}
   d4516:	4b02      	ldr	r3, [pc, #8]	; (d4520 <HAL_RNG_GetRandomNumber+0xc>)
   d4518:	681b      	ldr	r3, [r3, #0]
   d451a:	685b      	ldr	r3, [r3, #4]
   d451c:	9301      	str	r3, [sp, #4]
   d451e:	bd08      	pop	{r3, pc}
   d4520:	00030218 	.word	0x00030218

000d4524 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d4524:	b508      	push	{r3, lr}
   d4526:	4b02      	ldr	r3, [pc, #8]	; (d4530 <HAL_Delay_Microseconds+0xc>)
   d4528:	681b      	ldr	r3, [r3, #0]
   d452a:	68db      	ldr	r3, [r3, #12]
   d452c:	9301      	str	r3, [sp, #4]
   d452e:	bd08      	pop	{r3, pc}
   d4530:	00030218 	.word	0x00030218

000d4534 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4534:	b508      	push	{r3, lr}
   d4536:	4b02      	ldr	r3, [pc, #8]	; (d4540 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4538:	681b      	ldr	r3, [r3, #0]
   d453a:	695b      	ldr	r3, [r3, #20]
   d453c:	9301      	str	r3, [sp, #4]
   d453e:	bd08      	pop	{r3, pc}
   d4540:	00030218 	.word	0x00030218

000d4544 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d4544:	b508      	push	{r3, lr}
   d4546:	4b02      	ldr	r3, [pc, #8]	; (d4550 <HAL_Pin_Map+0xc>)
   d4548:	681b      	ldr	r3, [r3, #0]
   d454a:	681b      	ldr	r3, [r3, #0]
   d454c:	9301      	str	r3, [sp, #4]
   d454e:	bd08      	pop	{r3, pc}
   d4550:	0003022c 	.word	0x0003022c

000d4554 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d4554:	b508      	push	{r3, lr}
   d4556:	4b02      	ldr	r3, [pc, #8]	; (d4560 <HAL_Validate_Pin_Function+0xc>)
   d4558:	681b      	ldr	r3, [r3, #0]
   d455a:	685b      	ldr	r3, [r3, #4]
   d455c:	9301      	str	r3, [sp, #4]
   d455e:	bd08      	pop	{r3, pc}
   d4560:	0003022c 	.word	0x0003022c

000d4564 <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d4564:	b508      	push	{r3, lr}
   d4566:	4b02      	ldr	r3, [pc, #8]	; (d4570 <HAL_ADC_Read+0xc>)
   d4568:	681b      	ldr	r3, [r3, #0]
   d456a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d456c:	9301      	str	r3, [sp, #4]
   d456e:	bd08      	pop	{r3, pc}
   d4570:	0003022c 	.word	0x0003022c

000d4574 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d4574:	b508      	push	{r3, lr}
   d4576:	4b02      	ldr	r3, [pc, #8]	; (d4580 <HAL_I2C_Begin+0xc>)
   d4578:	681b      	ldr	r3, [r3, #0]
   d457a:	68db      	ldr	r3, [r3, #12]
   d457c:	9301      	str	r3, [sp, #4]
   d457e:	bd08      	pop	{r3, pc}
   d4580:	00030228 	.word	0x00030228

000d4584 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
   d4584:	b508      	push	{r3, lr}
   d4586:	4b02      	ldr	r3, [pc, #8]	; (d4590 <HAL_I2C_Begin_Transmission+0xc>)
   d4588:	681b      	ldr	r3, [r3, #0]
   d458a:	699b      	ldr	r3, [r3, #24]
   d458c:	9301      	str	r3, [sp, #4]
   d458e:	bd08      	pop	{r3, pc}
   d4590:	00030228 	.word	0x00030228

000d4594 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d4594:	b508      	push	{r3, lr}
   d4596:	4b02      	ldr	r3, [pc, #8]	; (d45a0 <HAL_I2C_End_Transmission+0xc>)
   d4598:	681b      	ldr	r3, [r3, #0]
   d459a:	69db      	ldr	r3, [r3, #28]
   d459c:	9301      	str	r3, [sp, #4]
   d459e:	bd08      	pop	{r3, pc}
   d45a0:	00030228 	.word	0x00030228

000d45a4 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d45a4:	b508      	push	{r3, lr}
   d45a6:	4b02      	ldr	r3, [pc, #8]	; (d45b0 <HAL_I2C_Write_Data+0xc>)
   d45a8:	681b      	ldr	r3, [r3, #0]
   d45aa:	6a1b      	ldr	r3, [r3, #32]
   d45ac:	9301      	str	r3, [sp, #4]
   d45ae:	bd08      	pop	{r3, pc}
   d45b0:	00030228 	.word	0x00030228

000d45b4 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d45b4:	b508      	push	{r3, lr}
   d45b6:	4b02      	ldr	r3, [pc, #8]	; (d45c0 <HAL_I2C_Available_Data+0xc>)
   d45b8:	681b      	ldr	r3, [r3, #0]
   d45ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d45bc:	9301      	str	r3, [sp, #4]
   d45be:	bd08      	pop	{r3, pc}
   d45c0:	00030228 	.word	0x00030228

000d45c4 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d45c4:	b508      	push	{r3, lr}
   d45c6:	4b02      	ldr	r3, [pc, #8]	; (d45d0 <HAL_I2C_Read_Data+0xc>)
   d45c8:	681b      	ldr	r3, [r3, #0]
   d45ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d45cc:	9301      	str	r3, [sp, #4]
   d45ce:	bd08      	pop	{r3, pc}
   d45d0:	00030228 	.word	0x00030228

000d45d4 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d45d4:	b508      	push	{r3, lr}
   d45d6:	4b02      	ldr	r3, [pc, #8]	; (d45e0 <HAL_I2C_Peek_Data+0xc>)
   d45d8:	681b      	ldr	r3, [r3, #0]
   d45da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d45dc:	9301      	str	r3, [sp, #4]
   d45de:	bd08      	pop	{r3, pc}
   d45e0:	00030228 	.word	0x00030228

000d45e4 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d45e4:	b508      	push	{r3, lr}
   d45e6:	4b02      	ldr	r3, [pc, #8]	; (d45f0 <HAL_I2C_Flush_Data+0xc>)
   d45e8:	681b      	ldr	r3, [r3, #0]
   d45ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d45ec:	9301      	str	r3, [sp, #4]
   d45ee:	bd08      	pop	{r3, pc}
   d45f0:	00030228 	.word	0x00030228

000d45f4 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d45f4:	b508      	push	{r3, lr}
   d45f6:	4b02      	ldr	r3, [pc, #8]	; (d4600 <HAL_I2C_Is_Enabled+0xc>)
   d45f8:	681b      	ldr	r3, [r3, #0]
   d45fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d45fc:	9301      	str	r3, [sp, #4]
   d45fe:	bd08      	pop	{r3, pc}
   d4600:	00030228 	.word	0x00030228

000d4604 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d4604:	b508      	push	{r3, lr}
   d4606:	4b02      	ldr	r3, [pc, #8]	; (d4610 <HAL_I2C_Init+0xc>)
   d4608:	681b      	ldr	r3, [r3, #0]
   d460a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d460c:	9301      	str	r3, [sp, #4]
   d460e:	bd08      	pop	{r3, pc}
   d4610:	00030228 	.word	0x00030228

000d4614 <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
   d4614:	b508      	push	{r3, lr}
   d4616:	4b02      	ldr	r3, [pc, #8]	; (d4620 <HAL_I2C_Request_Data_Ex+0xc>)
   d4618:	681b      	ldr	r3, [r3, #0]
   d461a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d461c:	9301      	str	r3, [sp, #4]
   d461e:	bd08      	pop	{r3, pc}
   d4620:	00030228 	.word	0x00030228

000d4624 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4624:	b508      	push	{r3, lr}
   d4626:	4b02      	ldr	r3, [pc, #8]	; (d4630 <inet_inet_ntop+0xc>)
   d4628:	681b      	ldr	r3, [r3, #0]
   d462a:	695b      	ldr	r3, [r3, #20]
   d462c:	9301      	str	r3, [sp, #4]
   d462e:	bd08      	pop	{r3, pc}
   d4630:	00030264 	.word	0x00030264

000d4634 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4634:	b508      	push	{r3, lr}
   d4636:	4b02      	ldr	r3, [pc, #8]	; (d4640 <netdb_freeaddrinfo+0xc>)
   d4638:	681b      	ldr	r3, [r3, #0]
   d463a:	689b      	ldr	r3, [r3, #8]
   d463c:	9301      	str	r3, [sp, #4]
   d463e:	bd08      	pop	{r3, pc}
   d4640:	00030268 	.word	0x00030268

000d4644 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4644:	b508      	push	{r3, lr}
   d4646:	4b02      	ldr	r3, [pc, #8]	; (d4650 <netdb_getaddrinfo+0xc>)
   d4648:	681b      	ldr	r3, [r3, #0]
   d464a:	68db      	ldr	r3, [r3, #12]
   d464c:	9301      	str	r3, [sp, #4]
   d464e:	bd08      	pop	{r3, pc}
   d4650:	00030268 	.word	0x00030268

000d4654 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d4654:	b508      	push	{r3, lr}
   d4656:	4b02      	ldr	r3, [pc, #8]	; (d4660 <HAL_SPI_Init+0xc>)
   d4658:	681b      	ldr	r3, [r3, #0]
   d465a:	69db      	ldr	r3, [r3, #28]
   d465c:	9301      	str	r3, [sp, #4]
   d465e:	bd08      	pop	{r3, pc}
   d4660:	00030230 	.word	0x00030230

000d4664 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d4664:	b508      	push	{r3, lr}
   d4666:	4b02      	ldr	r3, [pc, #8]	; (d4670 <HAL_SPI_Is_Enabled+0xc>)
   d4668:	681b      	ldr	r3, [r3, #0]
   d466a:	6a1b      	ldr	r3, [r3, #32]
   d466c:	9301      	str	r3, [sp, #4]
   d466e:	bd08      	pop	{r3, pc}
   d4670:	00030230 	.word	0x00030230

000d4674 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4674:	b508      	push	{r3, lr}
   d4676:	4b02      	ldr	r3, [pc, #8]	; (d4680 <HAL_USART_Init+0xc>)
   d4678:	681b      	ldr	r3, [r3, #0]
   d467a:	681b      	ldr	r3, [r3, #0]
   d467c:	9301      	str	r3, [sp, #4]
   d467e:	bd08      	pop	{r3, pc}
   d4680:	0003023c 	.word	0x0003023c

000d4684 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4684:	b508      	push	{r3, lr}
   d4686:	4b02      	ldr	r3, [pc, #8]	; (d4690 <HAL_USART_Write_Data+0xc>)
   d4688:	681b      	ldr	r3, [r3, #0]
   d468a:	68db      	ldr	r3, [r3, #12]
   d468c:	9301      	str	r3, [sp, #4]
   d468e:	bd08      	pop	{r3, pc}
   d4690:	0003023c 	.word	0x0003023c

000d4694 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4694:	b508      	push	{r3, lr}
   d4696:	4b02      	ldr	r3, [pc, #8]	; (d46a0 <HAL_USART_Available_Data+0xc>)
   d4698:	681b      	ldr	r3, [r3, #0]
   d469a:	691b      	ldr	r3, [r3, #16]
   d469c:	9301      	str	r3, [sp, #4]
   d469e:	bd08      	pop	{r3, pc}
   d46a0:	0003023c 	.word	0x0003023c

000d46a4 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d46a4:	b508      	push	{r3, lr}
   d46a6:	4b02      	ldr	r3, [pc, #8]	; (d46b0 <HAL_USART_Read_Data+0xc>)
   d46a8:	681b      	ldr	r3, [r3, #0]
   d46aa:	695b      	ldr	r3, [r3, #20]
   d46ac:	9301      	str	r3, [sp, #4]
   d46ae:	bd08      	pop	{r3, pc}
   d46b0:	0003023c 	.word	0x0003023c

000d46b4 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d46b4:	b508      	push	{r3, lr}
   d46b6:	4b02      	ldr	r3, [pc, #8]	; (d46c0 <HAL_USART_Peek_Data+0xc>)
   d46b8:	681b      	ldr	r3, [r3, #0]
   d46ba:	699b      	ldr	r3, [r3, #24]
   d46bc:	9301      	str	r3, [sp, #4]
   d46be:	bd08      	pop	{r3, pc}
   d46c0:	0003023c 	.word	0x0003023c

000d46c4 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d46c4:	b508      	push	{r3, lr}
   d46c6:	4b02      	ldr	r3, [pc, #8]	; (d46d0 <HAL_USART_Flush_Data+0xc>)
   d46c8:	681b      	ldr	r3, [r3, #0]
   d46ca:	69db      	ldr	r3, [r3, #28]
   d46cc:	9301      	str	r3, [sp, #4]
   d46ce:	bd08      	pop	{r3, pc}
   d46d0:	0003023c 	.word	0x0003023c

000d46d4 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d46d4:	b508      	push	{r3, lr}
   d46d6:	4b02      	ldr	r3, [pc, #8]	; (d46e0 <HAL_USART_Is_Enabled+0xc>)
   d46d8:	681b      	ldr	r3, [r3, #0]
   d46da:	6a1b      	ldr	r3, [r3, #32]
   d46dc:	9301      	str	r3, [sp, #4]
   d46de:	bd08      	pop	{r3, pc}
   d46e0:	0003023c 	.word	0x0003023c

000d46e4 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d46e4:	b508      	push	{r3, lr}
   d46e6:	4b02      	ldr	r3, [pc, #8]	; (d46f0 <HAL_USART_Available_Data_For_Write+0xc>)
   d46e8:	681b      	ldr	r3, [r3, #0]
   d46ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d46ec:	9301      	str	r3, [sp, #4]
   d46ee:	bd08      	pop	{r3, pc}
   d46f0:	0003023c 	.word	0x0003023c

000d46f4 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d46f4:	b508      	push	{r3, lr}
   d46f6:	4b02      	ldr	r3, [pc, #8]	; (d4700 <HAL_USB_USART_Init+0xc>)
   d46f8:	681b      	ldr	r3, [r3, #0]
   d46fa:	681b      	ldr	r3, [r3, #0]
   d46fc:	9301      	str	r3, [sp, #4]
   d46fe:	bd08      	pop	{r3, pc}
   d4700:	0003024c 	.word	0x0003024c

000d4704 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4704:	b508      	push	{r3, lr}
   d4706:	4b02      	ldr	r3, [pc, #8]	; (d4710 <HAL_USB_USART_Available_Data+0xc>)
   d4708:	681b      	ldr	r3, [r3, #0]
   d470a:	691b      	ldr	r3, [r3, #16]
   d470c:	9301      	str	r3, [sp, #4]
   d470e:	bd08      	pop	{r3, pc}
   d4710:	0003024c 	.word	0x0003024c

000d4714 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4714:	b508      	push	{r3, lr}
   d4716:	4b02      	ldr	r3, [pc, #8]	; (d4720 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4718:	681b      	ldr	r3, [r3, #0]
   d471a:	695b      	ldr	r3, [r3, #20]
   d471c:	9301      	str	r3, [sp, #4]
   d471e:	bd08      	pop	{r3, pc}
   d4720:	0003024c 	.word	0x0003024c

000d4724 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4724:	b508      	push	{r3, lr}
   d4726:	4b02      	ldr	r3, [pc, #8]	; (d4730 <HAL_USB_USART_Receive_Data+0xc>)
   d4728:	681b      	ldr	r3, [r3, #0]
   d472a:	699b      	ldr	r3, [r3, #24]
   d472c:	9301      	str	r3, [sp, #4]
   d472e:	bd08      	pop	{r3, pc}
   d4730:	0003024c 	.word	0x0003024c

000d4734 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4734:	b508      	push	{r3, lr}
   d4736:	4b02      	ldr	r3, [pc, #8]	; (d4740 <HAL_USB_USART_Send_Data+0xc>)
   d4738:	681b      	ldr	r3, [r3, #0]
   d473a:	69db      	ldr	r3, [r3, #28]
   d473c:	9301      	str	r3, [sp, #4]
   d473e:	bd08      	pop	{r3, pc}
   d4740:	0003024c 	.word	0x0003024c

000d4744 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4744:	b508      	push	{r3, lr}
   d4746:	4b02      	ldr	r3, [pc, #8]	; (d4750 <HAL_USB_USART_Flush_Data+0xc>)
   d4748:	681b      	ldr	r3, [r3, #0]
   d474a:	6a1b      	ldr	r3, [r3, #32]
   d474c:	9301      	str	r3, [sp, #4]
   d474e:	bd08      	pop	{r3, pc}
   d4750:	0003024c 	.word	0x0003024c

000d4754 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d4754:	b508      	push	{r3, lr}
   d4756:	4b02      	ldr	r3, [pc, #8]	; (d4760 <panic_+0xc>)
   d4758:	681b      	ldr	r3, [r3, #0]
   d475a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d475c:	9301      	str	r3, [sp, #4]
   d475e:	bd08      	pop	{r3, pc}
   d4760:	00030260 	.word	0x00030260

000d4764 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d4764:	b508      	push	{r3, lr}
   d4766:	4b02      	ldr	r3, [pc, #8]	; (d4770 <log_message+0xc>)
   d4768:	681b      	ldr	r3, [r3, #0]
   d476a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d476c:	9301      	str	r3, [sp, #4]
   d476e:	bd08      	pop	{r3, pc}
   d4770:	00030260 	.word	0x00030260

000d4774 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4774:	b508      	push	{r3, lr}
   d4776:	4b02      	ldr	r3, [pc, #8]	; (d4780 <set_system_mode+0xc>)
   d4778:	681b      	ldr	r3, [r3, #0]
   d477a:	685b      	ldr	r3, [r3, #4]
   d477c:	9301      	str	r3, [sp, #4]
   d477e:	bd08      	pop	{r3, pc}
   d4780:	00030220 	.word	0x00030220

000d4784 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4784:	b508      	push	{r3, lr}
   d4786:	4b02      	ldr	r3, [pc, #8]	; (d4790 <system_delay_ms+0xc>)
   d4788:	681b      	ldr	r3, [r3, #0]
   d478a:	695b      	ldr	r3, [r3, #20]
   d478c:	9301      	str	r3, [sp, #4]
   d478e:	bd08      	pop	{r3, pc}
   d4790:	00030220 	.word	0x00030220

000d4794 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d4794:	b508      	push	{r3, lr}
   d4796:	4b02      	ldr	r3, [pc, #8]	; (d47a0 <application_thread_current+0xc>)
   d4798:	681b      	ldr	r3, [r3, #0]
   d479a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d479c:	9301      	str	r3, [sp, #4]
   d479e:	bd08      	pop	{r3, pc}
   d47a0:	00030220 	.word	0x00030220

000d47a4 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d47a4:	b508      	push	{r3, lr}
   d47a6:	4b02      	ldr	r3, [pc, #8]	; (d47b0 <application_thread_invoke+0xc>)
   d47a8:	681b      	ldr	r3, [r3, #0]
   d47aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d47ac:	9301      	str	r3, [sp, #4]
   d47ae:	bd08      	pop	{r3, pc}
   d47b0:	00030220 	.word	0x00030220

000d47b4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d47b4:	b508      	push	{r3, lr}
   d47b6:	4b03      	ldr	r3, [pc, #12]	; (d47c4 <system_ctrl_set_app_request_handler+0x10>)
   d47b8:	681b      	ldr	r3, [r3, #0]
   d47ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d47be:	9301      	str	r3, [sp, #4]
   d47c0:	bd08      	pop	{r3, pc}
   d47c2:	0000      	.short	0x0000
   d47c4:	00030220 	.word	0x00030220

000d47c8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d47c8:	b508      	push	{r3, lr}
   d47ca:	4b03      	ldr	r3, [pc, #12]	; (d47d8 <system_ctrl_set_result+0x10>)
   d47cc:	681b      	ldr	r3, [r3, #0]
   d47ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d47d2:	9301      	str	r3, [sp, #4]
   d47d4:	bd08      	pop	{r3, pc}
   d47d6:	0000      	.short	0x0000
   d47d8:	00030220 	.word	0x00030220

000d47dc <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   d47dc:	b508      	push	{r3, lr}
   d47de:	4b03      	ldr	r3, [pc, #12]	; (d47ec <system_sleep_ext+0x10>)
   d47e0:	681b      	ldr	r3, [r3, #0]
   d47e2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   d47e6:	9301      	str	r3, [sp, #4]
   d47e8:	bd08      	pop	{r3, pc}
   d47ea:	0000      	.short	0x0000
   d47ec:	00030220 	.word	0x00030220

000d47f0 <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d47f0:	b508      	push	{r3, lr}
   d47f2:	4b02      	ldr	r3, [pc, #8]	; (d47fc <spark_cloud_flag_connected+0xc>)
   d47f4:	681b      	ldr	r3, [r3, #0]
   d47f6:	695b      	ldr	r3, [r3, #20]
   d47f8:	9301      	str	r3, [sp, #4]
   d47fa:	bd08      	pop	{r3, pc}
   d47fc:	00030244 	.word	0x00030244

000d4800 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d4800:	b508      	push	{r3, lr}
   d4802:	4b02      	ldr	r3, [pc, #8]	; (d480c <spark_send_event+0xc>)
   d4804:	681b      	ldr	r3, [r3, #0]
   d4806:	6a1b      	ldr	r3, [r3, #32]
   d4808:	9301      	str	r3, [sp, #4]
   d480a:	bd08      	pop	{r3, pc}
   d480c:	00030244 	.word	0x00030244

000d4810 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4810:	b508      	push	{r3, lr}
   d4812:	4b02      	ldr	r3, [pc, #8]	; (d481c <spark_set_random_seed_from_cloud_handler+0xc>)
   d4814:	681b      	ldr	r3, [r3, #0]
   d4816:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4818:	9301      	str	r3, [sp, #4]
   d481a:	bd08      	pop	{r3, pc}
   d481c:	00030244 	.word	0x00030244

000d4820 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4820:	b508      	push	{r3, lr}
   d4822:	4b02      	ldr	r3, [pc, #8]	; (d482c <network_connect+0xc>)
   d4824:	681b      	ldr	r3, [r3, #0]
   d4826:	685b      	ldr	r3, [r3, #4]
   d4828:	9301      	str	r3, [sp, #4]
   d482a:	bd08      	pop	{r3, pc}
   d482c:	00030240 	.word	0x00030240

000d4830 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4830:	b508      	push	{r3, lr}
   d4832:	4b02      	ldr	r3, [pc, #8]	; (d483c <network_connecting+0xc>)
   d4834:	681b      	ldr	r3, [r3, #0]
   d4836:	689b      	ldr	r3, [r3, #8]
   d4838:	9301      	str	r3, [sp, #4]
   d483a:	bd08      	pop	{r3, pc}
   d483c:	00030240 	.word	0x00030240

000d4840 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4840:	b508      	push	{r3, lr}
   d4842:	4b02      	ldr	r3, [pc, #8]	; (d484c <network_disconnect+0xc>)
   d4844:	681b      	ldr	r3, [r3, #0]
   d4846:	68db      	ldr	r3, [r3, #12]
   d4848:	9301      	str	r3, [sp, #4]
   d484a:	bd08      	pop	{r3, pc}
   d484c:	00030240 	.word	0x00030240

000d4850 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4850:	b508      	push	{r3, lr}
   d4852:	4b02      	ldr	r3, [pc, #8]	; (d485c <network_ready+0xc>)
   d4854:	681b      	ldr	r3, [r3, #0]
   d4856:	691b      	ldr	r3, [r3, #16]
   d4858:	9301      	str	r3, [sp, #4]
   d485a:	bd08      	pop	{r3, pc}
   d485c:	00030240 	.word	0x00030240

000d4860 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4860:	b508      	push	{r3, lr}
   d4862:	4b02      	ldr	r3, [pc, #8]	; (d486c <network_on+0xc>)
   d4864:	681b      	ldr	r3, [r3, #0]
   d4866:	695b      	ldr	r3, [r3, #20]
   d4868:	9301      	str	r3, [sp, #4]
   d486a:	bd08      	pop	{r3, pc}
   d486c:	00030240 	.word	0x00030240

000d4870 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4870:	b508      	push	{r3, lr}
   d4872:	4b02      	ldr	r3, [pc, #8]	; (d487c <network_off+0xc>)
   d4874:	681b      	ldr	r3, [r3, #0]
   d4876:	699b      	ldr	r3, [r3, #24]
   d4878:	9301      	str	r3, [sp, #4]
   d487a:	bd08      	pop	{r3, pc}
   d487c:	00030240 	.word	0x00030240

000d4880 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4880:	b508      	push	{r3, lr}
   d4882:	4b02      	ldr	r3, [pc, #8]	; (d488c <network_listen+0xc>)
   d4884:	681b      	ldr	r3, [r3, #0]
   d4886:	69db      	ldr	r3, [r3, #28]
   d4888:	9301      	str	r3, [sp, #4]
   d488a:	bd08      	pop	{r3, pc}
   d488c:	00030240 	.word	0x00030240

000d4890 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4890:	b508      	push	{r3, lr}
   d4892:	4b02      	ldr	r3, [pc, #8]	; (d489c <network_listening+0xc>)
   d4894:	681b      	ldr	r3, [r3, #0]
   d4896:	6a1b      	ldr	r3, [r3, #32]
   d4898:	9301      	str	r3, [sp, #4]
   d489a:	bd08      	pop	{r3, pc}
   d489c:	00030240 	.word	0x00030240

000d48a0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d48a0:	b508      	push	{r3, lr}
   d48a2:	4b02      	ldr	r3, [pc, #8]	; (d48ac <network_set_listen_timeout+0xc>)
   d48a4:	681b      	ldr	r3, [r3, #0]
   d48a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d48a8:	9301      	str	r3, [sp, #4]
   d48aa:	bd08      	pop	{r3, pc}
   d48ac:	00030240 	.word	0x00030240

000d48b0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d48b0:	b508      	push	{r3, lr}
   d48b2:	4b02      	ldr	r3, [pc, #8]	; (d48bc <network_get_listen_timeout+0xc>)
   d48b4:	681b      	ldr	r3, [r3, #0]
   d48b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d48b8:	9301      	str	r3, [sp, #4]
   d48ba:	bd08      	pop	{r3, pc}
   d48bc:	00030240 	.word	0x00030240

000d48c0 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d48c0:	b508      	push	{r3, lr}
   d48c2:	4b02      	ldr	r3, [pc, #8]	; (d48cc <malloc+0xc>)
   d48c4:	681b      	ldr	r3, [r3, #0]
   d48c6:	681b      	ldr	r3, [r3, #0]
   d48c8:	9301      	str	r3, [sp, #4]
   d48ca:	bd08      	pop	{r3, pc}
   d48cc:	0003021c 	.word	0x0003021c

000d48d0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d48d0:	b508      	push	{r3, lr}
   d48d2:	4b02      	ldr	r3, [pc, #8]	; (d48dc <free+0xc>)
   d48d4:	681b      	ldr	r3, [r3, #0]
   d48d6:	685b      	ldr	r3, [r3, #4]
   d48d8:	9301      	str	r3, [sp, #4]
   d48da:	bd08      	pop	{r3, pc}
   d48dc:	0003021c 	.word	0x0003021c

000d48e0 <sprintf>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   d48e0:	b508      	push	{r3, lr}
   d48e2:	4b02      	ldr	r3, [pc, #8]	; (d48ec <sprintf+0xc>)
   d48e4:	681b      	ldr	r3, [r3, #0]
   d48e6:	68db      	ldr	r3, [r3, #12]
   d48e8:	9301      	str	r3, [sp, #4]
   d48ea:	bd08      	pop	{r3, pc}
   d48ec:	0003021c 	.word	0x0003021c

000d48f0 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d48f0:	b508      	push	{r3, lr}
   d48f2:	4b02      	ldr	r3, [pc, #8]	; (d48fc <abort+0xc>)
   d48f4:	681b      	ldr	r3, [r3, #0]
   d48f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d48f8:	9301      	str	r3, [sp, #4]
   d48fa:	bd08      	pop	{r3, pc}
   d48fc:	0003021c 	.word	0x0003021c

000d4900 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d4900:	b508      	push	{r3, lr}
   d4902:	4b02      	ldr	r3, [pc, #8]	; (d490c <_malloc_r+0xc>)
   d4904:	681b      	ldr	r3, [r3, #0]
   d4906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4908:	9301      	str	r3, [sp, #4]
   d490a:	bd08      	pop	{r3, pc}
   d490c:	0003021c 	.word	0x0003021c

000d4910 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d4910:	2100      	movs	r1, #0
   d4912:	f7ff bf37 	b.w	d4784 <system_delay_ms>

000d4916 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d4916:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4918:	6883      	ldr	r3, [r0, #8]
   d491a:	4604      	mov	r4, r0
   d491c:	b90b      	cbnz	r3, d4922 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d491e:	f001 f9a6 	bl	d5c6e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4922:	68c3      	ldr	r3, [r0, #12]
   d4924:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d4926:	68a3      	ldr	r3, [r4, #8]
   d4928:	b11b      	cbz	r3, d4932 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d492a:	2203      	movs	r2, #3
   d492c:	4621      	mov	r1, r4
   d492e:	4620      	mov	r0, r4
   d4930:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d4932:	4620      	mov	r0, r4
   d4934:	2110      	movs	r1, #16
}
   d4936:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d493a:	f001 b97c 	b.w	d5c36 <_ZdlPvj>

000d493e <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d493e:	b510      	push	{r4, lr}
   d4940:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d4942:	6800      	ldr	r0, [r0, #0]
   d4944:	b108      	cbz	r0, d494a <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d4946:	f7ff fddd 	bl	d4504 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d494a:	4620      	mov	r0, r4
   d494c:	bd10      	pop	{r4, pc}

000d494e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d494e:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d4950:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4952:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d4954:	689b      	ldr	r3, [r3, #8]
   d4956:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4958:	68a3      	ldr	r3, [r4, #8]
   d495a:	3b01      	subs	r3, #1
   d495c:	60a3      	str	r3, [r4, #8]
   d495e:	b92b      	cbnz	r3, d496c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112+0x1e>
            _M_destroy();
   d4960:	6823      	ldr	r3, [r4, #0]
   d4962:	4620      	mov	r0, r4
   d4964:	68db      	ldr	r3, [r3, #12]
        }
    }
   d4966:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d496a:	4718      	bx	r3
   d496c:	bd10      	pop	{r4, pc}

000d496e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d496e:	680b      	ldr	r3, [r1, #0]
   d4970:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d4972:	b113      	cbz	r3, d497a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d4974:	685a      	ldr	r2, [r3, #4]
   d4976:	3201      	adds	r2, #1
   d4978:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d497a:	4770      	bx	lr

000d497c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d497c:	b510      	push	{r4, lr}
   d497e:	4604      	mov	r4, r0
      {
	if (_M_pi != nullptr)
   d4980:	6800      	ldr	r0, [r0, #0]
   d4982:	b128      	cbz	r0, d4990 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4984:	6843      	ldr	r3, [r0, #4]
   d4986:	3b01      	subs	r3, #1
   d4988:	6043      	str	r3, [r0, #4]
   d498a:	b90b      	cbnz	r3, d4990 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d498c:	f7ff ffdf 	bl	d494e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d4990:	4620      	mov	r0, r4
   d4992:	bd10      	pop	{r4, pc}

000d4994 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d4994:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4996:	4c06      	ldr	r4, [pc, #24]	; (d49b0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d4998:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d499a:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d499c:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d499e:	f7ff fda9 	bl	d44f4 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d49a2:	4620      	mov	r0, r4
   d49a4:	4a03      	ldr	r2, [pc, #12]	; (d49b4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d49a6:	4904      	ldr	r1, [pc, #16]	; (d49b8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d49a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d49ac:	f001 b93e 	b.w	d5c2c <__aeabi_atexit>
   d49b0:	2003e3cc 	.word	0x2003e3cc
   d49b4:	2003e3b4 	.word	0x2003e3b4
   d49b8:	000d493f 	.word	0x000d493f

000d49bc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d49bc:	4770      	bx	lr

000d49be <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d49be:	2000      	movs	r0, #0
   d49c0:	4770      	bx	lr

000d49c2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d49c2:	b510      	push	{r4, lr}
   d49c4:	2110      	movs	r1, #16
   d49c6:	4604      	mov	r4, r0
   d49c8:	f001 f935 	bl	d5c36 <_ZdlPvj>
   d49cc:	4620      	mov	r0, r4
   d49ce:	bd10      	pop	{r4, pc}

000d49d0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d49d0:	b508      	push	{r3, lr}
      { delete this; }
   d49d2:	b108      	cbz	r0, d49d8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d49d4:	f7ff fff5 	bl	d49c2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d49d8:	bd08      	pop	{r3, pc}

000d49da <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d49da:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d49dc:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d49de:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d49e0:	b113      	cbz	r3, d49e8 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d49e2:	2203      	movs	r2, #3
   d49e4:	4601      	mov	r1, r0
   d49e6:	4798      	blx	r3
    }
   d49e8:	4620      	mov	r0, r4
   d49ea:	bd10      	pop	{r4, pc}

000d49ec <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d49ec:	2200      	movs	r2, #0
   d49ee:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d49f0:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d49f2:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d49f6:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d49f8:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d49fc:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d49fe:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4a00:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d4a02:	680c      	ldr	r4, [r1, #0]
   d4a04:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d4a06:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d4a08:	bd10      	pop	{r4, pc}

000d4a0a <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d4a0a:	b510      	push	{r4, lr}
   d4a0c:	4604      	mov	r4, r0
    free((void*)msg_);
   d4a0e:	6800      	ldr	r0, [r0, #0]
   d4a10:	f7ff ff5e 	bl	d48d0 <free>
}
   d4a14:	4620      	mov	r0, r4
   d4a16:	bd10      	pop	{r4, pc}

000d4a18 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d4a18:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d4a1a:	68c4      	ldr	r4, [r0, #12]
   d4a1c:	b1f4      	cbz	r4, d4a5c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d4a1e:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d4a20:	2b02      	cmp	r3, #2
   d4a22:	d103      	bne.n	d4a2c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d4a24:	f104 000c 	add.w	r0, r4, #12
   d4a28:	f7ff ffef 	bl	d4a0a <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d4a2c:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d4a2e:	b135      	cbz	r5, d4a3e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4a30:	4628      	mov	r0, r5
   d4a32:	f7ff ffd2 	bl	d49da <_ZNSt14_Function_baseD1Ev>
   d4a36:	2110      	movs	r1, #16
   d4a38:	4628      	mov	r0, r5
   d4a3a:	f001 f8fc 	bl	d5c36 <_ZdlPvj>
   d4a3e:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d4a40:	b135      	cbz	r5, d4a50 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d4a42:	4628      	mov	r0, r5
   d4a44:	f7ff ffc9 	bl	d49da <_ZNSt14_Function_baseD1Ev>
   d4a48:	2110      	movs	r1, #16
   d4a4a:	4628      	mov	r0, r5
   d4a4c:	f001 f8f3 	bl	d5c36 <_ZdlPvj>
   d4a50:	4620      	mov	r0, r4
   d4a52:	2114      	movs	r1, #20
   d4a54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d4a58:	f001 b8ed 	b.w	d5c36 <_ZdlPvj>
   d4a5c:	bd38      	pop	{r3, r4, r5, pc}

000d4a5e <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d4a5e:	b513      	push	{r0, r1, r4, lr}
   d4a60:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d4a62:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d4a66:	2300      	movs	r3, #0
   d4a68:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d4a6a:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d4a6c:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d4a6e:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4a70:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d4a72:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d4a74:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4a76:	f7ff ff81 	bl	d497c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4a7a:	4620      	mov	r0, r4
   d4a7c:	b002      	add	sp, #8
   d4a7e:	bd10      	pop	{r4, pc}

000d4a80 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d4a80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4a82:	460c      	mov	r4, r1
   d4a84:	ad02      	add	r5, sp, #8
   d4a86:	f854 3b04 	ldr.w	r3, [r4], #4
   d4a8a:	f845 3d08 	str.w	r3, [r5, #-8]!
   d4a8e:	4606      	mov	r6, r0
   d4a90:	460f      	mov	r7, r1
   d4a92:	a801      	add	r0, sp, #4
   d4a94:	4621      	mov	r1, r4
   d4a96:	f7ff ff6a 	bl	d496e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d4a9a:	4629      	mov	r1, r5
   d4a9c:	4630      	mov	r0, r6
   d4a9e:	f7ff ffde 	bl	d4a5e <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4aa2:	a801      	add	r0, sp, #4
   d4aa4:	f7ff ff6a 	bl	d497c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4aa8:	4620      	mov	r0, r4
   d4aaa:	f7ff ff67 	bl	d497c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d4aae:	4638      	mov	r0, r7
   d4ab0:	2108      	movs	r1, #8
   d4ab2:	f001 f8c0 	bl	d5c36 <_ZdlPvj>
        return p;
    }
   d4ab6:	4630      	mov	r0, r6
   d4ab8:	b003      	add	sp, #12
   d4aba:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4abc <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d4abc:	b513      	push	{r0, r1, r4, lr}
   d4abe:	460b      	mov	r3, r1
   d4ac0:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4ac2:	c803      	ldmia	r0, {r0, r1}
   d4ac4:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d4ac8:	e893 0003 	ldmia.w	r3, {r0, r1}
   d4acc:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d4ad0:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d4ad4:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d4ad8:	b002      	add	sp, #8
   d4ada:	bd10      	pop	{r4, pc}

000d4adc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d4adc:	b538      	push	{r3, r4, r5, lr}
   d4ade:	2300      	movs	r3, #0
   d4ae0:	4604      	mov	r4, r0
   d4ae2:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4ae4:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d4ae6:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4ae8:	f7ff fad7 	bl	d409a <_Znwj>
   d4aec:	b128      	cbz	r0, d4afa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d4aee:	2301      	movs	r3, #1
   d4af0:	6043      	str	r3, [r0, #4]
   d4af2:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d4af4:	4b02      	ldr	r3, [pc, #8]	; (d4b00 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d4af6:	6003      	str	r3, [r0, #0]
   d4af8:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4afa:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d4afc:	4620      	mov	r0, r4
   d4afe:	bd38      	pop	{r3, r4, r5, pc}
   d4b00:	000d68b8 	.word	0x000d68b8

000d4b04 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4b04:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d4b06:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4b08:	b90a      	cbnz	r2, d4b0e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d4b0a:	f001 f8b0 	bl	d5c6e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4b0e:	68c3      	ldr	r3, [r0, #12]
    }
   d4b10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4b14:	4718      	bx	r3

000d4b16 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d4b16:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4b18:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d4b1a:	f100 0110 	add.w	r1, r0, #16
   d4b1e:	f7ff fff1 	bl	d4b04 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d4b22:	bd08      	pop	{r3, pc}

000d4b24 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4b24:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d4b26:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4b28:	b90a      	cbnz	r2, d4b2e <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d4b2a:	f001 f8a0 	bl	d5c6e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4b2e:	68c3      	ldr	r3, [r0, #12]
    }
   d4b30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4b34:	4718      	bx	r3

000d4b36 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d4b36:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4b38:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d4b3a:	f100 0110 	add.w	r1, r0, #16
   d4b3e:	f7ff fff1 	bl	d4b24 <_ZNKSt8functionIFvRKbEEclES1_>
   d4b42:	bd08      	pop	{r3, pc}

000d4b44 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d4b44:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4b46:	2300      	movs	r3, #0
   d4b48:	6083      	str	r3, [r0, #8]
   d4b4a:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d4b4c:	4604      	mov	r4, r0
   d4b4e:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d4b50:	b12b      	cbz	r3, d4b5e <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d4b52:	2202      	movs	r2, #2
   d4b54:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d4b56:	68eb      	ldr	r3, [r5, #12]
   d4b58:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d4b5a:	68ab      	ldr	r3, [r5, #8]
   d4b5c:	60a3      	str	r3, [r4, #8]
	}
    }
   d4b5e:	4620      	mov	r0, r4
   d4b60:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4b64 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d4b64:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4b66:	b089      	sub	sp, #36	; 0x24
   d4b68:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d4b6a:	4668      	mov	r0, sp
   d4b6c:	f7ff ff3e 	bl	d49ec <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d4b70:	2300      	movs	r3, #0
   d4b72:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d4b76:	f04f 0202 	mov.w	r2, #2
   d4b7a:	e8d4 3f4f 	ldrexb	r3, [r4]
   d4b7e:	2b00      	cmp	r3, #0
   d4b80:	d103      	bne.n	d4b8a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d4b82:	e8c4 2f41 	strexb	r1, r2, [r4]
   d4b86:	2900      	cmp	r1, #0
   d4b88:	d1f7      	bne.n	d4b7a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d4b8a:	d002      	beq.n	d4b92 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d4b8c:	f88d 3008 	strb.w	r3, [sp, #8]
   d4b90:	e063      	b.n	d4c5a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d4b92:	f114 050c 	adds.w	r5, r4, #12
   d4b96:	d003      	beq.n	d4ba0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d4b98:	4669      	mov	r1, sp
   d4b9a:	4628      	mov	r0, r5
   d4b9c:	f7ff ff26 	bl	d49ec <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d4ba0:	f3bf 8f5f 	dmb	sy
   d4ba4:	2301      	movs	r3, #1
   d4ba6:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d4ba8:	2000      	movs	r0, #0
   d4baa:	f104 0308 	add.w	r3, r4, #8
   d4bae:	f3bf 8f5f 	dmb	sy
   d4bb2:	e853 6f00 	ldrex	r6, [r3]
   d4bb6:	e843 0200 	strex	r2, r0, [r3]
   d4bba:	2a00      	cmp	r2, #0
   d4bbc:	d1f9      	bne.n	d4bb2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d4bbe:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d4bc2:	2e00      	cmp	r6, #0
   d4bc4:	d049      	beq.n	d4c5a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d4bc6:	f7ff fde5 	bl	d4794 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d4bca:	b120      	cbz	r0, d4bd6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d4bcc:	4629      	mov	r1, r5
   d4bce:	4630      	mov	r0, r6
   d4bd0:	f7ff ff98 	bl	d4b04 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d4bd4:	e03a      	b.n	d4c4c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d4bd6:	4631      	mov	r1, r6
   d4bd8:	a802      	add	r0, sp, #8
   d4bda:	f7ff ffb3 	bl	d4b44 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d4bde:	68e0      	ldr	r0, [r4, #12]
   d4be0:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d4be4:	b108      	cbz	r0, d4bea <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d4be6:	f001 fdf9 	bl	d67dc <strdup>
   d4bea:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d4bec:	2010      	movs	r0, #16
   d4bee:	f8ad 501c 	strh.w	r5, [sp, #28]
   d4bf2:	f7ff fa52 	bl	d409a <_Znwj>
   d4bf6:	4605      	mov	r5, r0
   d4bf8:	b1e8      	cbz	r0, d4c36 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4bfa:	2700      	movs	r7, #0
   d4bfc:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4bfe:	2018      	movs	r0, #24
   d4c00:	f7ff fa4b 	bl	d409a <_Znwj>
   d4c04:	4604      	mov	r4, r0
   d4c06:	b188      	cbz	r0, d4c2c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d4c08:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4c0a:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d4c0c:	a802      	add	r0, sp, #8
   d4c0e:	f7ff ff55 	bl	d4abc <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4c12:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d4c14:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d4c16:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4c18:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d4c1a:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d4c1c:	a906      	add	r1, sp, #24
   d4c1e:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d4c20:	60e3      	str	r3, [r4, #12]
   d4c22:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4c26:	9205      	str	r2, [sp, #20]
   d4c28:	f7ff fee0 	bl	d49ec <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d4c2c:	4b0d      	ldr	r3, [pc, #52]	; (d4c64 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d4c2e:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d4c30:	4b0d      	ldr	r3, [pc, #52]	; (d4c68 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4c32:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d4c34:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d4c36:	a806      	add	r0, sp, #24
   d4c38:	f7ff fee7 	bl	d4a0a <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4c3c:	a802      	add	r0, sp, #8
   d4c3e:	f7ff fecc 	bl	d49da <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d4c42:	2200      	movs	r2, #0
   d4c44:	4629      	mov	r1, r5
   d4c46:	4809      	ldr	r0, [pc, #36]	; (d4c6c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d4c48:	f7ff fdac 	bl	d47a4 <application_thread_invoke>
   d4c4c:	4630      	mov	r0, r6
   d4c4e:	f7ff fec4 	bl	d49da <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d4c52:	2110      	movs	r1, #16
   d4c54:	4630      	mov	r0, r6
   d4c56:	f000 ffee 	bl	d5c36 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d4c5a:	4668      	mov	r0, sp
   d4c5c:	f7ff fed5 	bl	d4a0a <_ZN8particle5ErrorD1Ev>
    }
   d4c60:	b009      	add	sp, #36	; 0x24
   d4c62:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4c64:	000d4b17 	.word	0x000d4b17
   d4c68:	000d4d8d 	.word	0x000d4d8d
   d4c6c:	000d4917 	.word	0x000d4917

000d4c70 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d4c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4c74:	b08b      	sub	sp, #44	; 0x2c
   d4c76:	4606      	mov	r6, r0
   d4c78:	460f      	mov	r7, r1
   d4c7a:	4690      	mov	r8, r2
   d4c7c:	4699      	mov	r9, r3
   d4c7e:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4c82:	f7ff fdb5 	bl	d47f0 <spark_cloud_flag_connected>
   d4c86:	ad07      	add	r5, sp, #28
    if (!connected()) {
   d4c88:	4683      	mov	fp, r0
   d4c8a:	bb30      	cbnz	r0, d4cda <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d4c8c:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d4c90:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d4c92:	a905      	add	r1, sp, #20
   d4c94:	4628      	mov	r0, r5
   d4c96:	f8ad 3018 	strh.w	r3, [sp, #24]
   d4c9a:	f7ff fea7 	bl	d49ec <_ZN8particle5ErrorC1EOS0_>
   d4c9e:	2014      	movs	r0, #20
   d4ca0:	f7ff f9fb 	bl	d409a <_Znwj>
   d4ca4:	4604      	mov	r4, r0
   d4ca6:	b158      	cbz	r0, d4cc0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d4ca8:	2302      	movs	r3, #2
   d4caa:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d4cac:	2301      	movs	r3, #1
   d4cae:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d4cb0:	f8c0 b004 	str.w	fp, [r0, #4]
   d4cb4:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d4cb8:	4629      	mov	r1, r5
   d4cba:	300c      	adds	r0, #12
   d4cbc:	f7ff fe96 	bl	d49ec <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d4cc0:	4630      	mov	r0, r6
   d4cc2:	4621      	mov	r1, r4
   d4cc4:	f840 4b04 	str.w	r4, [r0], #4
   d4cc8:	f7ff ff08 	bl	d4adc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d4ccc:	4628      	mov	r0, r5
   d4cce:	f7ff fe9c 	bl	d4a0a <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d4cd2:	a805      	add	r0, sp, #20
   d4cd4:	f7ff fe99 	bl	d4a0a <_ZN8particle5ErrorD1Ev>
   d4cd8:	e052      	b.n	d4d80 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d4cda:	2400      	movs	r4, #0
   d4cdc:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d4cde:	2014      	movs	r0, #20
   d4ce0:	606c      	str	r4, [r5, #4]
   d4ce2:	60ac      	str	r4, [r5, #8]
   d4ce4:	9307      	str	r3, [sp, #28]
   d4ce6:	f7ff f9d8 	bl	d409a <_Znwj>
   d4cea:	4601      	mov	r1, r0
   d4cec:	b118      	cbz	r0, d4cf6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d4cee:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d4cf0:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d4cf2:	6044      	str	r4, [r0, #4]
   d4cf4:	6084      	str	r4, [r0, #8]
   d4cf6:	a804      	add	r0, sp, #16
   d4cf8:	9103      	str	r1, [sp, #12]
   d4cfa:	f7ff feef 	bl	d4adc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d4cfe:	4b22      	ldr	r3, [pc, #136]	; (d4d88 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d4d00:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d4d02:	2008      	movs	r0, #8
   d4d04:	f7ff f9c9 	bl	d409a <_Znwj>
   d4d08:	4604      	mov	r4, r0
   d4d0a:	b128      	cbz	r0, d4d18 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4d0c:	9b03      	ldr	r3, [sp, #12]
   d4d0e:	f840 3b04 	str.w	r3, [r0], #4
   d4d12:	a904      	add	r1, sp, #16
   d4d14:	f7ff fe2b 	bl	d496e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d4d18:	9500      	str	r5, [sp, #0]
   d4d1a:	fa5f f38a 	uxtb.w	r3, sl
   d4d1e:	464a      	mov	r2, r9
   d4d20:	4641      	mov	r1, r8
   d4d22:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d4d24:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d4d26:	f7ff fd6b 	bl	d4800 <spark_send_event>
   d4d2a:	b920      	cbnz	r0, d4d36 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d4d2c:	9b03      	ldr	r3, [sp, #12]
   d4d2e:	785b      	ldrb	r3, [r3, #1]
   d4d30:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d4d34:	b183      	cbz	r3, d4d58 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d4d36:	9b03      	ldr	r3, [sp, #12]
   d4d38:	9305      	str	r3, [sp, #20]
   d4d3a:	a904      	add	r1, sp, #16
   d4d3c:	a806      	add	r0, sp, #24
   d4d3e:	f7ff fe16 	bl	d496e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d4d42:	a905      	add	r1, sp, #20
   d4d44:	4630      	mov	r0, r6
   d4d46:	f7ff fe8a 	bl	d4a5e <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4d4a:	a806      	add	r0, sp, #24
   d4d4c:	f7ff fe16 	bl	d497c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4d50:	a804      	add	r0, sp, #16
   d4d52:	f7ff fe13 	bl	d497c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4d56:	e013      	b.n	d4d80 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d4d58:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d4d5c:	a905      	add	r1, sp, #20
   d4d5e:	a803      	add	r0, sp, #12
   d4d60:	9205      	str	r2, [sp, #20]
   d4d62:	f8ad 3018 	strh.w	r3, [sp, #24]
   d4d66:	f7ff fefd 	bl	d4b64 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d4d6a:	a805      	add	r0, sp, #20
   d4d6c:	f7ff fe4d 	bl	d4a0a <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d4d70:	a805      	add	r0, sp, #20
   d4d72:	9909      	ldr	r1, [sp, #36]	; 0x24
   d4d74:	f7ff fe84 	bl	d4a80 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d4d78:	a806      	add	r0, sp, #24
   d4d7a:	f7ff fdff 	bl	d497c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4d7e:	e7da      	b.n	d4d36 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
    }

    return p.future();
}
   d4d80:	4630      	mov	r0, r6
   d4d82:	b00b      	add	sp, #44	; 0x2c
   d4d84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4d88:	000d4efd 	.word	0x000d4efd

000d4d8c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d4d8c:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d4d8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4d90:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d4d92:	d006      	beq.n	d4da2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d4d94:	2a03      	cmp	r2, #3
   d4d96:	d017      	beq.n	d4dc8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d4d98:	2a01      	cmp	r2, #1
   d4d9a:	d122      	bne.n	d4de2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4d9c:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d4d9e:	6003      	str	r3, [r0, #0]
	      break;
   d4da0:	e01f      	b.n	d4de2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d4da2:	2018      	movs	r0, #24
   d4da4:	680e      	ldr	r6, [r1, #0]
   d4da6:	f7ff f978 	bl	d409a <_Znwj>
   d4daa:	4605      	mov	r5, r0
   d4dac:	b150      	cbz	r0, d4dc4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d4dae:	4631      	mov	r1, r6
   d4db0:	f7ff fec8 	bl	d4b44 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d4db4:	6930      	ldr	r0, [r6, #16]
   d4db6:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d4dba:	b108      	cbz	r0, d4dc0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d4dbc:	f001 fd0e 	bl	d67dc <strdup>
   d4dc0:	6128      	str	r0, [r5, #16]
   d4dc2:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d4dc4:	6025      	str	r5, [r4, #0]
   d4dc6:	e00c      	b.n	d4de2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d4dc8:	6804      	ldr	r4, [r0, #0]
   d4dca:	b154      	cbz	r4, d4de2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d4dcc:	f104 0010 	add.w	r0, r4, #16
   d4dd0:	f7ff fe1b 	bl	d4a0a <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4dd4:	4620      	mov	r0, r4
   d4dd6:	f7ff fe00 	bl	d49da <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d4dda:	2118      	movs	r1, #24
   d4ddc:	4620      	mov	r0, r4
   d4dde:	f000 ff2a 	bl	d5c36 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d4de2:	2000      	movs	r0, #0
   d4de4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4de6 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d4de6:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4de8:	2300      	movs	r3, #0
   d4dea:	6083      	str	r3, [r0, #8]
   d4dec:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d4dee:	4604      	mov	r4, r0
   d4df0:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d4df2:	b12b      	cbz	r3, d4e00 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d4df4:	2202      	movs	r2, #2
   d4df6:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d4df8:	68eb      	ldr	r3, [r5, #12]
   d4dfa:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d4dfc:	68ab      	ldr	r3, [r5, #8]
   d4dfe:	60a3      	str	r3, [r4, #8]
	}
    }
   d4e00:	4620      	mov	r0, r4
   d4e02:	bd38      	pop	{r3, r4, r5, pc}

000d4e04 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d4e04:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d4e06:	b570      	push	{r4, r5, r6, lr}
   d4e08:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d4e0a:	d006      	beq.n	d4e1a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d4e0c:	2a03      	cmp	r2, #3
   d4e0e:	d011      	beq.n	d4e34 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d4e10:	2a01      	cmp	r2, #1
   d4e12:	d118      	bne.n	d4e46 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4e14:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d4e16:	6003      	str	r3, [r0, #0]
	      break;
   d4e18:	e015      	b.n	d4e46 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d4e1a:	2014      	movs	r0, #20
   d4e1c:	680e      	ldr	r6, [r1, #0]
   d4e1e:	f7ff f93c 	bl	d409a <_Znwj>
   d4e22:	4605      	mov	r5, r0
   d4e24:	b120      	cbz	r0, d4e30 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d4e26:	4631      	mov	r1, r6
   d4e28:	f7ff ffdd 	bl	d4de6 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d4e2c:	7c33      	ldrb	r3, [r6, #16]
   d4e2e:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d4e30:	6025      	str	r5, [r4, #0]
   d4e32:	e008      	b.n	d4e46 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d4e34:	6804      	ldr	r4, [r0, #0]
   d4e36:	b134      	cbz	r4, d4e46 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4e38:	4620      	mov	r0, r4
   d4e3a:	f7ff fdce 	bl	d49da <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d4e3e:	2114      	movs	r1, #20
   d4e40:	4620      	mov	r0, r4
   d4e42:	f000 fef8 	bl	d5c36 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d4e46:	2000      	movs	r0, #0
   d4e48:	bd70      	pop	{r4, r5, r6, pc}
	...

000d4e4c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d4e4c:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d4e4e:	2300      	movs	r3, #0
   d4e50:	b087      	sub	sp, #28
   d4e52:	460c      	mov	r4, r1
   d4e54:	f3bf 8f5f 	dmb	sy
   d4e58:	e850 6f00 	ldrex	r6, [r0]
   d4e5c:	e840 3200 	strex	r2, r3, [r0]
   d4e60:	2a00      	cmp	r2, #0
   d4e62:	d1f9      	bne.n	d4e58 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d4e64:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d4e68:	2e00      	cmp	r6, #0
   d4e6a:	d03f      	beq.n	d4eec <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d4e6c:	4618      	mov	r0, r3
   d4e6e:	f7ff fc91 	bl	d4794 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d4e72:	4607      	mov	r7, r0
   d4e74:	b120      	cbz	r0, d4e80 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d4e76:	4621      	mov	r1, r4
   d4e78:	4630      	mov	r0, r6
   d4e7a:	f7ff fe53 	bl	d4b24 <_ZNKSt8functionIFvRKbEEclES1_>
   d4e7e:	e02e      	b.n	d4ede <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d4e80:	4631      	mov	r1, r6
   d4e82:	a801      	add	r0, sp, #4
   d4e84:	f7ff ffaf 	bl	d4de6 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d4e88:	7823      	ldrb	r3, [r4, #0]
   d4e8a:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d4e8e:	2010      	movs	r0, #16
   d4e90:	f7ff f903 	bl	d409a <_Znwj>
   d4e94:	4605      	mov	r5, r0
   d4e96:	b1d0      	cbz	r0, d4ece <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4e98:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4e9a:	2014      	movs	r0, #20
   d4e9c:	f7ff f8fd 	bl	d409a <_Znwj>
   d4ea0:	4604      	mov	r4, r0
   d4ea2:	b178      	cbz	r0, d4ec4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4ea4:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d4ea6:	4601      	mov	r1, r0
   d4ea8:	a801      	add	r0, sp, #4
   d4eaa:	f7ff fe07 	bl	d4abc <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4eae:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d4eb0:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d4eb2:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4eb4:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d4eb6:	9203      	str	r2, [sp, #12]
   d4eb8:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d4eba:	60e3      	str	r3, [r4, #12]
   d4ebc:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4ec0:	9204      	str	r2, [sp, #16]
   d4ec2:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d4ec4:	4b0a      	ldr	r3, [pc, #40]	; (d4ef0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d4ec6:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d4ec8:	4b0a      	ldr	r3, [pc, #40]	; (d4ef4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4eca:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d4ecc:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4ece:	a801      	add	r0, sp, #4
   d4ed0:	f7ff fd83 	bl	d49da <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d4ed4:	2200      	movs	r2, #0
   d4ed6:	4629      	mov	r1, r5
   d4ed8:	4807      	ldr	r0, [pc, #28]	; (d4ef8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d4eda:	f7ff fc63 	bl	d47a4 <application_thread_invoke>
   d4ede:	4630      	mov	r0, r6
   d4ee0:	f7ff fd7b 	bl	d49da <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d4ee4:	2110      	movs	r1, #16
   d4ee6:	4630      	mov	r0, r6
   d4ee8:	f000 fea5 	bl	d5c36 <_ZdlPvj>
        }
    }
   d4eec:	b007      	add	sp, #28
   d4eee:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4ef0:	000d4b37 	.word	0x000d4b37
   d4ef4:	000d4e05 	.word	0x000d4e05
   d4ef8:	000d4917 	.word	0x000d4917

000d4efc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:

namespace {

using namespace particle;

void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d4efc:	b530      	push	{r4, r5, lr}
   d4efe:	b085      	sub	sp, #20
   d4f00:	4604      	mov	r4, r0
   d4f02:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d4f04:	4668      	mov	r0, sp
   d4f06:	4611      	mov	r1, r2
   d4f08:	f7ff fdba 	bl	d4a80 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d4f0c:	b17c      	cbz	r4, d4f2e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d4f0e:	b224      	sxth	r4, r4
   d4f10:	4628      	mov	r0, r5
   d4f12:	b10d      	cbz	r5, d4f18 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d4f14:	f001 fc62 	bl	d67dc <strdup>
   d4f18:	9002      	str	r0, [sp, #8]
   d4f1a:	a902      	add	r1, sp, #8
   d4f1c:	4668      	mov	r0, sp
   d4f1e:	f8ad 400c 	strh.w	r4, [sp, #12]
   d4f22:	f7ff fe1f 	bl	d4b64 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d4f26:	a802      	add	r0, sp, #8
   d4f28:	f7ff fd6f 	bl	d4a0a <_ZN8particle5ErrorD1Ev>
   d4f2c:	e01d      	b.n	d4f6a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d4f2e:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d4f30:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d4f34:	f04f 0201 	mov.w	r2, #1
   d4f38:	e8d0 3f4f 	ldrexb	r3, [r0]
   d4f3c:	42a3      	cmp	r3, r4
   d4f3e:	d103      	bne.n	d4f48 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d4f40:	e8c0 2f41 	strexb	r1, r2, [r0]
   d4f44:	2900      	cmp	r1, #0
   d4f46:	d1f7      	bne.n	d4f38 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d4f48:	d002      	beq.n	d4f50 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d4f4a:	f88d 3008 	strb.w	r3, [sp, #8]
   d4f4e:	e00c      	b.n	d4f6a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d4f50:	f110 010c 	adds.w	r1, r0, #12
   d4f54:	f04f 0301 	mov.w	r3, #1
   d4f58:	bf18      	it	ne
   d4f5a:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d4f5c:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d4f60:	3004      	adds	r0, #4
   d4f62:	f800 3c03 	strb.w	r3, [r0, #-3]
   d4f66:	f7ff ff71 	bl	d4e4c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d4f6a:	a801      	add	r0, sp, #4
   d4f6c:	f7ff fd06 	bl	d497c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d4f70:	b005      	add	sp, #20
   d4f72:	bd30      	pop	{r4, r5, pc}

000d4f74 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4f74:	2200      	movs	r2, #0
   d4f76:	4611      	mov	r1, r2
   d4f78:	6840      	ldr	r0, [r0, #4]
   d4f7a:	f7ff bc89 	b.w	d4890 <network_listening>

000d4f7e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4f7e:	2200      	movs	r2, #0
   d4f80:	4611      	mov	r1, r2
   d4f82:	6840      	ldr	r0, [r0, #4]
   d4f84:	f7ff bc94 	b.w	d48b0 <network_get_listen_timeout>

000d4f88 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4f88:	2200      	movs	r2, #0
   d4f8a:	6840      	ldr	r0, [r0, #4]
   d4f8c:	f7ff bc88 	b.w	d48a0 <network_set_listen_timeout>

000d4f90 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4f90:	2200      	movs	r2, #0
   d4f92:	f081 0101 	eor.w	r1, r1, #1
   d4f96:	6840      	ldr	r0, [r0, #4]
   d4f98:	f7ff bc72 	b.w	d4880 <network_listen>

000d4f9c <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d4f9c:	2300      	movs	r3, #0
   d4f9e:	461a      	mov	r2, r3
   d4fa0:	4619      	mov	r1, r3
   d4fa2:	6840      	ldr	r0, [r0, #4]
   d4fa4:	f7ff bc64 	b.w	d4870 <network_off>

000d4fa8 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4fa8:	2300      	movs	r3, #0
   d4faa:	461a      	mov	r2, r3
   d4fac:	4619      	mov	r1, r3
   d4fae:	6840      	ldr	r0, [r0, #4]
   d4fb0:	f7ff bc56 	b.w	d4860 <network_on>

000d4fb4 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4fb4:	2200      	movs	r2, #0
   d4fb6:	4611      	mov	r1, r2
   d4fb8:	6840      	ldr	r0, [r0, #4]
   d4fba:	f7ff bc49 	b.w	d4850 <network_ready>

000d4fbe <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4fbe:	2200      	movs	r2, #0
   d4fc0:	4611      	mov	r1, r2
   d4fc2:	6840      	ldr	r0, [r0, #4]
   d4fc4:	f7ff bc34 	b.w	d4830 <network_connecting>

000d4fc8 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4fc8:	2200      	movs	r2, #0
   d4fca:	2102      	movs	r1, #2
   d4fcc:	6840      	ldr	r0, [r0, #4]
   d4fce:	f7ff bc37 	b.w	d4840 <network_disconnect>

000d4fd2 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4fd2:	2300      	movs	r3, #0
   d4fd4:	461a      	mov	r2, r3
   d4fd6:	6840      	ldr	r0, [r0, #4]
   d4fd8:	f7ff bc22 	b.w	d4820 <network_connect>

000d4fdc <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4fdc:	4b02      	ldr	r3, [pc, #8]	; (d4fe8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4fde:	2203      	movs	r2, #3
   d4fe0:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4fe2:	4a02      	ldr	r2, [pc, #8]	; (d4fec <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4fe4:	601a      	str	r2, [r3, #0]
   d4fe6:	4770      	bx	lr
   d4fe8:	2003e3d0 	.word	0x2003e3d0
   d4fec:	000d68d4 	.word	0x000d68d4

000d4ff0 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d4ff0:	4770      	bx	lr

000d4ff2 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d4ff2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4ff4:	4606      	mov	r6, r0
   d4ff6:	4615      	mov	r5, r2
   d4ff8:	460c      	mov	r4, r1
   d4ffa:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4ffc:	42bc      	cmp	r4, r7
   d4ffe:	d006      	beq.n	d500e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d5000:	6833      	ldr	r3, [r6, #0]
   d5002:	f814 1b01 	ldrb.w	r1, [r4], #1
   d5006:	689b      	ldr	r3, [r3, #8]
   d5008:	4630      	mov	r0, r6
   d500a:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d500c:	e7f6      	b.n	d4ffc <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d500e:	4628      	mov	r0, r5
   d5010:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5012 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d5012:	2200      	movs	r2, #0
   d5014:	7c00      	ldrb	r0, [r0, #16]
   d5016:	f7ff bac5 	b.w	d45a4 <HAL_I2C_Write_Data>

000d501a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d501a:	2100      	movs	r1, #0
   d501c:	7c00      	ldrb	r0, [r0, #16]
   d501e:	f7ff bac9 	b.w	d45b4 <HAL_I2C_Available_Data>

000d5022 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d5022:	2100      	movs	r1, #0
   d5024:	7c00      	ldrb	r0, [r0, #16]
   d5026:	f7ff bacd 	b.w	d45c4 <HAL_I2C_Read_Data>

000d502a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d502a:	2100      	movs	r1, #0
   d502c:	7c00      	ldrb	r0, [r0, #16]
   d502e:	f7ff bad1 	b.w	d45d4 <HAL_I2C_Peek_Data>

000d5032 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d5032:	2100      	movs	r1, #0
   d5034:	7c00      	ldrb	r0, [r0, #16]
   d5036:	f7ff bad5 	b.w	d45e4 <HAL_I2C_Flush_Data>

000d503a <_ZN7TwoWireD0Ev>:
   d503a:	b510      	push	{r4, lr}
   d503c:	2114      	movs	r1, #20
   d503e:	4604      	mov	r4, r0
   d5040:	f000 fdf9 	bl	d5c36 <_ZdlPvj>
   d5044:	4620      	mov	r0, r4
   d5046:	bd10      	pop	{r4, pc}

000d5048 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d5048:	b510      	push	{r4, lr}
   d504a:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d504c:	2300      	movs	r3, #0
   d504e:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5050:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5054:	60a3      	str	r3, [r4, #8]
   d5056:	4b04      	ldr	r3, [pc, #16]	; (d5068 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d5058:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d505a:	4608      	mov	r0, r1
   d505c:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d505e:	4611      	mov	r1, r2
   d5060:	f7ff fad0 	bl	d4604 <HAL_I2C_Init>
}
   d5064:	4620      	mov	r0, r4
   d5066:	bd10      	pop	{r4, pc}
   d5068:	000d6908 	.word	0x000d6908

000d506c <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d506c:	2300      	movs	r3, #0
   d506e:	461a      	mov	r2, r3
   d5070:	4619      	mov	r1, r3
   d5072:	7c00      	ldrb	r0, [r0, #16]
   d5074:	f7ff ba7e 	b.w	d4574 <HAL_I2C_Begin>

000d5078 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d5078:	b570      	push	{r4, r5, r6, lr}
   d507a:	460c      	mov	r4, r1
   d507c:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
   d507e:	2514      	movs	r5, #20
   d5080:	4606      	mov	r6, r0
   d5082:	462a      	mov	r2, r5
   d5084:	2100      	movs	r1, #0
   d5086:	a801      	add	r0, sp, #4
   d5088:	f001 fb6f 	bl	d676a <memset>
   d508c:	7823      	ldrb	r3, [r4, #0]
   d508e:	f88d 3008 	strb.w	r3, [sp, #8]
   d5092:	6863      	ldr	r3, [r4, #4]
   d5094:	9303      	str	r3, [sp, #12]
   d5096:	68e3      	ldr	r3, [r4, #12]
   d5098:	9304      	str	r3, [sp, #16]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
   d509a:	2200      	movs	r2, #0
   d509c:	7a23      	ldrb	r3, [r4, #8]
   d509e:	7c30      	ldrb	r0, [r6, #16]
   d50a0:	f8ad 5004 	strh.w	r5, [sp, #4]
   d50a4:	a901      	add	r1, sp, #4
   d50a6:	9305      	str	r3, [sp, #20]
   d50a8:	f7ff fab4 	bl	d4614 <HAL_I2C_Request_Data_Ex>
}
   d50ac:	b006      	add	sp, #24
   d50ae:	bd70      	pop	{r4, r5, r6, pc}

000d50b0 <_ZN7TwoWire11requestFromEhjh>:
{
	HAL_I2C_End(_i2c, NULL);
}

size_t TwoWire::requestFrom(uint8_t address, size_t quantity, uint8_t sendStop)
{
   d50b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d50b2:	3300      	adds	r3, #0
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d50b4:	f88d 1000 	strb.w	r1, [sp]
   d50b8:	f04f 0164 	mov.w	r1, #100	; 0x64
   d50bc:	9103      	str	r1, [sp, #12]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d50be:	bf18      	it	ne
   d50c0:	2301      	movne	r3, #1
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d50c2:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
   d50c4:	9201      	str	r2, [sp, #4]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d50c6:	f88d 3008 	strb.w	r3, [sp, #8]
   d50ca:	f7ff ffd5 	bl	d5078 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d50ce:	b005      	add	sp, #20
   d50d0:	f85d fb04 	ldr.w	pc, [sp], #4

000d50d4 <_ZN7TwoWire11requestFromEhj>:

size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
   d50d4:	2301      	movs	r3, #1
   d50d6:	f7ff bfeb 	b.w	d50b0 <_ZN7TwoWire11requestFromEhjh>

000d50da <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d50da:	2200      	movs	r2, #0
   d50dc:	7c00      	ldrb	r0, [r0, #16]
   d50de:	f7ff ba51 	b.w	d4584 <HAL_I2C_Begin_Transmission>

000d50e2 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   d50e2:	b2c9      	uxtb	r1, r1
   d50e4:	f7ff bff9 	b.w	d50da <_ZN7TwoWire17beginTransmissionEh>

000d50e8 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d50e8:	2200      	movs	r2, #0
   d50ea:	7c00      	ldrb	r0, [r0, #16]
   d50ec:	f7ff ba52 	b.w	d4594 <HAL_I2C_End_Transmission>

000d50f0 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d50f0:	2101      	movs	r1, #1
   d50f2:	f7ff bff9 	b.w	d50e8 <_ZN7TwoWire15endTransmissionEh>

000d50f6 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d50f6:	2100      	movs	r1, #0
   d50f8:	7c00      	ldrb	r0, [r0, #16]
   d50fa:	f7ff ba7b 	b.w	d45f4 <HAL_I2C_Is_Enabled>

000d50fe <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d50fe:	4770      	bx	lr

000d5100 <_ZN9IPAddressD0Ev>:
   d5100:	b510      	push	{r4, lr}
   d5102:	2118      	movs	r1, #24
   d5104:	4604      	mov	r4, r0
   d5106:	f000 fd96 	bl	d5c36 <_ZdlPvj>
   d510a:	4620      	mov	r0, r4
   d510c:	bd10      	pop	{r4, pc}

000d510e <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d510e:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5110:	7d03      	ldrb	r3, [r0, #20]
   d5112:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5114:	b08d      	sub	sp, #52	; 0x34
   d5116:	460e      	mov	r6, r1
   d5118:	f100 0704 	add.w	r7, r0, #4
   d511c:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5120:	d002      	beq.n	d5128 <_ZNK9IPAddress7printToER5Print+0x1a>
   d5122:	f100 0508 	add.w	r5, r0, #8
   d5126:	e018      	b.n	d515a <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5128:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d512a:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d512c:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5130:	232f      	movs	r3, #47	; 0x2f
   d5132:	462a      	mov	r2, r5
   d5134:	200a      	movs	r0, #10
   d5136:	f7ff fa75 	bl	d4624 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d513a:	4628      	mov	r0, r5
   d513c:	f001 fb69 	bl	d6812 <strlen>
   d5140:	6833      	ldr	r3, [r6, #0]
   d5142:	4602      	mov	r2, r0
   d5144:	68db      	ldr	r3, [r3, #12]
   d5146:	4629      	mov	r1, r5
   d5148:	4630      	mov	r0, r6
   d514a:	4798      	blx	r3
   d514c:	e00f      	b.n	d516e <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d514e:	b124      	cbz	r4, d515a <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d5150:	212e      	movs	r1, #46	; 0x2e
   d5152:	4630      	mov	r0, r6
   d5154:	f000 f9d6 	bl	d5504 <_ZN5Print5printEc>
   d5158:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d515a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d515e:	220a      	movs	r2, #10
   d5160:	4630      	mov	r0, r6
   d5162:	f000 f9e8 	bl	d5536 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5166:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5168:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d516a:	d1f0      	bne.n	d514e <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d516c:	4620      	mov	r0, r4
    }
    return n;
}
   d516e:	b00d      	add	sp, #52	; 0x34
   d5170:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d5174 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d5174:	b510      	push	{r4, lr}
   d5176:	4b05      	ldr	r3, [pc, #20]	; (d518c <_ZN9IPAddressC1Ev+0x18>)
   d5178:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d517a:	2211      	movs	r2, #17
   d517c:	f840 3b04 	str.w	r3, [r0], #4
   d5180:	2100      	movs	r1, #0
   d5182:	f001 faf2 	bl	d676a <memset>
{
    clear();
}
   d5186:	4620      	mov	r0, r4
   d5188:	bd10      	pop	{r4, pc}
   d518a:	bf00      	nop
   d518c:	000d6930 	.word	0x000d6930

000d5190 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d5190:	4603      	mov	r3, r0
   d5192:	4a07      	ldr	r2, [pc, #28]	; (d51b0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5194:	b510      	push	{r4, lr}
   d5196:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d519a:	f101 0210 	add.w	r2, r1, #16
   d519e:	f851 4b04 	ldr.w	r4, [r1], #4
   d51a2:	f843 4b04 	str.w	r4, [r3], #4
   d51a6:	4291      	cmp	r1, r2
   d51a8:	d1f9      	bne.n	d519e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d51aa:	780a      	ldrb	r2, [r1, #0]
   d51ac:	701a      	strb	r2, [r3, #0]
}
   d51ae:	bd10      	pop	{r4, pc}
   d51b0:	000d6930 	.word	0x000d6930

000d51b4 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d51b4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d51b6:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d51ba:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d51be:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d51c2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d51c6:	2304      	movs	r3, #4
   d51c8:	6041      	str	r1, [r0, #4]
   d51ca:	7503      	strb	r3, [r0, #20]
   d51cc:	bd10      	pop	{r4, pc}

000d51ce <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d51ce:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d51d0:	780d      	ldrb	r5, [r1, #0]
   d51d2:	788b      	ldrb	r3, [r1, #2]
   d51d4:	784a      	ldrb	r2, [r1, #1]
   d51d6:	78c9      	ldrb	r1, [r1, #3]
   d51d8:	9100      	str	r1, [sp, #0]
   d51da:	4629      	mov	r1, r5
   d51dc:	f7ff ffea 	bl	d51b4 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d51e0:	b003      	add	sp, #12
   d51e2:	bd30      	pop	{r4, r5, pc}

000d51e4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d51e4:	4b01      	ldr	r3, [pc, #4]	; (d51ec <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d51e6:	4a02      	ldr	r2, [pc, #8]	; (d51f0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d51e8:	601a      	str	r2, [r3, #0]
   d51ea:	4770      	bx	lr
   d51ec:	2003e3d8 	.word	0x2003e3d8
   d51f0:	000d69af 	.word	0x000d69af

000d51f4 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d51f4:	2200      	movs	r2, #0
   d51f6:	4611      	mov	r1, r2
   d51f8:	6840      	ldr	r0, [r0, #4]
   d51fa:	f7ff bb49 	b.w	d4890 <network_listening>

000d51fe <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d51fe:	2200      	movs	r2, #0
   d5200:	4611      	mov	r1, r2
   d5202:	6840      	ldr	r0, [r0, #4]
   d5204:	f7ff bb54 	b.w	d48b0 <network_get_listen_timeout>

000d5208 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5208:	2200      	movs	r2, #0
   d520a:	6840      	ldr	r0, [r0, #4]
   d520c:	f7ff bb48 	b.w	d48a0 <network_set_listen_timeout>

000d5210 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5210:	2200      	movs	r2, #0
   d5212:	f081 0101 	eor.w	r1, r1, #1
   d5216:	6840      	ldr	r0, [r0, #4]
   d5218:	f7ff bb32 	b.w	d4880 <network_listen>

000d521c <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d521c:	2300      	movs	r3, #0
   d521e:	461a      	mov	r2, r3
   d5220:	2101      	movs	r1, #1
   d5222:	6840      	ldr	r0, [r0, #4]
   d5224:	f7ff bb24 	b.w	d4870 <network_off>

000d5228 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5228:	2300      	movs	r3, #0
   d522a:	461a      	mov	r2, r3
   d522c:	4619      	mov	r1, r3
   d522e:	6840      	ldr	r0, [r0, #4]
   d5230:	f7ff bb16 	b.w	d4860 <network_on>

000d5234 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5234:	2200      	movs	r2, #0
   d5236:	4611      	mov	r1, r2
   d5238:	6840      	ldr	r0, [r0, #4]
   d523a:	f7ff bb09 	b.w	d4850 <network_ready>

000d523e <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d523e:	2200      	movs	r2, #0
   d5240:	4611      	mov	r1, r2
   d5242:	6840      	ldr	r0, [r0, #4]
   d5244:	f7ff baf4 	b.w	d4830 <network_connecting>

000d5248 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5248:	2200      	movs	r2, #0
   d524a:	2102      	movs	r1, #2
   d524c:	6840      	ldr	r0, [r0, #4]
   d524e:	f7ff baf7 	b.w	d4840 <network_disconnect>

000d5252 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5252:	2300      	movs	r3, #0
   d5254:	461a      	mov	r2, r3
   d5256:	6840      	ldr	r0, [r0, #4]
   d5258:	f7ff bae2 	b.w	d4820 <network_connect>

000d525c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d525c:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d525e:	4605      	mov	r5, r0
   d5260:	b188      	cbz	r0, d5286 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5262:	6804      	ldr	r4, [r0, #0]
   d5264:	b14c      	cbz	r4, d527a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d5266:	68a3      	ldr	r3, [r4, #8]
   d5268:	b11b      	cbz	r3, d5272 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d526a:	2203      	movs	r2, #3
   d526c:	4621      	mov	r1, r4
   d526e:	4620      	mov	r0, r4
   d5270:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5272:	2110      	movs	r1, #16
   d5274:	4620      	mov	r0, r4
   d5276:	f000 fcde 	bl	d5c36 <_ZdlPvj>
   d527a:	4628      	mov	r0, r5
   d527c:	2114      	movs	r1, #20
      }
   d527e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5282:	f000 bcd8 	b.w	d5c36 <_ZdlPvj>
   d5286:	bd38      	pop	{r3, r4, r5, pc}

000d5288 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d5288:	b110      	cbz	r0, d5290 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d528a:	6803      	ldr	r3, [r0, #0]
   d528c:	685b      	ldr	r3, [r3, #4]
   d528e:	4718      	bx	r3
   d5290:	4770      	bx	lr

000d5292 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d5292:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d5294:	6803      	ldr	r3, [r0, #0]
   d5296:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d5298:	b1bb      	cbz	r3, d52ca <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d529a:	6858      	ldr	r0, [r3, #4]
   d529c:	f7ff f912 	bl	d44c4 <os_thread_is_current>
   d52a0:	b978      	cbnz	r0, d52c2 <_ZN6ThreadD1Ev+0x30>
   d52a2:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d52a4:	7c5a      	ldrb	r2, [r3, #17]
   d52a6:	b912      	cbnz	r2, d52ae <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d52a8:	6858      	ldr	r0, [r3, #4]
   d52aa:	f7ff f913 	bl	d44d4 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d52ae:	6823      	ldr	r3, [r4, #0]
   d52b0:	6858      	ldr	r0, [r3, #4]
   d52b2:	f7ff f917 	bl	d44e4 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d52b6:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d52b8:	2300      	movs	r3, #0
   d52ba:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d52bc:	b128      	cbz	r0, d52ca <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d52be:	f7ff ffcd 	bl	d525c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d52c2:	6820      	ldr	r0, [r4, #0]
   d52c4:	b108      	cbz	r0, d52ca <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d52c6:	f7ff ffc9 	bl	d525c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d52ca:	4620      	mov	r0, r4
   d52cc:	bd10      	pop	{r4, pc}

000d52ce <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d52ce:	b538      	push	{r3, r4, r5, lr}
   d52d0:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d52d2:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d52d6:	b108      	cbz	r0, d52dc <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d52d8:	f7fe fee3 	bl	d40a2 <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d52dc:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d52e0:	b108      	cbz	r0, d52e6 <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d52e2:	f7ff f90f 	bl	d4504 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d52e6:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d52ea:	b135      	cbz	r5, d52fa <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d52ec:	4628      	mov	r0, r5
   d52ee:	f7ff ffd0 	bl	d5292 <_ZN6ThreadD1Ev>
   d52f2:	2104      	movs	r1, #4
   d52f4:	4628      	mov	r0, r5
   d52f6:	f000 fc9e 	bl	d5c36 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d52fa:	6820      	ldr	r0, [r4, #0]
   d52fc:	b108      	cbz	r0, d5302 <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d52fe:	f7ff ffc3 	bl	d5288 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d5302:	4620      	mov	r0, r4
   d5304:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5308 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d5308:	b510      	push	{r4, lr}
   d530a:	4b04      	ldr	r3, [pc, #16]	; (d531c <_ZN5spark9MeshClassD1Ev+0x14>)
   d530c:	4604      	mov	r4, r0
   d530e:	f840 3b08 	str.w	r3, [r0], #8
   d5312:	f7ff ffdc 	bl	d52ce <_ZN5spark11MeshPublishD1Ev>
   d5316:	4620      	mov	r0, r4
   d5318:	bd10      	pop	{r4, pc}
   d531a:	bf00      	nop
   d531c:	000d6a20 	.word	0x000d6a20

000d5320 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d5320:	b538      	push	{r3, r4, r5, lr}
   d5322:	4c0e      	ldr	r4, [pc, #56]	; (d535c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d5324:	4b0e      	ldr	r3, [pc, #56]	; (d5360 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d5326:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d5328:	2500      	movs	r5, #0
   d532a:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d532c:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d5330:	6063      	str	r3, [r4, #4]
   d5332:	60a5      	str	r5, [r4, #8]
   d5334:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5338:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d533c:	f7ff f8da 	bl	d44f4 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d5340:	4b08      	ldr	r3, [pc, #32]	; (d5364 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d5342:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5346:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d534a:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d534c:	4620      	mov	r0, r4
   d534e:	4a06      	ldr	r2, [pc, #24]	; (d5368 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d5350:	4906      	ldr	r1, [pc, #24]	; (d536c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d5352:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d5356:	f000 bc69 	b.w	d5c2c <__aeabi_atexit>
   d535a:	bf00      	nop
   d535c:	2003e3dc 	.word	0x2003e3dc
   d5360:	000d6a54 	.word	0x000d6a54
   d5364:	000d6a20 	.word	0x000d6a20
   d5368:	2003e3b4 	.word	0x2003e3b4
   d536c:	000d5309 	.word	0x000d5309

000d5370 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5370:	2300      	movs	r3, #0
   d5372:	461a      	mov	r2, r3
   d5374:	6840      	ldr	r0, [r0, #4]
   d5376:	f7ff ba53 	b.w	d4820 <network_connect>

000d537a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d537a:	2200      	movs	r2, #0
   d537c:	2102      	movs	r1, #2
   d537e:	6840      	ldr	r0, [r0, #4]
   d5380:	f7ff ba5e 	b.w	d4840 <network_disconnect>

000d5384 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d5384:	2200      	movs	r2, #0
   d5386:	4611      	mov	r1, r2
   d5388:	6840      	ldr	r0, [r0, #4]
   d538a:	f7ff ba51 	b.w	d4830 <network_connecting>

000d538e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d538e:	2200      	movs	r2, #0
   d5390:	4611      	mov	r1, r2
   d5392:	6840      	ldr	r0, [r0, #4]
   d5394:	f7ff ba5c 	b.w	d4850 <network_ready>

000d5398 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d5398:	2300      	movs	r3, #0
   d539a:	461a      	mov	r2, r3
   d539c:	4619      	mov	r1, r3
   d539e:	6840      	ldr	r0, [r0, #4]
   d53a0:	f7ff ba5e 	b.w	d4860 <network_on>

000d53a4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d53a4:	2300      	movs	r3, #0
   d53a6:	461a      	mov	r2, r3
   d53a8:	4619      	mov	r1, r3
   d53aa:	6840      	ldr	r0, [r0, #4]
   d53ac:	f7ff ba60 	b.w	d4870 <network_off>

000d53b0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d53b0:	2200      	movs	r2, #0
   d53b2:	f081 0101 	eor.w	r1, r1, #1
   d53b6:	6840      	ldr	r0, [r0, #4]
   d53b8:	f7ff ba62 	b.w	d4880 <network_listen>

000d53bc <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d53bc:	2200      	movs	r2, #0
   d53be:	6840      	ldr	r0, [r0, #4]
   d53c0:	f7ff ba6e 	b.w	d48a0 <network_set_listen_timeout>

000d53c4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d53c4:	2200      	movs	r2, #0
   d53c6:	4611      	mov	r1, r2
   d53c8:	6840      	ldr	r0, [r0, #4]
   d53ca:	f7ff ba71 	b.w	d48b0 <network_get_listen_timeout>

000d53ce <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d53ce:	2200      	movs	r2, #0
   d53d0:	4611      	mov	r1, r2
   d53d2:	6840      	ldr	r0, [r0, #4]
   d53d4:	f7ff ba5c 	b.w	d4890 <network_listening>

000d53d8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d53d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d53dc:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d53de:	b095      	sub	sp, #84	; 0x54
   d53e0:	4616      	mov	r6, r2
   d53e2:	460d      	mov	r5, r1
   d53e4:	4607      	mov	r7, r0
    IPAddress addr;
   d53e6:	f7ff fec5 	bl	d5174 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d53ea:	4621      	mov	r1, r4
   d53ec:	2220      	movs	r2, #32
   d53ee:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d53f0:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d53f2:	f001 f9ba 	bl	d676a <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d53f6:	2340      	movs	r3, #64	; 0x40
   d53f8:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d53fa:	4621      	mov	r1, r4
   d53fc:	466b      	mov	r3, sp
   d53fe:	aa0c      	add	r2, sp, #48	; 0x30
   d5400:	4630      	mov	r0, r6
   d5402:	f7ff f91f 	bl	d4644 <netdb_getaddrinfo>
    if (!r) {
   d5406:	4604      	mov	r4, r0
   d5408:	2800      	cmp	r0, #0
   d540a:	d144      	bne.n	d5496 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d540c:	4602      	mov	r2, r0
   d540e:	2101      	movs	r1, #1
   d5410:	6868      	ldr	r0, [r5, #4]
   d5412:	f7ff fa1d 	bl	d4850 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5416:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5418:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d541a:	4622      	mov	r2, r4
   d541c:	6868      	ldr	r0, [r5, #4]
   d541e:	f7ff fa17 	bl	d4850 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5422:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5424:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d5426:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5428:	2e00      	cmp	r6, #0
   d542a:	d034      	beq.n	d5496 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d542c:	2900      	cmp	r1, #0
   d542e:	d132      	bne.n	d5496 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d5430:	6873      	ldr	r3, [r6, #4]
   d5432:	2b02      	cmp	r3, #2
   d5434:	d002      	beq.n	d543c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d5436:	2b0a      	cmp	r3, #10
   d5438:	d009      	beq.n	d544e <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d543a:	e02a      	b.n	d5492 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d543c:	f1b8 0f00 	cmp.w	r8, #0
   d5440:	d027      	beq.n	d5492 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d5442:	6971      	ldr	r1, [r6, #20]
   d5444:	4638      	mov	r0, r7
   d5446:	3104      	adds	r1, #4
   d5448:	f7ff fec1 	bl	d51ce <_ZN9IPAddressaSEPKh>
   d544c:	e020      	b.n	d5490 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d544e:	f1b9 0f00 	cmp.w	r9, #0
   d5452:	d01e      	beq.n	d5492 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d5454:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d5456:	2211      	movs	r2, #17
   d5458:	a801      	add	r0, sp, #4
   d545a:	f001 f986 	bl	d676a <memset>
                    a.v = 6;
   d545e:	2306      	movs	r3, #6
   d5460:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5464:	ad01      	add	r5, sp, #4
   d5466:	f104 0308 	add.w	r3, r4, #8
   d546a:	3418      	adds	r4, #24
   d546c:	6818      	ldr	r0, [r3, #0]
   d546e:	6859      	ldr	r1, [r3, #4]
   d5470:	462a      	mov	r2, r5
   d5472:	c203      	stmia	r2!, {r0, r1}
   d5474:	3308      	adds	r3, #8
   d5476:	42a3      	cmp	r3, r4
   d5478:	4615      	mov	r5, r2
   d547a:	d1f7      	bne.n	d546c <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d547c:	a901      	add	r1, sp, #4
   d547e:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5480:	ad07      	add	r5, sp, #28
   d5482:	f7ff fe85 	bl	d5190 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5486:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5488:	1d3c      	adds	r4, r7, #4
   d548a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d548c:	682b      	ldr	r3, [r5, #0]
   d548e:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d5490:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5492:	69f6      	ldr	r6, [r6, #28]
   d5494:	e7c8      	b.n	d5428 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d5496:	9800      	ldr	r0, [sp, #0]
   d5498:	f7ff f8cc 	bl	d4634 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d549c:	4638      	mov	r0, r7
   d549e:	b015      	add	sp, #84	; 0x54
   d54a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d54a4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d54a4:	4b02      	ldr	r3, [pc, #8]	; (d54b0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d54a6:	4a03      	ldr	r2, [pc, #12]	; (d54b4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d54a8:	601a      	str	r2, [r3, #0]
   d54aa:	2200      	movs	r2, #0
   d54ac:	605a      	str	r2, [r3, #4]
   d54ae:	4770      	bx	lr
   d54b0:	2003e5b0 	.word	0x2003e5b0
   d54b4:	000d6a54 	.word	0x000d6a54

000d54b8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d54b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d54ba:	4606      	mov	r6, r0
   d54bc:	460d      	mov	r5, r1
   d54be:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d54c0:	2400      	movs	r4, #0
  while (size--) {
   d54c2:	42bd      	cmp	r5, r7
   d54c4:	d00c      	beq.n	d54e0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d54c6:	6833      	ldr	r3, [r6, #0]
   d54c8:	f815 1b01 	ldrb.w	r1, [r5], #1
   d54cc:	689b      	ldr	r3, [r3, #8]
   d54ce:	4630      	mov	r0, r6
   d54d0:	4798      	blx	r3
     if (chunk>=0)
   d54d2:	2800      	cmp	r0, #0
   d54d4:	db01      	blt.n	d54da <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d54d6:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d54d8:	e7f3      	b.n	d54c2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d54da:	2c00      	cmp	r4, #0
   d54dc:	bf08      	it	eq
   d54de:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d54e0:	4620      	mov	r0, r4
   d54e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d54e4 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d54e4:	b570      	push	{r4, r5, r6, lr}
   d54e6:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d54e8:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d54ea:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d54ec:	b149      	cbz	r1, d5502 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d54ee:	f001 f990 	bl	d6812 <strlen>
   d54f2:	682b      	ldr	r3, [r5, #0]
   d54f4:	4602      	mov	r2, r0
   d54f6:	4621      	mov	r1, r4
   d54f8:	4628      	mov	r0, r5
   d54fa:	68db      	ldr	r3, [r3, #12]
    }
   d54fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5500:	4718      	bx	r3
    }
   d5502:	bd70      	pop	{r4, r5, r6, pc}

000d5504 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d5504:	6803      	ldr	r3, [r0, #0]
   d5506:	689b      	ldr	r3, [r3, #8]
   d5508:	4718      	bx	r3

000d550a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d550a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d550c:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d550e:	4605      	mov	r5, r0
  size_t n = print('\r');
   d5510:	f7ff fff8 	bl	d5504 <_ZN5Print5printEc>
  n += print('\n');
   d5514:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d5516:	4604      	mov	r4, r0
  n += print('\n');
   d5518:	4628      	mov	r0, r5
   d551a:	f7ff fff3 	bl	d5504 <_ZN5Print5printEc>
  return n;
}
   d551e:	4420      	add	r0, r4
   d5520:	bd38      	pop	{r3, r4, r5, pc}

000d5522 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d5522:	b538      	push	{r3, r4, r5, lr}
   d5524:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5526:	f7ff ffdd 	bl	d54e4 <_ZN5Print5writeEPKc>
   d552a:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d552c:	4628      	mov	r0, r5
   d552e:	f7ff ffec 	bl	d550a <_ZN5Print7printlnEv>
  return n;
}
   d5532:	4420      	add	r0, r4
   d5534:	bd38      	pop	{r3, r4, r5, pc}

000d5536 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d5536:	b530      	push	{r4, r5, lr}
   d5538:	b08b      	sub	sp, #44	; 0x2c
   d553a:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d553c:	2100      	movs	r1, #0
   d553e:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d5542:	2a01      	cmp	r2, #1
   d5544:	bf98      	it	ls
   d5546:	220a      	movls	r2, #10
   d5548:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d554c:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d5550:	fb05 3312 	mls	r3, r5, r2, r3
   d5554:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5558:	2b09      	cmp	r3, #9
   d555a:	bf94      	ite	ls
   d555c:	3330      	addls	r3, #48	; 0x30
   d555e:	3337      	addhi	r3, #55	; 0x37
   d5560:	b2db      	uxtb	r3, r3
   d5562:	4621      	mov	r1, r4
   d5564:	f804 3901 	strb.w	r3, [r4], #-1
   d5568:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d556a:	2d00      	cmp	r5, #0
   d556c:	d1ee      	bne.n	d554c <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d556e:	f7ff ffb9 	bl	d54e4 <_ZN5Print5writeEPKc>
}
   d5572:	b00b      	add	sp, #44	; 0x2c
   d5574:	bd30      	pop	{r4, r5, pc}

000d5576 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d5576:	b510      	push	{r4, lr}
   d5578:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d557a:	f7ff fa2e 	bl	d49da <_ZNSt14_Function_baseD1Ev>
   d557e:	4620      	mov	r0, r4
   d5580:	bd10      	pop	{r4, pc}
	...

000d5584 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5584:	4803      	ldr	r0, [pc, #12]	; (d5594 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d5586:	4a04      	ldr	r2, [pc, #16]	; (d5598 <_GLOBAL__sub_I_RGB+0x14>)
   d5588:	4904      	ldr	r1, [pc, #16]	; (d559c <_GLOBAL__sub_I_RGB+0x18>)
   d558a:	2300      	movs	r3, #0
   d558c:	6083      	str	r3, [r0, #8]
   d558e:	f000 bb4d 	b.w	d5c2c <__aeabi_atexit>
   d5592:	bf00      	nop
   d5594:	2003e5b8 	.word	0x2003e5b8
   d5598:	2003e3b4 	.word	0x2003e3b4
   d559c:	000d5577 	.word	0x000d5577

000d55a0 <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d55a0:	4770      	bx	lr

000d55a2 <_ZN8SPIClassD0Ev>:
   d55a2:	b510      	push	{r4, lr}
   d55a4:	210c      	movs	r1, #12
   d55a6:	4604      	mov	r4, r0
   d55a8:	f000 fb45 	bl	d5c36 <_ZdlPvj>
   d55ac:	4620      	mov	r0, r4
   d55ae:	bd10      	pop	{r4, pc}

000d55b0 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d55b0:	b510      	push	{r4, lr}
   d55b2:	4b05      	ldr	r3, [pc, #20]	; (d55c8 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x18>)
   d55b4:	6003      	str	r3, [r0, #0]
   d55b6:	4604      	mov	r4, r0
{
    _spi = spi;
   d55b8:	7101      	strb	r1, [r0, #4]
    HAL_SPI_Init(_spi);
   d55ba:	4608      	mov	r0, r1
   d55bc:	f7ff f84a 	bl	d4654 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d55c0:	2300      	movs	r3, #0
   d55c2:	60a3      	str	r3, [r4, #8]
}
   d55c4:	4620      	mov	r0, r4
   d55c6:	bd10      	pop	{r4, pc}
   d55c8:	000d6a88 	.word	0x000d6a88

000d55cc <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d55cc:	7900      	ldrb	r0, [r0, #4]
   d55ce:	f7ff b849 	b.w	d4664 <HAL_SPI_Is_Enabled>

000d55d2 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d55d2:	b510      	push	{r4, lr}
   d55d4:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d55d6:	6800      	ldr	r0, [r0, #0]
   d55d8:	b118      	cbz	r0, d55e2 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d55da:	f7ff f979 	bl	d48d0 <free>
            wakeupSource_ = nullptr;
   d55de:	2300      	movs	r3, #0
   d55e0:	6023      	str	r3, [r4, #0]
   d55e2:	bd10      	pop	{r4, pc}

000d55e4 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d55e4:	b510      	push	{r4, lr}
   d55e6:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d55e8:	f7ff fff3 	bl	d55d2 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d55ec:	4620      	mov	r0, r4
   d55ee:	bd10      	pop	{r4, pc}

000d55f0 <_ZN17SystemSleepResultaSEOS_>:
            wakeupSource_ = result.wakeupSource_;
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d55f0:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   d55f2:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   d55f6:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   d55f8:	460b      	mov	r3, r1
            wakeupSource_ = result.wakeupSource_;
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d55fa:	460d      	mov	r5, r1
        error_ = result.error_;
        compatResult_ = result.compatResult_;
   d55fc:	f853 2f06 	ldr.w	r2, [r3, #6]!
   d5600:	f8c0 2006 	str.w	r2, [r0, #6]
   d5604:	889b      	ldrh	r3, [r3, #4]
   d5606:	8143      	strh	r3, [r0, #10]
            wakeupSource_ = result.wakeupSource_;
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d5608:	4604      	mov	r4, r0
        error_ = result.error_;
        compatResult_ = result.compatResult_;
        freeWakeupSourceMemory();
   d560a:	f7ff ffe2 	bl	d55d2 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
        if (result.wakeupSource_) {
   d560e:	682b      	ldr	r3, [r5, #0]
   d5610:	b113      	cbz	r3, d5618 <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
   d5612:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
   d5614:	2300      	movs	r3, #0
   d5616:	602b      	str	r3, [r5, #0]
        }
        return *this;
    }
   d5618:	4620      	mov	r0, r4
   d561a:	bd38      	pop	{r3, r4, r5, pc}

000d561c <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>:
            free(wakeupSource_);
            wakeupSource_ = nullptr;
        }
    }

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   d561c:	b538      	push	{r3, r4, r5, lr}
   d561e:	460c      	mov	r4, r1
   d5620:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   d5622:	f7ff ffd6 	bl	d55d2 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
        if (source) {
   d5626:	b144      	cbz	r4, d563a <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x1e>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   d5628:	8820      	ldrh	r0, [r4, #0]
   d562a:	f7ff f949 	bl	d48c0 <malloc>
   d562e:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   d5630:	b128      	cbz	r0, d563e <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x22>
                memcpy(wakeupSource_, source, source->size);
   d5632:	8822      	ldrh	r2, [r4, #0]
   d5634:	4621      	mov	r1, r4
   d5636:	f001 f88d 	bl	d6754 <memcpy>
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
   d563a:	2000      	movs	r0, #0
   d563c:	bd38      	pop	{r3, r4, r5, pc}
        if (source) {
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
            if (wakeupSource_) {
                memcpy(wakeupSource_, source, source->size);
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
   d563e:	4801      	ldr	r0, [pc, #4]	; (d5644 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x28>)
            }
        }
        return SYSTEM_ERROR_NONE;
    }
   d5640:	bd38      	pop	{r3, r4, r5, pc}
   d5642:	bf00      	nop
   d5644:	fffffefc 	.word	0xfffffefc

000d5648 <_ZN11SystemClass5sleepERK24SystemSleepConfiguration>:
void SystemClass::reset(uint32_t data)
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
}

SystemSleepResult SystemClass::sleep(const SystemSleepConfiguration& config) {
   d5648:	b5f0      	push	{r4, r5, r6, r7, lr}
   d564a:	4d30      	ldr	r5, [pc, #192]	; (d570c <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0xc4>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   d564c:	7d0b      	ldrb	r3, [r1, #20]
   d564e:	4604      	mov	r4, r0
   d5650:	b08b      	sub	sp, #44	; 0x2c
   d5652:	4608      	mov	r0, r1
   d5654:	1daf      	adds	r7, r5, #6
   d5656:	b313      	cbz	r3, d569e <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0x56>
    particle::EnumFlags<SystemSleepFlag> sleepFlags() const {
        return particle::EnumFlags<SystemSleepFlag>::fromUnderlying(config_->flags);
    }

    SystemSleepMode sleepMode() const {
        return static_cast<SystemSleepMode>(config_->mode);
   d5658:	680b      	ldr	r3, [r1, #0]
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   d565a:	791b      	ldrb	r3, [r3, #4]
   d565c:	b1fb      	cbz	r3, d569e <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0x56>

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d565e:	2200      	movs	r2, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d5660:	f64f 73ff 	movw	r3, #65535	; 0xffff
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   d5664:	a902      	add	r1, sp, #8
   d5666:	3004      	adds	r0, #4

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d5668:	9202      	str	r2, [sp, #8]
   d566a:	f8ad 200c 	strh.w	r2, [sp, #12]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d566e:	f88d 200e 	strb.w	r2, [sp, #14]
   d5672:	f8ad 2010 	strh.w	r2, [sp, #16]
   d5676:	f8ad 3012 	strh.w	r3, [sp, #18]
   d567a:	f7ff f8af 	bl	d47dc <system_sleep_ext>
        copyWakeupSource(result.wakeupSource_);
    }

    SystemSleepResult& operator=(const SystemSleepResult& result) {
        error_ = result.error_;
        compatResult_ = result.compatResult_;
   d567e:	ab0a      	add	r3, sp, #40	; 0x28
        result.setError(static_cast<system_error_t>(ret));
   d5680:	b200      	sxth	r0, r0
   d5682:	f853 2d1a 	ldr.w	r2, [r3, #-26]!
    ~SystemSleepResult() {
        freeWakeupSourceMemory();
    }

    void setError(system_error_t error, bool clear = false) {
        error_ = error;
   d5686:	f8ad 000c 	strh.w	r0, [sp, #12]
        copyWakeupSource(result.wakeupSource_);
    }

    SystemSleepResult& operator=(const SystemSleepResult& result) {
        error_ = result.error_;
        compatResult_ = result.compatResult_;
   d568a:	889b      	ldrh	r3, [r3, #4]
        compatResult_ = result.compatResult_;
        copyWakeupSource(result.wakeupSource_);
    }

    SystemSleepResult& operator=(const SystemSleepResult& result) {
        error_ = result.error_;
   d568c:	80a8      	strh	r0, [r5, #4]
        compatResult_ = result.compatResult_;
   d568e:	f8c5 2006 	str.w	r2, [r5, #6]
        copyWakeupSource(result.wakeupSource_);
   d5692:	9902      	ldr	r1, [sp, #8]
        copyWakeupSource(result.wakeupSource_);
    }

    SystemSleepResult& operator=(const SystemSleepResult& result) {
        error_ = result.error_;
        compatResult_ = result.compatResult_;
   d5694:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   d5696:	4628      	mov	r0, r5
   d5698:	f7ff ffc0 	bl	d561c <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
   d569c:	e01c      	b.n	d56d8 <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0x90>
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
}

SystemSleepResult SystemClass::sleep(const SystemSleepConfiguration& config) {
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
   d569e:	2320      	movs	r3, #32
   d56a0:	2600      	movs	r6, #0
   d56a2:	9302      	str	r3, [sp, #8]
   d56a4:	4b1a      	ldr	r3, [pc, #104]	; (d5710 <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0xc8>)
   d56a6:	9300      	str	r3, [sp, #0]
   d56a8:	491a      	ldr	r1, [pc, #104]	; (d5714 <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0xcc>)
   d56aa:	9603      	str	r6, [sp, #12]
   d56ac:	4633      	mov	r3, r6
   d56ae:	2032      	movs	r0, #50	; 0x32
   d56b0:	aa02      	add	r2, sp, #8
   d56b2:	f7ff f857 	bl	d4764 <log_message>
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d56b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d56ba:	f8ad 3012 	strh.w	r3, [sp, #18]
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   d56be:	a902      	add	r1, sp, #8
        error_ = error;
    }

    SystemSleepResult(system_error_t error)
            : SystemSleepResult() {
        error_ = error;
   d56c0:	f64f 63f2 	movw	r3, #65266	; 0xfef2
   d56c4:	4811      	ldr	r0, [pc, #68]	; (d570c <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0xc4>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d56c6:	9602      	str	r6, [sp, #8]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d56c8:	f88d 600e 	strb.w	r6, [sp, #14]
   d56cc:	f8ad 6010 	strh.w	r6, [sp, #16]
        error_ = error;
    }

    SystemSleepResult(system_error_t error)
            : SystemSleepResult() {
        error_ = error;
   d56d0:	f8ad 300c 	strh.w	r3, [sp, #12]
   d56d4:	f7ff ff8c 	bl	d55f0 <_ZN17SystemSleepResultaSEOS_>
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d56d8:	a802      	add	r0, sp, #8
   d56da:	f7ff ff7a 	bl	d55d2 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d56de:	2300      	movs	r3, #0
   d56e0:	6023      	str	r3, [r4, #0]
   d56e2:	80a3      	strh	r3, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d56e4:	71a3      	strb	r3, [r4, #6]
   d56e6:	8123      	strh	r3, [r4, #8]
   d56e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d56ec:	8163      	strh	r3, [r4, #10]
    }

    // Copy constructor
    SystemSleepResult(const SystemSleepResult& result)
            : SystemSleepResult() {
        error_ = result.error_;
   d56ee:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   d56f2:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   d56f4:	683b      	ldr	r3, [r7, #0]
   d56f6:	f8c4 3006 	str.w	r3, [r4, #6]
   d56fa:	88bb      	ldrh	r3, [r7, #4]
   d56fc:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   d56fe:	6829      	ldr	r1, [r5, #0]
   d5700:	4620      	mov	r0, r4
   d5702:	f7ff ff8b 	bl	d561c <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
        result.setError(static_cast<system_error_t>(ret));
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   d5706:	4620      	mov	r0, r4
   d5708:	b00b      	add	sp, #44	; 0x2c
   d570a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d570c:	2003e5c8 	.word	0x2003e5c8
   d5710:	000d6a97 	.word	0x000d6a97
   d5714:	000d6a90 	.word	0x000d6a90

000d5718 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d5718:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d571a:	4c09      	ldr	r4, [pc, #36]	; (d5740 <_GLOBAL__sub_I_System+0x28>)
   d571c:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d571e:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d5722:	6020      	str	r0, [r4, #0]
   d5724:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d5726:	71a0      	strb	r0, [r4, #6]
   d5728:	8120      	strh	r0, [r4, #8]
   d572a:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d572c:	f7ff f822 	bl	d4774 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d5730:	4620      	mov	r0, r4
   d5732:	4a04      	ldr	r2, [pc, #16]	; (d5744 <_GLOBAL__sub_I_System+0x2c>)
   d5734:	4904      	ldr	r1, [pc, #16]	; (d5748 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d5736:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d573a:	f000 ba77 	b.w	d5c2c <__aeabi_atexit>
   d573e:	bf00      	nop
   d5740:	2003e5c8 	.word	0x2003e5c8
   d5744:	2003e3b4 	.word	0x2003e3b4
   d5748:	000d55e5 	.word	0x000d55e5

000d574c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d574c:	4b02      	ldr	r3, [pc, #8]	; (d5758 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d574e:	681a      	ldr	r2, [r3, #0]
   d5750:	4b02      	ldr	r3, [pc, #8]	; (d575c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d5752:	601a      	str	r2, [r3, #0]
   d5754:	4770      	bx	lr
   d5756:	bf00      	nop
   d5758:	2003e34c 	.word	0x2003e34c
   d575c:	2003e5d4 	.word	0x2003e5d4

000d5760 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d5760:	4770      	bx	lr

000d5762 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5762:	7441      	strb	r1, [r0, #17]
   d5764:	4770      	bx	lr

000d5766 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d5766:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d5768:	7c00      	ldrb	r0, [r0, #16]
   d576a:	f7fe ffbb 	bl	d46e4 <HAL_USART_Available_Data_For_Write>
}
   d576e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5772:	bd08      	pop	{r3, pc}

000d5774 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d5774:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d5776:	7c00      	ldrb	r0, [r0, #16]
   d5778:	f7fe ff8c 	bl	d4694 <HAL_USART_Available_Data>
}
   d577c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5780:	bd08      	pop	{r3, pc}

000d5782 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d5782:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d5784:	7c00      	ldrb	r0, [r0, #16]
   d5786:	f7fe ff95 	bl	d46b4 <HAL_USART_Peek_Data>
}
   d578a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d578e:	bf28      	it	cs
   d5790:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d5794:	bd08      	pop	{r3, pc}

000d5796 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d5796:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d5798:	7c00      	ldrb	r0, [r0, #16]
   d579a:	f7fe ff83 	bl	d46a4 <HAL_USART_Read_Data>
}
   d579e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d57a2:	bf28      	it	cs
   d57a4:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d57a8:	bd08      	pop	{r3, pc}

000d57aa <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d57aa:	7c00      	ldrb	r0, [r0, #16]
   d57ac:	f7fe bf8a 	b.w	d46c4 <HAL_USART_Flush_Data>

000d57b0 <_ZN11USARTSerialD0Ev>:
   d57b0:	b510      	push	{r4, lr}
   d57b2:	2114      	movs	r1, #20
   d57b4:	4604      	mov	r4, r0
   d57b6:	f000 fa3e 	bl	d5c36 <_ZdlPvj>
   d57ba:	4620      	mov	r0, r4
   d57bc:	bd10      	pop	{r4, pc}

000d57be <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d57be:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d57c0:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d57c2:	4604      	mov	r4, r0
   d57c4:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d57c6:	b925      	cbnz	r5, d57d2 <_ZN11USARTSerial5writeEh+0x14>
   d57c8:	7c00      	ldrb	r0, [r0, #16]
   d57ca:	f7fe ff8b 	bl	d46e4 <HAL_USART_Available_Data_For_Write>
   d57ce:	2800      	cmp	r0, #0
   d57d0:	dd05      	ble.n	d57de <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d57d2:	4631      	mov	r1, r6
   d57d4:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d57d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d57da:	f7fe bf53 	b.w	d4684 <HAL_USART_Write_Data>
  }
  return 0;
}
   d57de:	4628      	mov	r0, r5
   d57e0:	bd70      	pop	{r4, r5, r6, pc}
	...

000d57e4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d57e4:	b510      	push	{r4, lr}
   d57e6:	4604      	mov	r4, r0
   d57e8:	4608      	mov	r0, r1
   d57ea:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d57ec:	2200      	movs	r2, #0
   d57ee:	6062      	str	r2, [r4, #4]
   d57f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d57f4:	60a2      	str	r2, [r4, #8]
   d57f6:	4a05      	ldr	r2, [pc, #20]	; (d580c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d57f8:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d57fa:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d57fc:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d57fe:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d5800:	461a      	mov	r2, r3
   d5802:	f7fe ff37 	bl	d4674 <HAL_USART_Init>
}
   d5806:	4620      	mov	r0, r4
   d5808:	bd10      	pop	{r4, pc}
   d580a:	bf00      	nop
   d580c:	000d6af0 	.word	0x000d6af0

000d5810 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d5810:	7c00      	ldrb	r0, [r0, #16]
   d5812:	f7fe bf5f 	b.w	d46d4 <HAL_USART_Is_Enabled>
	...

000d5818 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d5818:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d581a:	4d0c      	ldr	r5, [pc, #48]	; (d584c <_Z22__fetch_global_Serial1v+0x34>)
   d581c:	6829      	ldr	r1, [r5, #0]
   d581e:	f011 0401 	ands.w	r4, r1, #1
   d5822:	d111      	bne.n	d5848 <_Z22__fetch_global_Serial1v+0x30>
   d5824:	4628      	mov	r0, r5
   d5826:	f7fe fc49 	bl	d40bc <__cxa_guard_acquire>
   d582a:	b168      	cbz	r0, d5848 <_Z22__fetch_global_Serial1v+0x30>
   d582c:	4a08      	ldr	r2, [pc, #32]	; (d5850 <_Z22__fetch_global_Serial1v+0x38>)
   d582e:	4b09      	ldr	r3, [pc, #36]	; (d5854 <_Z22__fetch_global_Serial1v+0x3c>)
   d5830:	4809      	ldr	r0, [pc, #36]	; (d5858 <_Z22__fetch_global_Serial1v+0x40>)
   d5832:	4621      	mov	r1, r4
   d5834:	f7ff ffd6 	bl	d57e4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d5838:	4628      	mov	r0, r5
   d583a:	f7fe fc44 	bl	d40c6 <__cxa_guard_release>
   d583e:	4a07      	ldr	r2, [pc, #28]	; (d585c <_Z22__fetch_global_Serial1v+0x44>)
   d5840:	4907      	ldr	r1, [pc, #28]	; (d5860 <_Z22__fetch_global_Serial1v+0x48>)
   d5842:	4805      	ldr	r0, [pc, #20]	; (d5858 <_Z22__fetch_global_Serial1v+0x40>)
   d5844:	f000 f9f2 	bl	d5c2c <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d5848:	4803      	ldr	r0, [pc, #12]	; (d5858 <_Z22__fetch_global_Serial1v+0x40>)
   d584a:	bd38      	pop	{r3, r4, r5, pc}
   d584c:	2003e670 	.word	0x2003e670
   d5850:	2003e674 	.word	0x2003e674
   d5854:	2003e5ec 	.word	0x2003e5ec
   d5858:	2003e5d8 	.word	0x2003e5d8
   d585c:	2003e3b4 	.word	0x2003e3b4
   d5860:	000d5761 	.word	0x000d5761

000d5864 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5864:	7441      	strb	r1, [r0, #17]
   d5866:	4770      	bx	lr

000d5868 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5868:	4770      	bx	lr

000d586a <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d586a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d586c:	2100      	movs	r1, #0
   d586e:	7c00      	ldrb	r0, [r0, #16]
   d5870:	f7fe ff58 	bl	d4724 <HAL_USB_USART_Receive_Data>
}
   d5874:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5878:	bf28      	it	cs
   d587a:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d587e:	bd08      	pop	{r3, pc}

000d5880 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d5880:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d5882:	2101      	movs	r1, #1
   d5884:	7c00      	ldrb	r0, [r0, #16]
   d5886:	f7fe ff4d 	bl	d4724 <HAL_USB_USART_Receive_Data>
}
   d588a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d588e:	bf28      	it	cs
   d5890:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d5894:	bd08      	pop	{r3, pc}

000d5896 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d5896:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d5898:	7c00      	ldrb	r0, [r0, #16]
   d589a:	f7fe ff3b 	bl	d4714 <HAL_USB_USART_Available_Data_For_Write>
}
   d589e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d58a2:	bd08      	pop	{r3, pc}

000d58a4 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d58a4:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d58a6:	7c00      	ldrb	r0, [r0, #16]
   d58a8:	f7fe ff2c 	bl	d4704 <HAL_USB_USART_Available_Data>
}
   d58ac:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d58b0:	bd08      	pop	{r3, pc}

000d58b2 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d58b2:	7c00      	ldrb	r0, [r0, #16]
   d58b4:	f7fe bf46 	b.w	d4744 <HAL_USB_USART_Flush_Data>

000d58b8 <_ZN9USBSerialD0Ev>:
   d58b8:	b510      	push	{r4, lr}
   d58ba:	2114      	movs	r1, #20
   d58bc:	4604      	mov	r4, r0
   d58be:	f000 f9ba 	bl	d5c36 <_ZdlPvj>
   d58c2:	4620      	mov	r0, r4
   d58c4:	bd10      	pop	{r4, pc}

000d58c6 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d58c6:	b538      	push	{r3, r4, r5, lr}
   d58c8:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d58ca:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d58cc:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d58ce:	f7fe ff21 	bl	d4714 <HAL_USB_USART_Available_Data_For_Write>
   d58d2:	2800      	cmp	r0, #0
   d58d4:	dc01      	bgt.n	d58da <_ZN9USBSerial5writeEh+0x14>
   d58d6:	7c60      	ldrb	r0, [r4, #17]
   d58d8:	b128      	cbz	r0, d58e6 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d58da:	4629      	mov	r1, r5
   d58dc:	7c20      	ldrb	r0, [r4, #16]
   d58de:	f7fe ff29 	bl	d4734 <HAL_USB_USART_Send_Data>
   d58e2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d58e6:	bd38      	pop	{r3, r4, r5, pc}

000d58e8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d58e8:	b510      	push	{r4, lr}
   d58ea:	4604      	mov	r4, r0
   d58ec:	2300      	movs	r3, #0
   d58ee:	6063      	str	r3, [r4, #4]
   d58f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d58f4:	60a3      	str	r3, [r4, #8]
   d58f6:	4b05      	ldr	r3, [pc, #20]	; (d590c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d58f8:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d58fa:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d58fc:	4608      	mov	r0, r1
{
  _serial = serial;
   d58fe:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d5900:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d5902:	4611      	mov	r1, r2
   d5904:	f7fe fef6 	bl	d46f4 <HAL_USB_USART_Init>
}
   d5908:	4620      	mov	r0, r4
   d590a:	bd10      	pop	{r4, pc}
   d590c:	000d6b20 	.word	0x000d6b20

000d5910 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5910:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d5912:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5914:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d5916:	2100      	movs	r1, #0
   d5918:	f000 ff27 	bl	d676a <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d591c:	4620      	mov	r0, r4
   d591e:	bd10      	pop	{r4, pc}

000d5920 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d5920:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5922:	4d0e      	ldr	r5, [pc, #56]	; (d595c <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d5924:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d5926:	a801      	add	r0, sp, #4
   d5928:	f7ff fff2 	bl	d5910 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d592c:	6829      	ldr	r1, [r5, #0]
   d592e:	f011 0401 	ands.w	r4, r1, #1
   d5932:	d110      	bne.n	d5956 <_Z16_fetch_usbserialv+0x36>
   d5934:	4628      	mov	r0, r5
   d5936:	f7fe fbc1 	bl	d40bc <__cxa_guard_acquire>
   d593a:	b160      	cbz	r0, d5956 <_Z16_fetch_usbserialv+0x36>
   d593c:	aa01      	add	r2, sp, #4
   d593e:	4621      	mov	r1, r4
   d5940:	4807      	ldr	r0, [pc, #28]	; (d5960 <_Z16_fetch_usbserialv+0x40>)
   d5942:	f7ff ffd1 	bl	d58e8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d5946:	4628      	mov	r0, r5
   d5948:	f7fe fbbd 	bl	d40c6 <__cxa_guard_release>
   d594c:	4a05      	ldr	r2, [pc, #20]	; (d5964 <_Z16_fetch_usbserialv+0x44>)
   d594e:	4906      	ldr	r1, [pc, #24]	; (d5968 <_Z16_fetch_usbserialv+0x48>)
   d5950:	4803      	ldr	r0, [pc, #12]	; (d5960 <_Z16_fetch_usbserialv+0x40>)
   d5952:	f000 f96b 	bl	d5c2c <__aeabi_atexit>
	return _usbserial;
}
   d5956:	4802      	ldr	r0, [pc, #8]	; (d5960 <_Z16_fetch_usbserialv+0x40>)
   d5958:	b007      	add	sp, #28
   d595a:	bd30      	pop	{r4, r5, pc}
   d595c:	2003e6f8 	.word	0x2003e6f8
   d5960:	2003e6fc 	.word	0x2003e6fc
   d5964:	2003e3b4 	.word	0x2003e3b4
   d5968:	000d5869 	.word	0x000d5869

000d596c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d596c:	2200      	movs	r2, #0
   d596e:	4611      	mov	r1, r2
   d5970:	6840      	ldr	r0, [r0, #4]
   d5972:	f7fe bf6d 	b.w	d4850 <network_ready>

000d5976 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5976:	2200      	movs	r2, #0
   d5978:	4611      	mov	r1, r2
   d597a:	6840      	ldr	r0, [r0, #4]
   d597c:	f7fe bf88 	b.w	d4890 <network_listening>

000d5980 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5980:	2200      	movs	r2, #0
   d5982:	4611      	mov	r1, r2
   d5984:	6840      	ldr	r0, [r0, #4]
   d5986:	f7fe bf93 	b.w	d48b0 <network_get_listen_timeout>

000d598a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d598a:	2200      	movs	r2, #0
   d598c:	6840      	ldr	r0, [r0, #4]
   d598e:	f7fe bf87 	b.w	d48a0 <network_set_listen_timeout>

000d5992 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5992:	2200      	movs	r2, #0
   d5994:	f081 0101 	eor.w	r1, r1, #1
   d5998:	6840      	ldr	r0, [r0, #4]
   d599a:	f7fe bf71 	b.w	d4880 <network_listen>

000d599e <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d599e:	2300      	movs	r3, #0
   d59a0:	461a      	mov	r2, r3
   d59a2:	4619      	mov	r1, r3
   d59a4:	6840      	ldr	r0, [r0, #4]
   d59a6:	f7fe bf63 	b.w	d4870 <network_off>

000d59aa <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d59aa:	2300      	movs	r3, #0
   d59ac:	461a      	mov	r2, r3
   d59ae:	4619      	mov	r1, r3
   d59b0:	6840      	ldr	r0, [r0, #4]
   d59b2:	f7fe bf55 	b.w	d4860 <network_on>

000d59b6 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d59b6:	2200      	movs	r2, #0
   d59b8:	4611      	mov	r1, r2
   d59ba:	6840      	ldr	r0, [r0, #4]
   d59bc:	f7fe bf38 	b.w	d4830 <network_connecting>

000d59c0 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d59c0:	2200      	movs	r2, #0
   d59c2:	2102      	movs	r1, #2
   d59c4:	6840      	ldr	r0, [r0, #4]
   d59c6:	f7fe bf3b 	b.w	d4840 <network_disconnect>

000d59ca <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d59ca:	2300      	movs	r3, #0
   d59cc:	461a      	mov	r2, r3
   d59ce:	6840      	ldr	r0, [r0, #4]
   d59d0:	f7fe bf26 	b.w	d4820 <network_connect>

000d59d4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d59d4:	4b02      	ldr	r3, [pc, #8]	; (d59e0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d59d6:	2204      	movs	r2, #4
   d59d8:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d59da:	4a02      	ldr	r2, [pc, #8]	; (d59e4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d59dc:	601a      	str	r2, [r3, #0]
   d59de:	4770      	bx	lr
   d59e0:	2003e710 	.word	0x2003e710
   d59e4:	000d6b50 	.word	0x000d6b50

000d59e8 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d59e8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d59ea:	4b0c      	ldr	r3, [pc, #48]	; (d5a1c <serialEventRun+0x34>)
   d59ec:	b133      	cbz	r3, d59fc <serialEventRun+0x14>
   d59ee:	f7ff ff97 	bl	d5920 <_Z16_fetch_usbserialv>
   d59f2:	6803      	ldr	r3, [r0, #0]
   d59f4:	691b      	ldr	r3, [r3, #16]
   d59f6:	4798      	blx	r3
   d59f8:	2800      	cmp	r0, #0
   d59fa:	dc09      	bgt.n	d5a10 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d59fc:	4b08      	ldr	r3, [pc, #32]	; (d5a20 <serialEventRun+0x38>)
   d59fe:	b163      	cbz	r3, d5a1a <serialEventRun+0x32>
   d5a00:	f7ff ff0a 	bl	d5818 <_Z22__fetch_global_Serial1v>
   d5a04:	6803      	ldr	r3, [r0, #0]
   d5a06:	691b      	ldr	r3, [r3, #16]
   d5a08:	4798      	blx	r3
   d5a0a:	2800      	cmp	r0, #0
   d5a0c:	dc03      	bgt.n	d5a16 <serialEventRun+0x2e>
   d5a0e:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d5a10:	f3af 8000 	nop.w
   d5a14:	e7f2      	b.n	d59fc <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d5a16:	f3af 8000 	nop.w
   d5a1a:	bd08      	pop	{r3, pc}
	...

000d5a24 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d5a24:	b508      	push	{r3, lr}
	serialEventRun();
   d5a26:	f7ff ffdf 	bl	d59e8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d5a2a:	f7fe fd83 	bl	d4534 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d5a2e:	4b01      	ldr	r3, [pc, #4]	; (d5a34 <_post_loop+0x10>)
   d5a30:	6018      	str	r0, [r3, #0]
   d5a32:	bd08      	pop	{r3, pc}
   d5a34:	2003e720 	.word	0x2003e720

000d5a38 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d5a38:	4802      	ldr	r0, [pc, #8]	; (d5a44 <_Z33system_initialize_user_backup_ramv+0xc>)
   d5a3a:	4a03      	ldr	r2, [pc, #12]	; (d5a48 <_Z33system_initialize_user_backup_ramv+0x10>)
   d5a3c:	4903      	ldr	r1, [pc, #12]	; (d5a4c <_Z33system_initialize_user_backup_ramv+0x14>)
   d5a3e:	1a12      	subs	r2, r2, r0
   d5a40:	f000 be88 	b.w	d6754 <memcpy>
   d5a44:	2003f400 	.word	0x2003f400
   d5a48:	2003f404 	.word	0x2003f404
   d5a4c:	000d6c20 	.word	0x000d6c20

000d5a50 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5a50:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5a52:	2300      	movs	r3, #0
   d5a54:	9300      	str	r3, [sp, #0]
   d5a56:	461a      	mov	r2, r3
   d5a58:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5a5c:	f7fe feb4 	bl	d47c8 <system_ctrl_set_result>
}
   d5a60:	b003      	add	sp, #12
   d5a62:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5a68 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d5a68:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d5a6a:	8843      	ldrh	r3, [r0, #2]
   d5a6c:	2b0a      	cmp	r3, #10
   d5a6e:	d008      	beq.n	d5a82 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d5a70:	2b50      	cmp	r3, #80	; 0x50
   d5a72:	d109      	bne.n	d5a88 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d5a74:	4b09      	ldr	r3, [pc, #36]	; (d5a9c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d5a76:	681b      	ldr	r3, [r3, #0]
   d5a78:	b13b      	cbz	r3, d5a8a <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d5a7a:	b003      	add	sp, #12
   d5a7c:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d5a80:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d5a82:	f7ff ffe5 	bl	d5a50 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d5a86:	e006      	b.n	d5a96 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5a88:	2300      	movs	r3, #0
   d5a8a:	9300      	str	r3, [sp, #0]
   d5a8c:	461a      	mov	r2, r3
   d5a8e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5a92:	f7fe fe99 	bl	d47c8 <system_ctrl_set_result>
        break;
    }
}
   d5a96:	b003      	add	sp, #12
   d5a98:	f85d fb04 	ldr.w	pc, [sp], #4
   d5a9c:	2003e718 	.word	0x2003e718

000d5aa0 <module_user_init_hook>:

void module_user_init_hook()
{
   d5aa0:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d5aa2:	4c10      	ldr	r4, [pc, #64]	; (d5ae4 <module_user_init_hook+0x44>)
   d5aa4:	4d10      	ldr	r5, [pc, #64]	; (d5ae8 <module_user_init_hook+0x48>)
   d5aa6:	6823      	ldr	r3, [r4, #0]
   d5aa8:	42ab      	cmp	r3, r5
   d5aaa:	4b10      	ldr	r3, [pc, #64]	; (d5aec <module_user_init_hook+0x4c>)
   d5aac:	bf0c      	ite	eq
   d5aae:	2201      	moveq	r2, #1
   d5ab0:	2200      	movne	r2, #0
   d5ab2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d5ab4:	d002      	beq.n	d5abc <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d5ab6:	f7ff ffbf 	bl	d5a38 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d5aba:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d5abc:	f7fe fd2a 	bl	d4514 <HAL_RNG_GetRandomNumber>
   d5ac0:	4604      	mov	r4, r0
    srand(seed);
   d5ac2:	f000 fe5b 	bl	d677c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d5ac6:	4b0a      	ldr	r3, [pc, #40]	; (d5af0 <module_user_init_hook+0x50>)
   d5ac8:	b113      	cbz	r3, d5ad0 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d5aca:	4620      	mov	r0, r4
   d5acc:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d5ad0:	2100      	movs	r1, #0
   d5ad2:	4807      	ldr	r0, [pc, #28]	; (d5af0 <module_user_init_hook+0x50>)
   d5ad4:	f7fe fe9c 	bl	d4810 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5ad8:	2100      	movs	r1, #0
   d5ada:	4806      	ldr	r0, [pc, #24]	; (d5af4 <module_user_init_hook+0x54>)
}
   d5adc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5ae0:	f7fe be68 	b.w	d47b4 <system_ctrl_set_app_request_handler>
   d5ae4:	2003f400 	.word	0x2003f400
   d5ae8:	9a271c1e 	.word	0x9a271c1e
   d5aec:	2003e71c 	.word	0x2003e71c
   d5af0:	00000000 	.word	0x00000000
   d5af4:	000d5a69 	.word	0x000d5a69

000d5af8 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d5af8:	b510      	push	{r4, lr}
   d5afa:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d5afc:	f000 f876 	bl	d5bec <_ZN8particle7globals11instanceSpiEv>
   d5b00:	f7ff fd64 	bl	d55cc <_ZN8SPIClass9isEnabledEv>
   d5b04:	b128      	cbz	r0, d5b12 <pinAvailable+0x1a>
   d5b06:	f1a4 030b 	sub.w	r3, r4, #11
   d5b0a:	2b02      	cmp	r3, #2
   d5b0c:	d801      	bhi.n	d5b12 <pinAvailable+0x1a>
  {
    return 0; // 'pin' is used
   d5b0e:	2000      	movs	r0, #0
   d5b10:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d5b12:	f000 f845 	bl	d5ba0 <_Z19__fetch_global_Wirev>
   d5b16:	f7ff faee 	bl	d50f6 <_ZN7TwoWire9isEnabledEv>
   d5b1a:	b108      	cbz	r0, d5b20 <pinAvailable+0x28>
   d5b1c:	2c01      	cmp	r4, #1
   d5b1e:	d9f6      	bls.n	d5b0e <pinAvailable+0x16>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d5b20:	f7ff fe7a 	bl	d5818 <_Z22__fetch_global_Serial1v>
   d5b24:	f7ff fe74 	bl	d5810 <_ZN11USARTSerial9isEnabledEv>
   d5b28:	b118      	cbz	r0, d5b32 <pinAvailable+0x3a>
   d5b2a:	f1a4 0309 	sub.w	r3, r4, #9
   d5b2e:	2b01      	cmp	r3, #1
   d5b30:	d9ed      	bls.n	d5b0e <pinAvailable+0x16>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d5b32:	2c23      	cmp	r4, #35	; 0x23
   d5b34:	bf8c      	ite	hi
   d5b36:	2000      	movhi	r0, #0
   d5b38:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d5b3a:	bd10      	pop	{r4, pc}

000d5b3c <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d5b3c:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d5b3e:	b510      	push	{r4, lr}
   d5b40:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d5b42:	bf9c      	itt	ls
   d5b44:	340e      	addls	r4, #14
   d5b46:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d5b48:	4620      	mov	r0, r4
   d5b4a:	f7ff ffd5 	bl	d5af8 <pinAvailable>
   d5b4e:	b150      	cbz	r0, d5b66 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d5b50:	2103      	movs	r1, #3
   d5b52:	4620      	mov	r0, r4
   d5b54:	f7fe fcfe 	bl	d4554 <HAL_Validate_Pin_Function>
   d5b58:	2803      	cmp	r0, #3
   d5b5a:	d104      	bne.n	d5b66 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d5b5c:	4620      	mov	r0, r4
}
   d5b5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d5b62:	f7fe bcff 	b.w	d4564 <HAL_ADC_Read>
}
   d5b66:	2000      	movs	r0, #0
   d5b68:	bd10      	pop	{r4, pc}
	...

000d5b6c <_Z17acquireWireBufferv>:
   d5b6c:	b570      	push	{r4, r5, r6, lr}
   d5b6e:	4604      	mov	r4, r0
   d5b70:	2514      	movs	r5, #20
   d5b72:	462a      	mov	r2, r5
   d5b74:	4e09      	ldr	r6, [pc, #36]	; (d5b9c <_Z17acquireWireBufferv+0x30>)
   d5b76:	2100      	movs	r1, #0
   d5b78:	f000 fdf7 	bl	d676a <memset>
   d5b7c:	8025      	strh	r5, [r4, #0]
   d5b7e:	2520      	movs	r5, #32
   d5b80:	4631      	mov	r1, r6
   d5b82:	60a5      	str	r5, [r4, #8]
   d5b84:	6125      	str	r5, [r4, #16]
   d5b86:	4628      	mov	r0, r5
   d5b88:	f000 f86f 	bl	d5c6a <_ZnajRKSt9nothrow_t>
   d5b8c:	4631      	mov	r1, r6
   d5b8e:	6060      	str	r0, [r4, #4]
   d5b90:	4628      	mov	r0, r5
   d5b92:	f000 f86a 	bl	d5c6a <_ZnajRKSt9nothrow_t>
   d5b96:	60e0      	str	r0, [r4, #12]
   d5b98:	4620      	mov	r0, r4
   d5b9a:	bd70      	pop	{r4, r5, r6, pc}
   d5b9c:	000d6b7c 	.word	0x000d6b7c

000d5ba0 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d5ba0:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5ba2:	4d0e      	ldr	r5, [pc, #56]	; (d5bdc <_Z19__fetch_global_Wirev+0x3c>)
   d5ba4:	6829      	ldr	r1, [r5, #0]
   d5ba6:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d5baa:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5bac:	d113      	bne.n	d5bd6 <_Z19__fetch_global_Wirev+0x36>
   d5bae:	4628      	mov	r0, r5
   d5bb0:	f7fe fa84 	bl	d40bc <__cxa_guard_acquire>
   d5bb4:	b178      	cbz	r0, d5bd6 <_Z19__fetch_global_Wirev+0x36>
   d5bb6:	a801      	add	r0, sp, #4
   d5bb8:	f7ff ffd8 	bl	d5b6c <_Z17acquireWireBufferv>
   d5bbc:	aa01      	add	r2, sp, #4
   d5bbe:	4621      	mov	r1, r4
   d5bc0:	4807      	ldr	r0, [pc, #28]	; (d5be0 <_Z19__fetch_global_Wirev+0x40>)
   d5bc2:	f7ff fa41 	bl	d5048 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d5bc6:	4628      	mov	r0, r5
   d5bc8:	f7fe fa7d 	bl	d40c6 <__cxa_guard_release>
   d5bcc:	4a05      	ldr	r2, [pc, #20]	; (d5be4 <_Z19__fetch_global_Wirev+0x44>)
   d5bce:	4906      	ldr	r1, [pc, #24]	; (d5be8 <_Z19__fetch_global_Wirev+0x48>)
   d5bd0:	4803      	ldr	r0, [pc, #12]	; (d5be0 <_Z19__fetch_global_Wirev+0x40>)
   d5bd2:	f000 f82b 	bl	d5c2c <__aeabi_atexit>
	return wire;
}
   d5bd6:	4802      	ldr	r0, [pc, #8]	; (d5be0 <_Z19__fetch_global_Wirev+0x40>)
   d5bd8:	b007      	add	sp, #28
   d5bda:	bd30      	pop	{r4, r5, pc}
   d5bdc:	2003e724 	.word	0x2003e724
   d5be0:	2003e728 	.word	0x2003e728
   d5be4:	2003e3b4 	.word	0x2003e3b4
   d5be8:	000d4ff1 	.word	0x000d4ff1

000d5bec <_ZN8particle7globals11instanceSpiEv>:
#ifndef SPARK_WIRING_NO_SPI

namespace particle {
namespace globals {

SPIClass& instanceSpi() {
   d5bec:	b538      	push	{r3, r4, r5, lr}
    static SPIClass instance(HAL_SPI_INTERFACE1);
   d5bee:	4d0b      	ldr	r5, [pc, #44]	; (d5c1c <_ZN8particle7globals11instanceSpiEv+0x30>)
   d5bf0:	6829      	ldr	r1, [r5, #0]
   d5bf2:	f011 0401 	ands.w	r4, r1, #1
   d5bf6:	d10f      	bne.n	d5c18 <_ZN8particle7globals11instanceSpiEv+0x2c>
   d5bf8:	4628      	mov	r0, r5
   d5bfa:	f7fe fa5f 	bl	d40bc <__cxa_guard_acquire>
   d5bfe:	b158      	cbz	r0, d5c18 <_ZN8particle7globals11instanceSpiEv+0x2c>
   d5c00:	4621      	mov	r1, r4
   d5c02:	4807      	ldr	r0, [pc, #28]	; (d5c20 <_ZN8particle7globals11instanceSpiEv+0x34>)
   d5c04:	f7ff fcd4 	bl	d55b0 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d5c08:	4628      	mov	r0, r5
   d5c0a:	f7fe fa5c 	bl	d40c6 <__cxa_guard_release>
   d5c0e:	4a05      	ldr	r2, [pc, #20]	; (d5c24 <_ZN8particle7globals11instanceSpiEv+0x38>)
   d5c10:	4905      	ldr	r1, [pc, #20]	; (d5c28 <_ZN8particle7globals11instanceSpiEv+0x3c>)
   d5c12:	4803      	ldr	r0, [pc, #12]	; (d5c20 <_ZN8particle7globals11instanceSpiEv+0x34>)
   d5c14:	f000 f80a 	bl	d5c2c <__aeabi_atexit>
    return instance;
}
   d5c18:	4801      	ldr	r0, [pc, #4]	; (d5c20 <_ZN8particle7globals11instanceSpiEv+0x34>)
   d5c1a:	bd38      	pop	{r3, r4, r5, pc}
   d5c1c:	2003e748 	.word	0x2003e748
   d5c20:	2003e73c 	.word	0x2003e73c
   d5c24:	2003e3b4 	.word	0x2003e3b4
   d5c28:	000d55a1 	.word	0x000d55a1

000d5c2c <__aeabi_atexit>:
   d5c2c:	460b      	mov	r3, r1
   d5c2e:	4601      	mov	r1, r0
   d5c30:	4618      	mov	r0, r3
   d5c32:	f000 bd81 	b.w	d6738 <__cxa_atexit>

000d5c36 <_ZdlPvj>:
   d5c36:	f7fe ba32 	b.w	d409e <_ZdlPv>
	...

000d5c3c <_ZSt15get_new_handlerv>:
   d5c3c:	4b02      	ldr	r3, [pc, #8]	; (d5c48 <_ZSt15get_new_handlerv+0xc>)
   d5c3e:	6818      	ldr	r0, [r3, #0]
   d5c40:	f3bf 8f5f 	dmb	sy
   d5c44:	4770      	bx	lr
   d5c46:	bf00      	nop
   d5c48:	2003e74c 	.word	0x2003e74c

000d5c4c <_ZnwjRKSt9nothrow_t>:
   d5c4c:	b510      	push	{r4, lr}
   d5c4e:	2800      	cmp	r0, #0
   d5c50:	bf14      	ite	ne
   d5c52:	4604      	movne	r4, r0
   d5c54:	2401      	moveq	r4, #1
   d5c56:	4620      	mov	r0, r4
   d5c58:	f7fe fe32 	bl	d48c0 <malloc>
   d5c5c:	b920      	cbnz	r0, d5c68 <_ZnwjRKSt9nothrow_t+0x1c>
   d5c5e:	f7ff ffed 	bl	d5c3c <_ZSt15get_new_handlerv>
   d5c62:	b108      	cbz	r0, d5c68 <_ZnwjRKSt9nothrow_t+0x1c>
   d5c64:	4780      	blx	r0
   d5c66:	e7f6      	b.n	d5c56 <_ZnwjRKSt9nothrow_t+0xa>
   d5c68:	bd10      	pop	{r4, pc}

000d5c6a <_ZnajRKSt9nothrow_t>:
   d5c6a:	f7ff bfef 	b.w	d5c4c <_ZnwjRKSt9nothrow_t>

000d5c6e <_ZSt25__throw_bad_function_callv>:
   d5c6e:	b508      	push	{r3, lr}
   d5c70:	f7fe fe3e 	bl	d48f0 <abort>

000d5c74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d5c74:	4b24      	ldr	r3, [pc, #144]	; (d5d08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d5c76:	681a      	ldr	r2, [r3, #0]
   d5c78:	07d0      	lsls	r0, r2, #31
   d5c7a:	bf5c      	itt	pl
   d5c7c:	2201      	movpl	r2, #1
   d5c7e:	601a      	strpl	r2, [r3, #0]
   d5c80:	4b22      	ldr	r3, [pc, #136]	; (d5d0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d5c82:	681a      	ldr	r2, [r3, #0]
   d5c84:	07d1      	lsls	r1, r2, #31
   d5c86:	bf5c      	itt	pl
   d5c88:	2201      	movpl	r2, #1
   d5c8a:	601a      	strpl	r2, [r3, #0]
   d5c8c:	4b20      	ldr	r3, [pc, #128]	; (d5d10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d5c8e:	681a      	ldr	r2, [r3, #0]
   d5c90:	07d2      	lsls	r2, r2, #31
   d5c92:	bf5c      	itt	pl
   d5c94:	2201      	movpl	r2, #1
   d5c96:	601a      	strpl	r2, [r3, #0]
   d5c98:	4b1e      	ldr	r3, [pc, #120]	; (d5d14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d5c9a:	681a      	ldr	r2, [r3, #0]
   d5c9c:	07d0      	lsls	r0, r2, #31
   d5c9e:	bf5c      	itt	pl
   d5ca0:	2201      	movpl	r2, #1
   d5ca2:	601a      	strpl	r2, [r3, #0]
   d5ca4:	4b1c      	ldr	r3, [pc, #112]	; (d5d18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d5ca6:	681a      	ldr	r2, [r3, #0]
   d5ca8:	07d1      	lsls	r1, r2, #31
   d5caa:	bf5c      	itt	pl
   d5cac:	2201      	movpl	r2, #1
   d5cae:	601a      	strpl	r2, [r3, #0]
   d5cb0:	4b1a      	ldr	r3, [pc, #104]	; (d5d1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d5cb2:	681a      	ldr	r2, [r3, #0]
   d5cb4:	07d2      	lsls	r2, r2, #31
   d5cb6:	bf5c      	itt	pl
   d5cb8:	2201      	movpl	r2, #1
   d5cba:	601a      	strpl	r2, [r3, #0]
   d5cbc:	4b18      	ldr	r3, [pc, #96]	; (d5d20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d5cbe:	681a      	ldr	r2, [r3, #0]
   d5cc0:	07d0      	lsls	r0, r2, #31
   d5cc2:	bf5c      	itt	pl
   d5cc4:	2201      	movpl	r2, #1
   d5cc6:	601a      	strpl	r2, [r3, #0]
   d5cc8:	4b16      	ldr	r3, [pc, #88]	; (d5d24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d5cca:	681a      	ldr	r2, [r3, #0]
   d5ccc:	07d1      	lsls	r1, r2, #31
   d5cce:	bf5c      	itt	pl
   d5cd0:	2201      	movpl	r2, #1
   d5cd2:	601a      	strpl	r2, [r3, #0]
   d5cd4:	4b14      	ldr	r3, [pc, #80]	; (d5d28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d5cd6:	681a      	ldr	r2, [r3, #0]
   d5cd8:	07d2      	lsls	r2, r2, #31
   d5cda:	bf5c      	itt	pl
   d5cdc:	2201      	movpl	r2, #1
   d5cde:	601a      	strpl	r2, [r3, #0]
   d5ce0:	4b12      	ldr	r3, [pc, #72]	; (d5d2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d5ce2:	681a      	ldr	r2, [r3, #0]
   d5ce4:	07d0      	lsls	r0, r2, #31
   d5ce6:	bf5c      	itt	pl
   d5ce8:	2201      	movpl	r2, #1
   d5cea:	601a      	strpl	r2, [r3, #0]
   d5cec:	4b10      	ldr	r3, [pc, #64]	; (d5d30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d5cee:	681a      	ldr	r2, [r3, #0]
   d5cf0:	07d1      	lsls	r1, r2, #31
   d5cf2:	bf5c      	itt	pl
   d5cf4:	2201      	movpl	r2, #1
   d5cf6:	601a      	strpl	r2, [r3, #0]
   d5cf8:	4b0e      	ldr	r3, [pc, #56]	; (d5d34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d5cfa:	681a      	ldr	r2, [r3, #0]
   d5cfc:	07d2      	lsls	r2, r2, #31
   d5cfe:	bf5c      	itt	pl
   d5d00:	2201      	movpl	r2, #1
   d5d02:	601a      	strpl	r2, [r3, #0]
   d5d04:	4770      	bx	lr
   d5d06:	bf00      	nop
   d5d08:	2003e77c 	.word	0x2003e77c
   d5d0c:	2003e778 	.word	0x2003e778
   d5d10:	2003e774 	.word	0x2003e774
   d5d14:	2003e770 	.word	0x2003e770
   d5d18:	2003e76c 	.word	0x2003e76c
   d5d1c:	2003e768 	.word	0x2003e768
   d5d20:	2003e764 	.word	0x2003e764
   d5d24:	2003e760 	.word	0x2003e760
   d5d28:	2003e75c 	.word	0x2003e75c
   d5d2c:	2003e758 	.word	0x2003e758
   d5d30:	2003e754 	.word	0x2003e754
   d5d34:	2003e750 	.word	0x2003e750

000d5d38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5d38:	4b18      	ldr	r3, [pc, #96]	; (d5d9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5d3a:	681a      	ldr	r2, [r3, #0]
   d5d3c:	07d1      	lsls	r1, r2, #31
   d5d3e:	bf5c      	itt	pl
   d5d40:	2201      	movpl	r2, #1
   d5d42:	601a      	strpl	r2, [r3, #0]
   d5d44:	4b16      	ldr	r3, [pc, #88]	; (d5da0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5d46:	681a      	ldr	r2, [r3, #0]
   d5d48:	07d2      	lsls	r2, r2, #31
   d5d4a:	bf5c      	itt	pl
   d5d4c:	2201      	movpl	r2, #1
   d5d4e:	601a      	strpl	r2, [r3, #0]
   d5d50:	4b14      	ldr	r3, [pc, #80]	; (d5da4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5d52:	681a      	ldr	r2, [r3, #0]
   d5d54:	07d0      	lsls	r0, r2, #31
   d5d56:	bf5c      	itt	pl
   d5d58:	2201      	movpl	r2, #1
   d5d5a:	601a      	strpl	r2, [r3, #0]
   d5d5c:	4b12      	ldr	r3, [pc, #72]	; (d5da8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5d5e:	681a      	ldr	r2, [r3, #0]
   d5d60:	07d1      	lsls	r1, r2, #31
   d5d62:	bf5c      	itt	pl
   d5d64:	2201      	movpl	r2, #1
   d5d66:	601a      	strpl	r2, [r3, #0]
   d5d68:	4b10      	ldr	r3, [pc, #64]	; (d5dac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5d6a:	681a      	ldr	r2, [r3, #0]
   d5d6c:	07d2      	lsls	r2, r2, #31
   d5d6e:	bf5c      	itt	pl
   d5d70:	2201      	movpl	r2, #1
   d5d72:	601a      	strpl	r2, [r3, #0]
   d5d74:	4b0e      	ldr	r3, [pc, #56]	; (d5db0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5d76:	681a      	ldr	r2, [r3, #0]
   d5d78:	07d0      	lsls	r0, r2, #31
   d5d7a:	bf5c      	itt	pl
   d5d7c:	2201      	movpl	r2, #1
   d5d7e:	601a      	strpl	r2, [r3, #0]
   d5d80:	4b0c      	ldr	r3, [pc, #48]	; (d5db4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5d82:	681a      	ldr	r2, [r3, #0]
   d5d84:	07d1      	lsls	r1, r2, #31
   d5d86:	bf5c      	itt	pl
   d5d88:	2201      	movpl	r2, #1
   d5d8a:	601a      	strpl	r2, [r3, #0]
   d5d8c:	4b0a      	ldr	r3, [pc, #40]	; (d5db8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5d8e:	681a      	ldr	r2, [r3, #0]
   d5d90:	07d2      	lsls	r2, r2, #31
   d5d92:	bf5c      	itt	pl
   d5d94:	2201      	movpl	r2, #1
   d5d96:	601a      	strpl	r2, [r3, #0]
   d5d98:	4770      	bx	lr
   d5d9a:	bf00      	nop
   d5d9c:	2003e79c 	.word	0x2003e79c
   d5da0:	2003e798 	.word	0x2003e798
   d5da4:	2003e794 	.word	0x2003e794
   d5da8:	2003e790 	.word	0x2003e790
   d5dac:	2003e78c 	.word	0x2003e78c
   d5db0:	2003e788 	.word	0x2003e788
   d5db4:	2003e784 	.word	0x2003e784
   d5db8:	2003e780 	.word	0x2003e780

000d5dbc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5dbc:	4b18      	ldr	r3, [pc, #96]	; (d5e20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5dbe:	681a      	ldr	r2, [r3, #0]
   d5dc0:	07d1      	lsls	r1, r2, #31
   d5dc2:	bf5c      	itt	pl
   d5dc4:	2201      	movpl	r2, #1
   d5dc6:	601a      	strpl	r2, [r3, #0]
   d5dc8:	4b16      	ldr	r3, [pc, #88]	; (d5e24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5dca:	681a      	ldr	r2, [r3, #0]
   d5dcc:	07d2      	lsls	r2, r2, #31
   d5dce:	bf5c      	itt	pl
   d5dd0:	2201      	movpl	r2, #1
   d5dd2:	601a      	strpl	r2, [r3, #0]
   d5dd4:	4b14      	ldr	r3, [pc, #80]	; (d5e28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5dd6:	681a      	ldr	r2, [r3, #0]
   d5dd8:	07d0      	lsls	r0, r2, #31
   d5dda:	bf5c      	itt	pl
   d5ddc:	2201      	movpl	r2, #1
   d5dde:	601a      	strpl	r2, [r3, #0]
   d5de0:	4b12      	ldr	r3, [pc, #72]	; (d5e2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5de2:	681a      	ldr	r2, [r3, #0]
   d5de4:	07d1      	lsls	r1, r2, #31
   d5de6:	bf5c      	itt	pl
   d5de8:	2201      	movpl	r2, #1
   d5dea:	601a      	strpl	r2, [r3, #0]
   d5dec:	4b10      	ldr	r3, [pc, #64]	; (d5e30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5dee:	681a      	ldr	r2, [r3, #0]
   d5df0:	07d2      	lsls	r2, r2, #31
   d5df2:	bf5c      	itt	pl
   d5df4:	2201      	movpl	r2, #1
   d5df6:	601a      	strpl	r2, [r3, #0]
   d5df8:	4b0e      	ldr	r3, [pc, #56]	; (d5e34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5dfa:	681a      	ldr	r2, [r3, #0]
   d5dfc:	07d0      	lsls	r0, r2, #31
   d5dfe:	bf5c      	itt	pl
   d5e00:	2201      	movpl	r2, #1
   d5e02:	601a      	strpl	r2, [r3, #0]
   d5e04:	4b0c      	ldr	r3, [pc, #48]	; (d5e38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5e06:	681a      	ldr	r2, [r3, #0]
   d5e08:	07d1      	lsls	r1, r2, #31
   d5e0a:	bf5c      	itt	pl
   d5e0c:	2201      	movpl	r2, #1
   d5e0e:	601a      	strpl	r2, [r3, #0]
   d5e10:	4b0a      	ldr	r3, [pc, #40]	; (d5e3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5e12:	681a      	ldr	r2, [r3, #0]
   d5e14:	07d2      	lsls	r2, r2, #31
   d5e16:	bf5c      	itt	pl
   d5e18:	2201      	movpl	r2, #1
   d5e1a:	601a      	strpl	r2, [r3, #0]
   d5e1c:	4770      	bx	lr
   d5e1e:	bf00      	nop
   d5e20:	2003e7bc 	.word	0x2003e7bc
   d5e24:	2003e7b8 	.word	0x2003e7b8
   d5e28:	2003e7b4 	.word	0x2003e7b4
   d5e2c:	2003e7b0 	.word	0x2003e7b0
   d5e30:	2003e7ac 	.word	0x2003e7ac
   d5e34:	2003e7a8 	.word	0x2003e7a8
   d5e38:	2003e7a4 	.word	0x2003e7a4
   d5e3c:	2003e7a0 	.word	0x2003e7a0

000d5e40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d5e40:	4b24      	ldr	r3, [pc, #144]	; (d5ed4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d5e42:	681a      	ldr	r2, [r3, #0]
   d5e44:	07d0      	lsls	r0, r2, #31
   d5e46:	bf5c      	itt	pl
   d5e48:	2201      	movpl	r2, #1
   d5e4a:	601a      	strpl	r2, [r3, #0]
   d5e4c:	4b22      	ldr	r3, [pc, #136]	; (d5ed8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d5e4e:	681a      	ldr	r2, [r3, #0]
   d5e50:	07d1      	lsls	r1, r2, #31
   d5e52:	bf5c      	itt	pl
   d5e54:	2201      	movpl	r2, #1
   d5e56:	601a      	strpl	r2, [r3, #0]
   d5e58:	4b20      	ldr	r3, [pc, #128]	; (d5edc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d5e5a:	681a      	ldr	r2, [r3, #0]
   d5e5c:	07d2      	lsls	r2, r2, #31
   d5e5e:	bf5c      	itt	pl
   d5e60:	2201      	movpl	r2, #1
   d5e62:	601a      	strpl	r2, [r3, #0]
   d5e64:	4b1e      	ldr	r3, [pc, #120]	; (d5ee0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d5e66:	681a      	ldr	r2, [r3, #0]
   d5e68:	07d0      	lsls	r0, r2, #31
   d5e6a:	bf5c      	itt	pl
   d5e6c:	2201      	movpl	r2, #1
   d5e6e:	601a      	strpl	r2, [r3, #0]
   d5e70:	4b1c      	ldr	r3, [pc, #112]	; (d5ee4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d5e72:	681a      	ldr	r2, [r3, #0]
   d5e74:	07d1      	lsls	r1, r2, #31
   d5e76:	bf5c      	itt	pl
   d5e78:	2201      	movpl	r2, #1
   d5e7a:	601a      	strpl	r2, [r3, #0]
   d5e7c:	4b1a      	ldr	r3, [pc, #104]	; (d5ee8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d5e7e:	681a      	ldr	r2, [r3, #0]
   d5e80:	07d2      	lsls	r2, r2, #31
   d5e82:	bf5c      	itt	pl
   d5e84:	2201      	movpl	r2, #1
   d5e86:	601a      	strpl	r2, [r3, #0]
   d5e88:	4b18      	ldr	r3, [pc, #96]	; (d5eec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d5e8a:	681a      	ldr	r2, [r3, #0]
   d5e8c:	07d0      	lsls	r0, r2, #31
   d5e8e:	bf5c      	itt	pl
   d5e90:	2201      	movpl	r2, #1
   d5e92:	601a      	strpl	r2, [r3, #0]
   d5e94:	4b16      	ldr	r3, [pc, #88]	; (d5ef0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d5e96:	681a      	ldr	r2, [r3, #0]
   d5e98:	07d1      	lsls	r1, r2, #31
   d5e9a:	bf5c      	itt	pl
   d5e9c:	2201      	movpl	r2, #1
   d5e9e:	601a      	strpl	r2, [r3, #0]
   d5ea0:	4b14      	ldr	r3, [pc, #80]	; (d5ef4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d5ea2:	681a      	ldr	r2, [r3, #0]
   d5ea4:	07d2      	lsls	r2, r2, #31
   d5ea6:	bf5c      	itt	pl
   d5ea8:	2201      	movpl	r2, #1
   d5eaa:	601a      	strpl	r2, [r3, #0]
   d5eac:	4b12      	ldr	r3, [pc, #72]	; (d5ef8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d5eae:	681a      	ldr	r2, [r3, #0]
   d5eb0:	07d0      	lsls	r0, r2, #31
   d5eb2:	bf5c      	itt	pl
   d5eb4:	2201      	movpl	r2, #1
   d5eb6:	601a      	strpl	r2, [r3, #0]
   d5eb8:	4b10      	ldr	r3, [pc, #64]	; (d5efc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d5eba:	681a      	ldr	r2, [r3, #0]
   d5ebc:	07d1      	lsls	r1, r2, #31
   d5ebe:	bf5c      	itt	pl
   d5ec0:	2201      	movpl	r2, #1
   d5ec2:	601a      	strpl	r2, [r3, #0]
   d5ec4:	4b0e      	ldr	r3, [pc, #56]	; (d5f00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d5ec6:	681a      	ldr	r2, [r3, #0]
   d5ec8:	07d2      	lsls	r2, r2, #31
   d5eca:	bf5c      	itt	pl
   d5ecc:	2201      	movpl	r2, #1
   d5ece:	601a      	strpl	r2, [r3, #0]
   d5ed0:	4770      	bx	lr
   d5ed2:	bf00      	nop
   d5ed4:	2003e7ec 	.word	0x2003e7ec
   d5ed8:	2003e7e8 	.word	0x2003e7e8
   d5edc:	2003e7e4 	.word	0x2003e7e4
   d5ee0:	2003e7e0 	.word	0x2003e7e0
   d5ee4:	2003e7dc 	.word	0x2003e7dc
   d5ee8:	2003e7d8 	.word	0x2003e7d8
   d5eec:	2003e7d4 	.word	0x2003e7d4
   d5ef0:	2003e7d0 	.word	0x2003e7d0
   d5ef4:	2003e7cc 	.word	0x2003e7cc
   d5ef8:	2003e7c8 	.word	0x2003e7c8
   d5efc:	2003e7c4 	.word	0x2003e7c4
   d5f00:	2003e7c0 	.word	0x2003e7c0

000d5f04 <__aeabi_drsub>:
   d5f04:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d5f08:	e002      	b.n	d5f10 <__adddf3>
   d5f0a:	bf00      	nop

000d5f0c <__aeabi_dsub>:
   d5f0c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d5f10 <__adddf3>:
   d5f10:	b530      	push	{r4, r5, lr}
   d5f12:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d5f16:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d5f1a:	ea94 0f05 	teq	r4, r5
   d5f1e:	bf08      	it	eq
   d5f20:	ea90 0f02 	teqeq	r0, r2
   d5f24:	bf1f      	itttt	ne
   d5f26:	ea54 0c00 	orrsne.w	ip, r4, r0
   d5f2a:	ea55 0c02 	orrsne.w	ip, r5, r2
   d5f2e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d5f32:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d5f36:	f000 80e2 	beq.w	d60fe <__adddf3+0x1ee>
   d5f3a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d5f3e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d5f42:	bfb8      	it	lt
   d5f44:	426d      	neglt	r5, r5
   d5f46:	dd0c      	ble.n	d5f62 <__adddf3+0x52>
   d5f48:	442c      	add	r4, r5
   d5f4a:	ea80 0202 	eor.w	r2, r0, r2
   d5f4e:	ea81 0303 	eor.w	r3, r1, r3
   d5f52:	ea82 0000 	eor.w	r0, r2, r0
   d5f56:	ea83 0101 	eor.w	r1, r3, r1
   d5f5a:	ea80 0202 	eor.w	r2, r0, r2
   d5f5e:	ea81 0303 	eor.w	r3, r1, r3
   d5f62:	2d36      	cmp	r5, #54	; 0x36
   d5f64:	bf88      	it	hi
   d5f66:	bd30      	pophi	{r4, r5, pc}
   d5f68:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d5f6c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d5f70:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d5f74:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d5f78:	d002      	beq.n	d5f80 <__adddf3+0x70>
   d5f7a:	4240      	negs	r0, r0
   d5f7c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d5f80:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d5f84:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d5f88:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d5f8c:	d002      	beq.n	d5f94 <__adddf3+0x84>
   d5f8e:	4252      	negs	r2, r2
   d5f90:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d5f94:	ea94 0f05 	teq	r4, r5
   d5f98:	f000 80a7 	beq.w	d60ea <__adddf3+0x1da>
   d5f9c:	f1a4 0401 	sub.w	r4, r4, #1
   d5fa0:	f1d5 0e20 	rsbs	lr, r5, #32
   d5fa4:	db0d      	blt.n	d5fc2 <__adddf3+0xb2>
   d5fa6:	fa02 fc0e 	lsl.w	ip, r2, lr
   d5faa:	fa22 f205 	lsr.w	r2, r2, r5
   d5fae:	1880      	adds	r0, r0, r2
   d5fb0:	f141 0100 	adc.w	r1, r1, #0
   d5fb4:	fa03 f20e 	lsl.w	r2, r3, lr
   d5fb8:	1880      	adds	r0, r0, r2
   d5fba:	fa43 f305 	asr.w	r3, r3, r5
   d5fbe:	4159      	adcs	r1, r3
   d5fc0:	e00e      	b.n	d5fe0 <__adddf3+0xd0>
   d5fc2:	f1a5 0520 	sub.w	r5, r5, #32
   d5fc6:	f10e 0e20 	add.w	lr, lr, #32
   d5fca:	2a01      	cmp	r2, #1
   d5fcc:	fa03 fc0e 	lsl.w	ip, r3, lr
   d5fd0:	bf28      	it	cs
   d5fd2:	f04c 0c02 	orrcs.w	ip, ip, #2
   d5fd6:	fa43 f305 	asr.w	r3, r3, r5
   d5fda:	18c0      	adds	r0, r0, r3
   d5fdc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d5fe0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5fe4:	d507      	bpl.n	d5ff6 <__adddf3+0xe6>
   d5fe6:	f04f 0e00 	mov.w	lr, #0
   d5fea:	f1dc 0c00 	rsbs	ip, ip, #0
   d5fee:	eb7e 0000 	sbcs.w	r0, lr, r0
   d5ff2:	eb6e 0101 	sbc.w	r1, lr, r1
   d5ff6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d5ffa:	d31b      	bcc.n	d6034 <__adddf3+0x124>
   d5ffc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d6000:	d30c      	bcc.n	d601c <__adddf3+0x10c>
   d6002:	0849      	lsrs	r1, r1, #1
   d6004:	ea5f 0030 	movs.w	r0, r0, rrx
   d6008:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d600c:	f104 0401 	add.w	r4, r4, #1
   d6010:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d6014:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d6018:	f080 809a 	bcs.w	d6150 <__adddf3+0x240>
   d601c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d6020:	bf08      	it	eq
   d6022:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d6026:	f150 0000 	adcs.w	r0, r0, #0
   d602a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d602e:	ea41 0105 	orr.w	r1, r1, r5
   d6032:	bd30      	pop	{r4, r5, pc}
   d6034:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d6038:	4140      	adcs	r0, r0
   d603a:	eb41 0101 	adc.w	r1, r1, r1
   d603e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6042:	f1a4 0401 	sub.w	r4, r4, #1
   d6046:	d1e9      	bne.n	d601c <__adddf3+0x10c>
   d6048:	f091 0f00 	teq	r1, #0
   d604c:	bf04      	itt	eq
   d604e:	4601      	moveq	r1, r0
   d6050:	2000      	moveq	r0, #0
   d6052:	fab1 f381 	clz	r3, r1
   d6056:	bf08      	it	eq
   d6058:	3320      	addeq	r3, #32
   d605a:	f1a3 030b 	sub.w	r3, r3, #11
   d605e:	f1b3 0220 	subs.w	r2, r3, #32
   d6062:	da0c      	bge.n	d607e <__adddf3+0x16e>
   d6064:	320c      	adds	r2, #12
   d6066:	dd08      	ble.n	d607a <__adddf3+0x16a>
   d6068:	f102 0c14 	add.w	ip, r2, #20
   d606c:	f1c2 020c 	rsb	r2, r2, #12
   d6070:	fa01 f00c 	lsl.w	r0, r1, ip
   d6074:	fa21 f102 	lsr.w	r1, r1, r2
   d6078:	e00c      	b.n	d6094 <__adddf3+0x184>
   d607a:	f102 0214 	add.w	r2, r2, #20
   d607e:	bfd8      	it	le
   d6080:	f1c2 0c20 	rsble	ip, r2, #32
   d6084:	fa01 f102 	lsl.w	r1, r1, r2
   d6088:	fa20 fc0c 	lsr.w	ip, r0, ip
   d608c:	bfdc      	itt	le
   d608e:	ea41 010c 	orrle.w	r1, r1, ip
   d6092:	4090      	lslle	r0, r2
   d6094:	1ae4      	subs	r4, r4, r3
   d6096:	bfa2      	ittt	ge
   d6098:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d609c:	4329      	orrge	r1, r5
   d609e:	bd30      	popge	{r4, r5, pc}
   d60a0:	ea6f 0404 	mvn.w	r4, r4
   d60a4:	3c1f      	subs	r4, #31
   d60a6:	da1c      	bge.n	d60e2 <__adddf3+0x1d2>
   d60a8:	340c      	adds	r4, #12
   d60aa:	dc0e      	bgt.n	d60ca <__adddf3+0x1ba>
   d60ac:	f104 0414 	add.w	r4, r4, #20
   d60b0:	f1c4 0220 	rsb	r2, r4, #32
   d60b4:	fa20 f004 	lsr.w	r0, r0, r4
   d60b8:	fa01 f302 	lsl.w	r3, r1, r2
   d60bc:	ea40 0003 	orr.w	r0, r0, r3
   d60c0:	fa21 f304 	lsr.w	r3, r1, r4
   d60c4:	ea45 0103 	orr.w	r1, r5, r3
   d60c8:	bd30      	pop	{r4, r5, pc}
   d60ca:	f1c4 040c 	rsb	r4, r4, #12
   d60ce:	f1c4 0220 	rsb	r2, r4, #32
   d60d2:	fa20 f002 	lsr.w	r0, r0, r2
   d60d6:	fa01 f304 	lsl.w	r3, r1, r4
   d60da:	ea40 0003 	orr.w	r0, r0, r3
   d60de:	4629      	mov	r1, r5
   d60e0:	bd30      	pop	{r4, r5, pc}
   d60e2:	fa21 f004 	lsr.w	r0, r1, r4
   d60e6:	4629      	mov	r1, r5
   d60e8:	bd30      	pop	{r4, r5, pc}
   d60ea:	f094 0f00 	teq	r4, #0
   d60ee:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d60f2:	bf06      	itte	eq
   d60f4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d60f8:	3401      	addeq	r4, #1
   d60fa:	3d01      	subne	r5, #1
   d60fc:	e74e      	b.n	d5f9c <__adddf3+0x8c>
   d60fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d6102:	bf18      	it	ne
   d6104:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d6108:	d029      	beq.n	d615e <__adddf3+0x24e>
   d610a:	ea94 0f05 	teq	r4, r5
   d610e:	bf08      	it	eq
   d6110:	ea90 0f02 	teqeq	r0, r2
   d6114:	d005      	beq.n	d6122 <__adddf3+0x212>
   d6116:	ea54 0c00 	orrs.w	ip, r4, r0
   d611a:	bf04      	itt	eq
   d611c:	4619      	moveq	r1, r3
   d611e:	4610      	moveq	r0, r2
   d6120:	bd30      	pop	{r4, r5, pc}
   d6122:	ea91 0f03 	teq	r1, r3
   d6126:	bf1e      	ittt	ne
   d6128:	2100      	movne	r1, #0
   d612a:	2000      	movne	r0, #0
   d612c:	bd30      	popne	{r4, r5, pc}
   d612e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d6132:	d105      	bne.n	d6140 <__adddf3+0x230>
   d6134:	0040      	lsls	r0, r0, #1
   d6136:	4149      	adcs	r1, r1
   d6138:	bf28      	it	cs
   d613a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d613e:	bd30      	pop	{r4, r5, pc}
   d6140:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d6144:	bf3c      	itt	cc
   d6146:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d614a:	bd30      	popcc	{r4, r5, pc}
   d614c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6150:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d6154:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6158:	f04f 0000 	mov.w	r0, #0
   d615c:	bd30      	pop	{r4, r5, pc}
   d615e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d6162:	bf1a      	itte	ne
   d6164:	4619      	movne	r1, r3
   d6166:	4610      	movne	r0, r2
   d6168:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d616c:	bf1c      	itt	ne
   d616e:	460b      	movne	r3, r1
   d6170:	4602      	movne	r2, r0
   d6172:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d6176:	bf06      	itte	eq
   d6178:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d617c:	ea91 0f03 	teqeq	r1, r3
   d6180:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d6184:	bd30      	pop	{r4, r5, pc}
   d6186:	bf00      	nop

000d6188 <__aeabi_ui2d>:
   d6188:	f090 0f00 	teq	r0, #0
   d618c:	bf04      	itt	eq
   d618e:	2100      	moveq	r1, #0
   d6190:	4770      	bxeq	lr
   d6192:	b530      	push	{r4, r5, lr}
   d6194:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6198:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d619c:	f04f 0500 	mov.w	r5, #0
   d61a0:	f04f 0100 	mov.w	r1, #0
   d61a4:	e750      	b.n	d6048 <__adddf3+0x138>
   d61a6:	bf00      	nop

000d61a8 <__aeabi_i2d>:
   d61a8:	f090 0f00 	teq	r0, #0
   d61ac:	bf04      	itt	eq
   d61ae:	2100      	moveq	r1, #0
   d61b0:	4770      	bxeq	lr
   d61b2:	b530      	push	{r4, r5, lr}
   d61b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d61b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d61bc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d61c0:	bf48      	it	mi
   d61c2:	4240      	negmi	r0, r0
   d61c4:	f04f 0100 	mov.w	r1, #0
   d61c8:	e73e      	b.n	d6048 <__adddf3+0x138>
   d61ca:	bf00      	nop

000d61cc <__aeabi_f2d>:
   d61cc:	0042      	lsls	r2, r0, #1
   d61ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d61d2:	ea4f 0131 	mov.w	r1, r1, rrx
   d61d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d61da:	bf1f      	itttt	ne
   d61dc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d61e0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d61e4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d61e8:	4770      	bxne	lr
   d61ea:	f092 0f00 	teq	r2, #0
   d61ee:	bf14      	ite	ne
   d61f0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d61f4:	4770      	bxeq	lr
   d61f6:	b530      	push	{r4, r5, lr}
   d61f8:	f44f 7460 	mov.w	r4, #896	; 0x380
   d61fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6200:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6204:	e720      	b.n	d6048 <__adddf3+0x138>
   d6206:	bf00      	nop

000d6208 <__aeabi_ul2d>:
   d6208:	ea50 0201 	orrs.w	r2, r0, r1
   d620c:	bf08      	it	eq
   d620e:	4770      	bxeq	lr
   d6210:	b530      	push	{r4, r5, lr}
   d6212:	f04f 0500 	mov.w	r5, #0
   d6216:	e00a      	b.n	d622e <__aeabi_l2d+0x16>

000d6218 <__aeabi_l2d>:
   d6218:	ea50 0201 	orrs.w	r2, r0, r1
   d621c:	bf08      	it	eq
   d621e:	4770      	bxeq	lr
   d6220:	b530      	push	{r4, r5, lr}
   d6222:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d6226:	d502      	bpl.n	d622e <__aeabi_l2d+0x16>
   d6228:	4240      	negs	r0, r0
   d622a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d622e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6232:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6236:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d623a:	f43f aedc 	beq.w	d5ff6 <__adddf3+0xe6>
   d623e:	f04f 0203 	mov.w	r2, #3
   d6242:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d6246:	bf18      	it	ne
   d6248:	3203      	addne	r2, #3
   d624a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d624e:	bf18      	it	ne
   d6250:	3203      	addne	r2, #3
   d6252:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d6256:	f1c2 0320 	rsb	r3, r2, #32
   d625a:	fa00 fc03 	lsl.w	ip, r0, r3
   d625e:	fa20 f002 	lsr.w	r0, r0, r2
   d6262:	fa01 fe03 	lsl.w	lr, r1, r3
   d6266:	ea40 000e 	orr.w	r0, r0, lr
   d626a:	fa21 f102 	lsr.w	r1, r1, r2
   d626e:	4414      	add	r4, r2
   d6270:	e6c1      	b.n	d5ff6 <__adddf3+0xe6>
   d6272:	bf00      	nop

000d6274 <__aeabi_dmul>:
   d6274:	b570      	push	{r4, r5, r6, lr}
   d6276:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d627a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d627e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6282:	bf1d      	ittte	ne
   d6284:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6288:	ea94 0f0c 	teqne	r4, ip
   d628c:	ea95 0f0c 	teqne	r5, ip
   d6290:	f000 f8de 	bleq	d6450 <__aeabi_dmul+0x1dc>
   d6294:	442c      	add	r4, r5
   d6296:	ea81 0603 	eor.w	r6, r1, r3
   d629a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d629e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d62a2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d62a6:	bf18      	it	ne
   d62a8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d62ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d62b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d62b4:	d038      	beq.n	d6328 <__aeabi_dmul+0xb4>
   d62b6:	fba0 ce02 	umull	ip, lr, r0, r2
   d62ba:	f04f 0500 	mov.w	r5, #0
   d62be:	fbe1 e502 	umlal	lr, r5, r1, r2
   d62c2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d62c6:	fbe0 e503 	umlal	lr, r5, r0, r3
   d62ca:	f04f 0600 	mov.w	r6, #0
   d62ce:	fbe1 5603 	umlal	r5, r6, r1, r3
   d62d2:	f09c 0f00 	teq	ip, #0
   d62d6:	bf18      	it	ne
   d62d8:	f04e 0e01 	orrne.w	lr, lr, #1
   d62dc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d62e0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d62e4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d62e8:	d204      	bcs.n	d62f4 <__aeabi_dmul+0x80>
   d62ea:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d62ee:	416d      	adcs	r5, r5
   d62f0:	eb46 0606 	adc.w	r6, r6, r6
   d62f4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d62f8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d62fc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d6300:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d6304:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d6308:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d630c:	bf88      	it	hi
   d630e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d6312:	d81e      	bhi.n	d6352 <__aeabi_dmul+0xde>
   d6314:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d6318:	bf08      	it	eq
   d631a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d631e:	f150 0000 	adcs.w	r0, r0, #0
   d6322:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6326:	bd70      	pop	{r4, r5, r6, pc}
   d6328:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d632c:	ea46 0101 	orr.w	r1, r6, r1
   d6330:	ea40 0002 	orr.w	r0, r0, r2
   d6334:	ea81 0103 	eor.w	r1, r1, r3
   d6338:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d633c:	bfc2      	ittt	gt
   d633e:	ebd4 050c 	rsbsgt	r5, r4, ip
   d6342:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d6346:	bd70      	popgt	{r4, r5, r6, pc}
   d6348:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d634c:	f04f 0e00 	mov.w	lr, #0
   d6350:	3c01      	subs	r4, #1
   d6352:	f300 80ab 	bgt.w	d64ac <__aeabi_dmul+0x238>
   d6356:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d635a:	bfde      	ittt	le
   d635c:	2000      	movle	r0, #0
   d635e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d6362:	bd70      	pople	{r4, r5, r6, pc}
   d6364:	f1c4 0400 	rsb	r4, r4, #0
   d6368:	3c20      	subs	r4, #32
   d636a:	da35      	bge.n	d63d8 <__aeabi_dmul+0x164>
   d636c:	340c      	adds	r4, #12
   d636e:	dc1b      	bgt.n	d63a8 <__aeabi_dmul+0x134>
   d6370:	f104 0414 	add.w	r4, r4, #20
   d6374:	f1c4 0520 	rsb	r5, r4, #32
   d6378:	fa00 f305 	lsl.w	r3, r0, r5
   d637c:	fa20 f004 	lsr.w	r0, r0, r4
   d6380:	fa01 f205 	lsl.w	r2, r1, r5
   d6384:	ea40 0002 	orr.w	r0, r0, r2
   d6388:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d638c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6390:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6394:	fa21 f604 	lsr.w	r6, r1, r4
   d6398:	eb42 0106 	adc.w	r1, r2, r6
   d639c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d63a0:	bf08      	it	eq
   d63a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d63a6:	bd70      	pop	{r4, r5, r6, pc}
   d63a8:	f1c4 040c 	rsb	r4, r4, #12
   d63ac:	f1c4 0520 	rsb	r5, r4, #32
   d63b0:	fa00 f304 	lsl.w	r3, r0, r4
   d63b4:	fa20 f005 	lsr.w	r0, r0, r5
   d63b8:	fa01 f204 	lsl.w	r2, r1, r4
   d63bc:	ea40 0002 	orr.w	r0, r0, r2
   d63c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d63c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d63c8:	f141 0100 	adc.w	r1, r1, #0
   d63cc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d63d0:	bf08      	it	eq
   d63d2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d63d6:	bd70      	pop	{r4, r5, r6, pc}
   d63d8:	f1c4 0520 	rsb	r5, r4, #32
   d63dc:	fa00 f205 	lsl.w	r2, r0, r5
   d63e0:	ea4e 0e02 	orr.w	lr, lr, r2
   d63e4:	fa20 f304 	lsr.w	r3, r0, r4
   d63e8:	fa01 f205 	lsl.w	r2, r1, r5
   d63ec:	ea43 0302 	orr.w	r3, r3, r2
   d63f0:	fa21 f004 	lsr.w	r0, r1, r4
   d63f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d63f8:	fa21 f204 	lsr.w	r2, r1, r4
   d63fc:	ea20 0002 	bic.w	r0, r0, r2
   d6400:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d6404:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6408:	bf08      	it	eq
   d640a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d640e:	bd70      	pop	{r4, r5, r6, pc}
   d6410:	f094 0f00 	teq	r4, #0
   d6414:	d10f      	bne.n	d6436 <__aeabi_dmul+0x1c2>
   d6416:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d641a:	0040      	lsls	r0, r0, #1
   d641c:	eb41 0101 	adc.w	r1, r1, r1
   d6420:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6424:	bf08      	it	eq
   d6426:	3c01      	subeq	r4, #1
   d6428:	d0f7      	beq.n	d641a <__aeabi_dmul+0x1a6>
   d642a:	ea41 0106 	orr.w	r1, r1, r6
   d642e:	f095 0f00 	teq	r5, #0
   d6432:	bf18      	it	ne
   d6434:	4770      	bxne	lr
   d6436:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d643a:	0052      	lsls	r2, r2, #1
   d643c:	eb43 0303 	adc.w	r3, r3, r3
   d6440:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d6444:	bf08      	it	eq
   d6446:	3d01      	subeq	r5, #1
   d6448:	d0f7      	beq.n	d643a <__aeabi_dmul+0x1c6>
   d644a:	ea43 0306 	orr.w	r3, r3, r6
   d644e:	4770      	bx	lr
   d6450:	ea94 0f0c 	teq	r4, ip
   d6454:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d6458:	bf18      	it	ne
   d645a:	ea95 0f0c 	teqne	r5, ip
   d645e:	d00c      	beq.n	d647a <__aeabi_dmul+0x206>
   d6460:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6464:	bf18      	it	ne
   d6466:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d646a:	d1d1      	bne.n	d6410 <__aeabi_dmul+0x19c>
   d646c:	ea81 0103 	eor.w	r1, r1, r3
   d6470:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6474:	f04f 0000 	mov.w	r0, #0
   d6478:	bd70      	pop	{r4, r5, r6, pc}
   d647a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d647e:	bf06      	itte	eq
   d6480:	4610      	moveq	r0, r2
   d6482:	4619      	moveq	r1, r3
   d6484:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6488:	d019      	beq.n	d64be <__aeabi_dmul+0x24a>
   d648a:	ea94 0f0c 	teq	r4, ip
   d648e:	d102      	bne.n	d6496 <__aeabi_dmul+0x222>
   d6490:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d6494:	d113      	bne.n	d64be <__aeabi_dmul+0x24a>
   d6496:	ea95 0f0c 	teq	r5, ip
   d649a:	d105      	bne.n	d64a8 <__aeabi_dmul+0x234>
   d649c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d64a0:	bf1c      	itt	ne
   d64a2:	4610      	movne	r0, r2
   d64a4:	4619      	movne	r1, r3
   d64a6:	d10a      	bne.n	d64be <__aeabi_dmul+0x24a>
   d64a8:	ea81 0103 	eor.w	r1, r1, r3
   d64ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d64b0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d64b4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d64b8:	f04f 0000 	mov.w	r0, #0
   d64bc:	bd70      	pop	{r4, r5, r6, pc}
   d64be:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d64c2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d64c6:	bd70      	pop	{r4, r5, r6, pc}

000d64c8 <__aeabi_ddiv>:
   d64c8:	b570      	push	{r4, r5, r6, lr}
   d64ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d64ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d64d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d64d6:	bf1d      	ittte	ne
   d64d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d64dc:	ea94 0f0c 	teqne	r4, ip
   d64e0:	ea95 0f0c 	teqne	r5, ip
   d64e4:	f000 f8a7 	bleq	d6636 <__aeabi_ddiv+0x16e>
   d64e8:	eba4 0405 	sub.w	r4, r4, r5
   d64ec:	ea81 0e03 	eor.w	lr, r1, r3
   d64f0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d64f4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d64f8:	f000 8088 	beq.w	d660c <__aeabi_ddiv+0x144>
   d64fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6500:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d6504:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d6508:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d650c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d6510:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d6514:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d6518:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d651c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d6520:	429d      	cmp	r5, r3
   d6522:	bf08      	it	eq
   d6524:	4296      	cmpeq	r6, r2
   d6526:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d652a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d652e:	d202      	bcs.n	d6536 <__aeabi_ddiv+0x6e>
   d6530:	085b      	lsrs	r3, r3, #1
   d6532:	ea4f 0232 	mov.w	r2, r2, rrx
   d6536:	1ab6      	subs	r6, r6, r2
   d6538:	eb65 0503 	sbc.w	r5, r5, r3
   d653c:	085b      	lsrs	r3, r3, #1
   d653e:	ea4f 0232 	mov.w	r2, r2, rrx
   d6542:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d6546:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d654a:	ebb6 0e02 	subs.w	lr, r6, r2
   d654e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6552:	bf22      	ittt	cs
   d6554:	1ab6      	subcs	r6, r6, r2
   d6556:	4675      	movcs	r5, lr
   d6558:	ea40 000c 	orrcs.w	r0, r0, ip
   d655c:	085b      	lsrs	r3, r3, #1
   d655e:	ea4f 0232 	mov.w	r2, r2, rrx
   d6562:	ebb6 0e02 	subs.w	lr, r6, r2
   d6566:	eb75 0e03 	sbcs.w	lr, r5, r3
   d656a:	bf22      	ittt	cs
   d656c:	1ab6      	subcs	r6, r6, r2
   d656e:	4675      	movcs	r5, lr
   d6570:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d6574:	085b      	lsrs	r3, r3, #1
   d6576:	ea4f 0232 	mov.w	r2, r2, rrx
   d657a:	ebb6 0e02 	subs.w	lr, r6, r2
   d657e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6582:	bf22      	ittt	cs
   d6584:	1ab6      	subcs	r6, r6, r2
   d6586:	4675      	movcs	r5, lr
   d6588:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d658c:	085b      	lsrs	r3, r3, #1
   d658e:	ea4f 0232 	mov.w	r2, r2, rrx
   d6592:	ebb6 0e02 	subs.w	lr, r6, r2
   d6596:	eb75 0e03 	sbcs.w	lr, r5, r3
   d659a:	bf22      	ittt	cs
   d659c:	1ab6      	subcs	r6, r6, r2
   d659e:	4675      	movcs	r5, lr
   d65a0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d65a4:	ea55 0e06 	orrs.w	lr, r5, r6
   d65a8:	d018      	beq.n	d65dc <__aeabi_ddiv+0x114>
   d65aa:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d65ae:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d65b2:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d65b6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d65ba:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d65be:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d65c2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d65c6:	d1c0      	bne.n	d654a <__aeabi_ddiv+0x82>
   d65c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d65cc:	d10b      	bne.n	d65e6 <__aeabi_ddiv+0x11e>
   d65ce:	ea41 0100 	orr.w	r1, r1, r0
   d65d2:	f04f 0000 	mov.w	r0, #0
   d65d6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d65da:	e7b6      	b.n	d654a <__aeabi_ddiv+0x82>
   d65dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d65e0:	bf04      	itt	eq
   d65e2:	4301      	orreq	r1, r0
   d65e4:	2000      	moveq	r0, #0
   d65e6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d65ea:	bf88      	it	hi
   d65ec:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d65f0:	f63f aeaf 	bhi.w	d6352 <__aeabi_dmul+0xde>
   d65f4:	ebb5 0c03 	subs.w	ip, r5, r3
   d65f8:	bf04      	itt	eq
   d65fa:	ebb6 0c02 	subseq.w	ip, r6, r2
   d65fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d6602:	f150 0000 	adcs.w	r0, r0, #0
   d6606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d660a:	bd70      	pop	{r4, r5, r6, pc}
   d660c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d6610:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d6614:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d6618:	bfc2      	ittt	gt
   d661a:	ebd4 050c 	rsbsgt	r5, r4, ip
   d661e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d6622:	bd70      	popgt	{r4, r5, r6, pc}
   d6624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6628:	f04f 0e00 	mov.w	lr, #0
   d662c:	3c01      	subs	r4, #1
   d662e:	e690      	b.n	d6352 <__aeabi_dmul+0xde>
   d6630:	ea45 0e06 	orr.w	lr, r5, r6
   d6634:	e68d      	b.n	d6352 <__aeabi_dmul+0xde>
   d6636:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d663a:	ea94 0f0c 	teq	r4, ip
   d663e:	bf08      	it	eq
   d6640:	ea95 0f0c 	teqeq	r5, ip
   d6644:	f43f af3b 	beq.w	d64be <__aeabi_dmul+0x24a>
   d6648:	ea94 0f0c 	teq	r4, ip
   d664c:	d10a      	bne.n	d6664 <__aeabi_ddiv+0x19c>
   d664e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d6652:	f47f af34 	bne.w	d64be <__aeabi_dmul+0x24a>
   d6656:	ea95 0f0c 	teq	r5, ip
   d665a:	f47f af25 	bne.w	d64a8 <__aeabi_dmul+0x234>
   d665e:	4610      	mov	r0, r2
   d6660:	4619      	mov	r1, r3
   d6662:	e72c      	b.n	d64be <__aeabi_dmul+0x24a>
   d6664:	ea95 0f0c 	teq	r5, ip
   d6668:	d106      	bne.n	d6678 <__aeabi_ddiv+0x1b0>
   d666a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d666e:	f43f aefd 	beq.w	d646c <__aeabi_dmul+0x1f8>
   d6672:	4610      	mov	r0, r2
   d6674:	4619      	mov	r1, r3
   d6676:	e722      	b.n	d64be <__aeabi_dmul+0x24a>
   d6678:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d667c:	bf18      	it	ne
   d667e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6682:	f47f aec5 	bne.w	d6410 <__aeabi_dmul+0x19c>
   d6686:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d668a:	f47f af0d 	bne.w	d64a8 <__aeabi_dmul+0x234>
   d668e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d6692:	f47f aeeb 	bne.w	d646c <__aeabi_dmul+0x1f8>
   d6696:	e712      	b.n	d64be <__aeabi_dmul+0x24a>

000d6698 <__aeabi_d2f>:
   d6698:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d669c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d66a0:	bf24      	itt	cs
   d66a2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d66a6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d66aa:	d90d      	bls.n	d66c8 <__aeabi_d2f+0x30>
   d66ac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d66b0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d66b4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d66b8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d66bc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d66c0:	bf08      	it	eq
   d66c2:	f020 0001 	biceq.w	r0, r0, #1
   d66c6:	4770      	bx	lr
   d66c8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d66cc:	d121      	bne.n	d6712 <__aeabi_d2f+0x7a>
   d66ce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d66d2:	bfbc      	itt	lt
   d66d4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d66d8:	4770      	bxlt	lr
   d66da:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d66de:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d66e2:	f1c2 0218 	rsb	r2, r2, #24
   d66e6:	f1c2 0c20 	rsb	ip, r2, #32
   d66ea:	fa10 f30c 	lsls.w	r3, r0, ip
   d66ee:	fa20 f002 	lsr.w	r0, r0, r2
   d66f2:	bf18      	it	ne
   d66f4:	f040 0001 	orrne.w	r0, r0, #1
   d66f8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d66fc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d6700:	fa03 fc0c 	lsl.w	ip, r3, ip
   d6704:	ea40 000c 	orr.w	r0, r0, ip
   d6708:	fa23 f302 	lsr.w	r3, r3, r2
   d670c:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d6710:	e7cc      	b.n	d66ac <__aeabi_d2f+0x14>
   d6712:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d6716:	d107      	bne.n	d6728 <__aeabi_d2f+0x90>
   d6718:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d671c:	bf1e      	ittt	ne
   d671e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d6722:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d6726:	4770      	bxne	lr
   d6728:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d672c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d6730:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d6734:	4770      	bx	lr
   d6736:	bf00      	nop

000d6738 <__cxa_atexit>:
   d6738:	b510      	push	{r4, lr}
   d673a:	4c05      	ldr	r4, [pc, #20]	; (d6750 <__cxa_atexit+0x18>)
   d673c:	4613      	mov	r3, r2
   d673e:	b12c      	cbz	r4, d674c <__cxa_atexit+0x14>
   d6740:	460a      	mov	r2, r1
   d6742:	4601      	mov	r1, r0
   d6744:	2002      	movs	r0, #2
   d6746:	f3af 8000 	nop.w
   d674a:	bd10      	pop	{r4, pc}
   d674c:	4620      	mov	r0, r4
   d674e:	bd10      	pop	{r4, pc}
   d6750:	00000000 	.word	0x00000000

000d6754 <memcpy>:
   d6754:	b510      	push	{r4, lr}
   d6756:	1e43      	subs	r3, r0, #1
   d6758:	440a      	add	r2, r1
   d675a:	4291      	cmp	r1, r2
   d675c:	d004      	beq.n	d6768 <memcpy+0x14>
   d675e:	f811 4b01 	ldrb.w	r4, [r1], #1
   d6762:	f803 4f01 	strb.w	r4, [r3, #1]!
   d6766:	e7f8      	b.n	d675a <memcpy+0x6>
   d6768:	bd10      	pop	{r4, pc}

000d676a <memset>:
   d676a:	4402      	add	r2, r0
   d676c:	4603      	mov	r3, r0
   d676e:	4293      	cmp	r3, r2
   d6770:	d002      	beq.n	d6778 <memset+0xe>
   d6772:	f803 1b01 	strb.w	r1, [r3], #1
   d6776:	e7fa      	b.n	d676e <memset+0x4>
   d6778:	4770      	bx	lr
	...

000d677c <srand>:
   d677c:	b538      	push	{r3, r4, r5, lr}
   d677e:	4b12      	ldr	r3, [pc, #72]	; (d67c8 <srand+0x4c>)
   d6780:	681c      	ldr	r4, [r3, #0]
   d6782:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6784:	4605      	mov	r5, r0
   d6786:	b9d3      	cbnz	r3, d67be <srand+0x42>
   d6788:	2018      	movs	r0, #24
   d678a:	f7fe f899 	bl	d48c0 <malloc>
   d678e:	f243 330e 	movw	r3, #13070	; 0x330e
   d6792:	63a0      	str	r0, [r4, #56]	; 0x38
   d6794:	8003      	strh	r3, [r0, #0]
   d6796:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d679a:	8043      	strh	r3, [r0, #2]
   d679c:	f241 2334 	movw	r3, #4660	; 0x1234
   d67a0:	8083      	strh	r3, [r0, #4]
   d67a2:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d67a6:	80c3      	strh	r3, [r0, #6]
   d67a8:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d67ac:	8103      	strh	r3, [r0, #8]
   d67ae:	2305      	movs	r3, #5
   d67b0:	8143      	strh	r3, [r0, #10]
   d67b2:	230b      	movs	r3, #11
   d67b4:	8183      	strh	r3, [r0, #12]
   d67b6:	2201      	movs	r2, #1
   d67b8:	2300      	movs	r3, #0
   d67ba:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d67be:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d67c0:	2200      	movs	r2, #0
   d67c2:	611d      	str	r5, [r3, #16]
   d67c4:	615a      	str	r2, [r3, #20]
   d67c6:	bd38      	pop	{r3, r4, r5, pc}
   d67c8:	2003e3b0 	.word	0x2003e3b0

000d67cc <strcpy>:
   d67cc:	4603      	mov	r3, r0
   d67ce:	f811 2b01 	ldrb.w	r2, [r1], #1
   d67d2:	f803 2b01 	strb.w	r2, [r3], #1
   d67d6:	2a00      	cmp	r2, #0
   d67d8:	d1f9      	bne.n	d67ce <strcpy+0x2>
   d67da:	4770      	bx	lr

000d67dc <strdup>:
   d67dc:	4b02      	ldr	r3, [pc, #8]	; (d67e8 <strdup+0xc>)
   d67de:	4601      	mov	r1, r0
   d67e0:	6818      	ldr	r0, [r3, #0]
   d67e2:	f000 b803 	b.w	d67ec <_strdup_r>
   d67e6:	bf00      	nop
   d67e8:	2003e3b0 	.word	0x2003e3b0

000d67ec <_strdup_r>:
   d67ec:	b570      	push	{r4, r5, r6, lr}
   d67ee:	4606      	mov	r6, r0
   d67f0:	4608      	mov	r0, r1
   d67f2:	460c      	mov	r4, r1
   d67f4:	f000 f80d 	bl	d6812 <strlen>
   d67f8:	1c45      	adds	r5, r0, #1
   d67fa:	4629      	mov	r1, r5
   d67fc:	4630      	mov	r0, r6
   d67fe:	f7fe f87f 	bl	d4900 <_malloc_r>
   d6802:	4606      	mov	r6, r0
   d6804:	b118      	cbz	r0, d680e <_strdup_r+0x22>
   d6806:	462a      	mov	r2, r5
   d6808:	4621      	mov	r1, r4
   d680a:	f7ff ffa3 	bl	d6754 <memcpy>
   d680e:	4630      	mov	r0, r6
   d6810:	bd70      	pop	{r4, r5, r6, pc}

000d6812 <strlen>:
   d6812:	4603      	mov	r3, r0
   d6814:	f813 2b01 	ldrb.w	r2, [r3], #1
   d6818:	2a00      	cmp	r2, #0
   d681a:	d1fb      	bne.n	d6814 <strlen+0x2>
   d681c:	1a18      	subs	r0, r3, r0
   d681e:	3801      	subs	r0, #1
   d6820:	4770      	bx	lr

000d6822 <link_code_end>:
	...

000d6824 <dynalib_user>:
   d6824:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   d6834:	0000 0000                                   ....

000d6838 <_ZTV10JFieldBase>:
	...
   d6840:	40a9 000d 0000 0000 0000 0000               .@..........

000d684c <_ZTV6JFieldIfE>:
	...
   d6854:	4295 000d 42dd 000d 42f1 000d 007d 2522     .B...B...B..}."%
   d6864:	2273 203a 2e25 6632 2200 7325 3a22 2520     s": %.2f."%s": %
   d6874:	0069 2522 2273 203a 6c25 0075 6574 706d     i."%s": %lu.temp
   d6884:	7265 7461 7275 0065 7568 696d 6964 7974     erature.humidity
   d6894:	7600 6c6f 6174 6567 6100 626d 6569 636e     .voltage.ambienc
   d68a4:	2f65 6963 6167 6272 786f 0000               e/cigarbox..

000d68b0 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d68b8:	49bd 000d 49c3 000d 4a19 000d 49d1 000d     .I...I...J...I..
   d68c8:	49bf 000d                                   .I..

000d68cc <_ZTVN5spark13EthernetClassE>:
	...
   d68d4:	4fd3 000d 4fc9 000d 4fbf 000d 4fb5 000d     .O...O...O...O..
   d68e4:	4fa9 000d 4f9d 000d 4f91 000d 4f89 000d     .O...O...O...O..
   d68f4:	4f7f 000d 4f75 000d 53d9 000d               .O..uO...S..

000d6900 <_ZTV7TwoWire>:
	...
   d6908:	4ff1 000d 503b 000d 5013 000d 4ff3 000d     .O..;P...P...O..
   d6918:	501b 000d 5023 000d 502b 000d 5033 000d     .P..#P..+P..3P..

000d6928 <_ZTV9IPAddress>:
	...
   d6930:	510f 000d 50ff 000d 5101 000d 6162 6475     .Q...P...Q..baud
   d6940:	5300 7265 6169 006c 6553 6972 6c61 0031     .Serial.Serial1.
   d6950:	7974 6570 7000 7261 6d61 6300 646d 6900     type.param.cmd.i
   d6960:	0064 6e68 0064 7473 6d72 6600 6c69 0074     d.hnd.strm.filt.
   d6970:	766c 006c 6461 4864 6e61 6c64 7265 7200     lvl.addHandler.r
   d6980:	6d65 766f 4865 6e61 6c64 7265 6500 756e     emoveHandler.enu
   d6990:	486d 6e61 6c64 7265 0073 534a 4e4f 7453     mHandlers.JSONSt
   d69a0:	6572 6d61 6f4c 4867 6e61 6c64 7265 6100     reamLogHandler.a
   d69b0:	7070 2500 3130 7530 0020 205d 2500 0064     pp.%010u .] .%d.
   d69c0:	202c 2800 3a29 0020 5b20 6300 646f 2065     , .(): . [.code 
   d69d0:	203d 6400 7465 6961 736c 3d20 0020 0a0d     = .details = ...
   d69e0:	6c00 006e 6e66 6300 646f 0065 6564 6174     .ln.fn.code.deta
   d69f0:	6c69 6e00 6e6f 0065 7274 6361 0065 6e69     il.none.trace.in
   d6a00:	6f66 7700 7261 006e 7265 6f72 0072 6170     fo.warn.error.pa
   d6a10:	696e 0063 6c61 006c                         nic.all.

000d6a18 <_ZTVN5spark9MeshClassE>:
	...
   d6a20:	5253 000d 5249 000d 523f 000d 5235 000d     SR..IR..?R..5R..
   d6a30:	5229 000d 521d 000d 5211 000d 5209 000d     )R...R...R...R..
   d6a40:	51ff 000d 51f5 000d 53d9 000d               .Q...Q...S..

000d6a4c <_ZTVN5spark12NetworkClassE>:
	...
   d6a54:	5371 000d 537b 000d 5385 000d 538f 000d     qS..{S...S...S..
   d6a64:	5399 000d 53a5 000d 53b1 000d 53bd 000d     .S...S...S...S..
   d6a74:	53c5 000d 53cf 000d 53d9 000d               .S...S...S..

000d6a80 <_ZTV8SPIClass>:
	...
   d6a88:	55a1 000d 55a3 000d 6977 6972 676e 5300     .U...U..wiring.S
   d6a98:	7379 6574 206d 6c73 6565 2070 6f63 666e     ystem sleep conf
   d6aa8:	6769 7275 7461 6f69 206e 7369 6920 766e     iguration is inv
   d6ab8:	6c61 6469 002e 005a 2b25 3330 3a64 3025     alid..Z.%+03d:%0
   d6ac8:	7532 2500 2d59 6d25 252d 5464 4825 253a     2u.%Y-%m-%dT%H:%
   d6ad8:	3a4d 5325 7a25 6100 6373 6974 656d 0000     M:%S%z.asctime..

000d6ae8 <_ZTV11USARTSerial>:
	...
   d6af0:	5761 000d 57b1 000d 57bf 000d 54b9 000d     aW...W...W...T..
   d6b00:	5775 000d 5797 000d 5783 000d 57ab 000d     uW...W...W...W..
   d6b10:	5763 000d 5767 000d                         cW..gW..

000d6b18 <_ZTV9USBSerial>:
	...
   d6b20:	5869 000d 58b9 000d 58c7 000d 54b9 000d     iX...X...X...T..
   d6b30:	58a5 000d 586b 000d 5881 000d 58b3 000d     .X..kX...X...X..
   d6b40:	5897 000d 5865 000d                         .X..eX..

000d6b48 <_ZTVN5spark9WiFiClassE>:
	...
   d6b50:	59cb 000d 59c1 000d 59b7 000d 596d 000d     .Y...Y...Y..mY..
   d6b60:	59ab 000d 599f 000d 5993 000d 598b 000d     .Y...Y...Y...Y..
   d6b70:	5981 000d 5977 000d 53d9 000d               .Y..wY...S..

000d6b7c <_ZSt7nothrow>:
   d6b7c:	0000 0000                                   ....

000d6b80 <__sf_fake_stdin>:
	...

000d6ba0 <__sf_fake_stdout>:
	...

000d6bc0 <__sf_fake_stderr>:
	...
   d6be0:	0043                                        C.

000d6be2 <link_const_variable_data_end>:
	...

000d6be4 <link_constructors_location>:
   d6be4:	000d4271 	.word	0x000d4271
   d6be8:	000d44a1 	.word	0x000d44a1
   d6bec:	000d4995 	.word	0x000d4995
   d6bf0:	000d4fdd 	.word	0x000d4fdd
   d6bf4:	000d51e5 	.word	0x000d51e5
   d6bf8:	000d5321 	.word	0x000d5321
   d6bfc:	000d54a5 	.word	0x000d54a5
   d6c00:	000d5585 	.word	0x000d5585
   d6c04:	000d5719 	.word	0x000d5719
   d6c08:	000d574d 	.word	0x000d574d
   d6c0c:	000d59d5 	.word	0x000d59d5
   d6c10:	000d5c75 	.word	0x000d5c75
   d6c14:	000d5d39 	.word	0x000d5d39
   d6c18:	000d5dbd 	.word	0x000d5dbd
   d6c1c:	000d5e41 	.word	0x000d5e41

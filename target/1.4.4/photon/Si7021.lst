
/Users/dirkhesse/code/Si7021/target/1.4.4/photon/Si7021.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002620  080a0020  080a0020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a2640  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000068  20000000  080a2644  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000058c  20000068  20000068  00030068  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a26ac  080a26ac  000226ac  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a26d4  080a26d4  000226d4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000951e5  00000000  00000000  000226d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000dacf  00000000  00000000  000b78bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000f463  00000000  00000000  000c538c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001ae0  00000000  00000000  000d47ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00002a78  00000000  00000000  000d62cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000239f1  00000000  00000000  000d8d47  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0001f9fa  00000000  00000000  000fc738  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000a731c  00000000  00000000  0011c132  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000a8f4  00000000  00000000  001c3450  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0020:	4809      	ldr	r0, [pc, #36]	; (80a0048 <module_user_pre_init+0x28>)
 80a0022:	490a      	ldr	r1, [pc, #40]	; (80a004c <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0024:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0026:	4288      	cmp	r0, r1
 80a0028:	d005      	beq.n	80a0036 <module_user_pre_init+0x16>
 80a002a:	4a09      	ldr	r2, [pc, #36]	; (80a0050 <module_user_pre_init+0x30>)
 80a002c:	4282      	cmp	r2, r0
 80a002e:	d002      	beq.n	80a0036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a0030:	1a12      	subs	r2, r2, r0
 80a0032:	f002 f943 	bl	80a22bc <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0036:	4807      	ldr	r0, [pc, #28]	; (80a0054 <module_user_pre_init+0x34>)
 80a0038:	4a07      	ldr	r2, [pc, #28]	; (80a0058 <module_user_pre_init+0x38>)
 80a003a:	2100      	movs	r1, #0
 80a003c:	1a12      	subs	r2, r2, r0
 80a003e:	f002 f948 	bl	80a22d2 <memset>
    return &link_heap_start;
}
 80a0042:	4806      	ldr	r0, [pc, #24]	; (80a005c <module_user_pre_init+0x3c>)
 80a0044:	bd08      	pop	{r3, pc}
 80a0046:	bf00      	nop
 80a0048:	20000000 	.word	0x20000000
 80a004c:	080a2644 	.word	0x080a2644
 80a0050:	20000068 	.word	0x20000068
 80a0054:	20000068 	.word	0x20000068
 80a0058:	200005f4 	.word	0x200005f4
 80a005c:	200005f4 	.word	0x200005f4

080a0060 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a0060:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a0062:	f000 ff73 	bl	80a0f4c <module_user_init_hook>
 80a0066:	4b07      	ldr	r3, [pc, #28]	; (80a0084 <module_user_init+0x24>)
 80a0068:	4c07      	ldr	r4, [pc, #28]	; (80a0088 <module_user_init+0x28>)
 80a006a:	461e      	mov	r6, r3
 80a006c:	1ae4      	subs	r4, r4, r3
 80a006e:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0070:	2500      	movs	r5, #0
 80a0072:	42a5      	cmp	r5, r4
 80a0074:	d004      	beq.n	80a0080 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0076:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a007a:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a007c:	3501      	adds	r5, #1
 80a007e:	e7f8      	b.n	80a0072 <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0080:	bd70      	pop	{r4, r5, r6, pc}
 80a0082:	bf00      	nop
 80a0084:	080a2600 	.word	0x080a2600
 80a0088:	080a2638 	.word	0x080a2638

080a008c <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a008c:	f000 b8d8 	b.w	80a0240 <setup>

080a0090 <module_user_loop>:
}

void module_user_loop() {
 80a0090:	b508      	push	{r3, lr}
    loop();
 80a0092:	f000 f901 	bl	80a0298 <loop>
    _post_loop();
}
 80a0096:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a009a:	f000 bf19 	b.w	80a0ed0 <_post_loop>

080a009e <_ZdlPv>:
 80a009e:	f000 ba65 	b.w	80a056c <free>

080a00a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a2:	7800      	ldrb	r0, [r0, #0]
 80a00a4:	fab0 f080 	clz	r0, r0
 80a00a8:	0940      	lsrs	r0, r0, #5
 80a00aa:	4770      	bx	lr

080a00ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00ac:	2301      	movs	r3, #1
 80a00ae:	7003      	strb	r3, [r0, #0]
 80a00b0:	4770      	bx	lr

080a00b2 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
 80a00b2:	6803      	ldr	r3, [r0, #0]
 80a00b4:	b2c9      	uxtb	r1, r1
 80a00b6:	689b      	ldr	r3, [r3, #8]
 80a00b8:	4718      	bx	r3

080a00ba <_ZN15Adafruit_Si7021C1EP7TwoWire>:
 *  @brief  Instantiates a new Adafruit_Si7021 class
 *  @param  *theWire
 *          optional wire object
 */
Adafruit_Si7021::Adafruit_Si7021(TwoWire *theWire) {
  _i2caddr = SI7021_DEFAULT_ADDRESS;
 80a00ba:	2240      	movs	r2, #64	; 0x40
 80a00bc:	7282      	strb	r2, [r0, #10]
  _wire = theWire;
 80a00be:	60c1      	str	r1, [r0, #12]
  sernum_a = sernum_b = 0;
 80a00c0:	2200      	movs	r2, #0
  _model = SI_7021;
 80a00c2:	2103      	movs	r1, #3
 *          optional wire object
 */
Adafruit_Si7021::Adafruit_Si7021(TwoWire *theWire) {
  _i2caddr = SI7021_DEFAULT_ADDRESS;
  _wire = theWire;
  sernum_a = sernum_b = 0;
 80a00c4:	6042      	str	r2, [r0, #4]
 80a00c6:	6002      	str	r2, [r0, #0]
  _model = SI_7021;
 80a00c8:	7201      	strb	r1, [r0, #8]
  _revision = 0;
 80a00ca:	7242      	strb	r2, [r0, #9]
}
 80a00cc:	4770      	bx	lr
	...

080a00d0 <_ZN15Adafruit_Si702112readHumidityEv>:

/*!
 *  @brief  Reads the humidity value from Si7021 (No Master hold)
 *  @return Returns humidity as float value or NAN when there is error timeout
 */
float Adafruit_Si7021::readHumidity() {
 80a00d0:	b570      	push	{r4, r5, r6, lr}
 80a00d2:	4604      	mov	r4, r0
  _wire->beginTransmission(_i2caddr);
 80a00d4:	f990 100a 	ldrsb.w	r1, [r0, #10]
 80a00d8:	68c0      	ldr	r0, [r0, #12]
 80a00da:	f000 faab 	bl	80a0634 <_ZN7TwoWire17beginTransmissionEi>

  _wire->write(SI7021_MEASRH_NOHOLD_CMD);
 80a00de:	21f5      	movs	r1, #245	; 0xf5
 80a00e0:	68e0      	ldr	r0, [r4, #12]
 80a00e2:	f7ff ffe6 	bl	80a00b2 <_ZN7TwoWire5writeEi>
  uint8_t err = _wire->endTransmission();
 80a00e6:	68e0      	ldr	r0, [r4, #12]
 80a00e8:	f000 faab 	bl	80a0642 <_ZN7TwoWire15endTransmissionEv>

  if (err != 0)
 80a00ec:	2800      	cmp	r0, #0
 80a00ee:	d13a      	bne.n	80a0166 <_ZN15Adafruit_Si702112readHumidityEv+0x96>
    return NAN; // error

  delay(20); // account for conversion time for reading humidity
 80a00f0:	2014      	movs	r0, #20
 80a00f2:	f000 fa43 	bl	80a057c <delay>
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a00f6:	f000 f8e3 	bl	80a02c0 <HAL_Timer_Get_Milli_Seconds>
 80a00fa:	4605      	mov	r5, r0
 80a00fc:	f000 f8e0 	bl	80a02c0 <HAL_Timer_Get_Milli_Seconds>

  uint32_t start = millis(); // start timeout
  while (millis() - start < _TRANSACTION_TIMEOUT) {
 80a0100:	1b40      	subs	r0, r0, r5
 80a0102:	2863      	cmp	r0, #99	; 0x63
 80a0104:	d82f      	bhi.n	80a0166 <_ZN15Adafruit_Si702112readHumidityEv+0x96>
    if (_wire->requestFrom(_i2caddr, 3) == 3) {
 80a0106:	2203      	movs	r2, #3
 80a0108:	f994 100a 	ldrsb.w	r1, [r4, #10]
 80a010c:	68e0      	ldr	r0, [r4, #12]
 80a010e:	f000 fa88 	bl	80a0622 <_ZN7TwoWire11requestFromEii>
 80a0112:	2803      	cmp	r0, #3
 80a0114:	d123      	bne.n	80a015e <_ZN15Adafruit_Si702112readHumidityEv+0x8e>
      uint16_t hum = _wire->read() << 8 | _wire->read();
 80a0116:	68e0      	ldr	r0, [r4, #12]
 80a0118:	6803      	ldr	r3, [r0, #0]
 80a011a:	695b      	ldr	r3, [r3, #20]
 80a011c:	4798      	blx	r3
 80a011e:	4606      	mov	r6, r0
 80a0120:	68e0      	ldr	r0, [r4, #12]
 80a0122:	6803      	ldr	r3, [r0, #0]
 80a0124:	695b      	ldr	r3, [r3, #20]
 80a0126:	4798      	blx	r3
 80a0128:	4605      	mov	r5, r0
      uint8_t chxsum = _wire->read();
 80a012a:	68e0      	ldr	r0, [r4, #12]
 80a012c:	6803      	ldr	r3, [r0, #0]
 80a012e:	695b      	ldr	r3, [r3, #20]
 80a0130:	4798      	blx	r3

      float humidity = hum;
 80a0132:	ea45 2006 	orr.w	r0, r5, r6, lsl #8
 80a0136:	b280      	uxth	r0, r0
 80a0138:	f001 fe94 	bl	80a1e64 <__aeabi_ui2f>
      humidity *= 125;
 80a013c:	490c      	ldr	r1, [pc, #48]	; (80a0170 <_ZN15Adafruit_Si702112readHumidityEv+0xa0>)
 80a013e:	f001 fee9 	bl	80a1f14 <__aeabi_fmul>
      humidity /= 65536;
 80a0142:	f04f 515e 	mov.w	r1, #931135488	; 0x37800000
 80a0146:	f001 fee5 	bl	80a1f14 <__aeabi_fmul>
      humidity -= 6;
 80a014a:	490a      	ldr	r1, [pc, #40]	; (80a0174 <_ZN15Adafruit_Si702112readHumidityEv+0xa4>)
 80a014c:	f001 fdd8 	bl	80a1d00 <__aeabi_fsub>

      return humidity > 100.0 ? 100.0 : humidity;
 80a0150:	4909      	ldr	r1, [pc, #36]	; (80a0178 <_ZN15Adafruit_Si702112readHumidityEv+0xa8>)
      uint8_t chxsum = _wire->read();

      float humidity = hum;
      humidity *= 125;
      humidity /= 65536;
      humidity -= 6;
 80a0152:	4604      	mov	r4, r0

      return humidity > 100.0 ? 100.0 : humidity;
 80a0154:	f002 f89a 	bl	80a228c <__aeabi_fcmpgt>
 80a0158:	b938      	cbnz	r0, 80a016a <_ZN15Adafruit_Si702112readHumidityEv+0x9a>
 80a015a:	4620      	mov	r0, r4
 80a015c:	bd70      	pop	{r4, r5, r6, pc}
    }
    delay(6); // 1/2 typical sample processing time
 80a015e:	2006      	movs	r0, #6
 80a0160:	f000 fa0c 	bl	80a057c <delay>
    return NAN; // error

  delay(20); // account for conversion time for reading humidity

  uint32_t start = millis(); // start timeout
  while (millis() - start < _TRANSACTION_TIMEOUT) {
 80a0164:	e7ca      	b.n	80a00fc <_ZN15Adafruit_Si702112readHumidityEv+0x2c>

  _wire->write(SI7021_MEASRH_NOHOLD_CMD);
  uint8_t err = _wire->endTransmission();

  if (err != 0)
    return NAN; // error
 80a0166:	4805      	ldr	r0, [pc, #20]	; (80a017c <_ZN15Adafruit_Si702112readHumidityEv+0xac>)
 80a0168:	bd70      	pop	{r4, r5, r6, pc}
      float humidity = hum;
      humidity *= 125;
      humidity /= 65536;
      humidity -= 6;

      return humidity > 100.0 ? 100.0 : humidity;
 80a016a:	4803      	ldr	r0, [pc, #12]	; (80a0178 <_ZN15Adafruit_Si702112readHumidityEv+0xa8>)
    }
    delay(6); // 1/2 typical sample processing time
  }
  return NAN; // Error timeout
}
 80a016c:	bd70      	pop	{r4, r5, r6, pc}
 80a016e:	bf00      	nop
 80a0170:	42fa0000 	.word	0x42fa0000
 80a0174:	40c00000 	.word	0x40c00000
 80a0178:	42c80000 	.word	0x42c80000
 80a017c:	7fc00000 	.word	0x7fc00000

080a0180 <_ZN15Adafruit_Si702115readTemperatureEv>:
/*!
 *  @brief  Reads the temperature value from Si7021 (No Master hold)
 *  @return Returns temperature as float value or NAN when there is error
 * timeout
 */
float Adafruit_Si7021::readTemperature() {
 80a0180:	b570      	push	{r4, r5, r6, lr}
 80a0182:	4604      	mov	r4, r0
  _wire->beginTransmission(_i2caddr);
 80a0184:	f990 100a 	ldrsb.w	r1, [r0, #10]
 80a0188:	68c0      	ldr	r0, [r0, #12]
 80a018a:	f000 fa53 	bl	80a0634 <_ZN7TwoWire17beginTransmissionEi>
  _wire->write(SI7021_MEASTEMP_NOHOLD_CMD);
 80a018e:	21f3      	movs	r1, #243	; 0xf3
 80a0190:	68e0      	ldr	r0, [r4, #12]
 80a0192:	f7ff ff8e 	bl	80a00b2 <_ZN7TwoWire5writeEi>
  uint8_t err = _wire->endTransmission();
 80a0196:	68e0      	ldr	r0, [r4, #12]
 80a0198:	f000 fa53 	bl	80a0642 <_ZN7TwoWire15endTransmissionEv>

  if (err != 0)
 80a019c:	2800      	cmp	r0, #0
 80a019e:	d140      	bne.n	80a0222 <_ZN15Adafruit_Si702115readTemperatureEv+0xa2>
    return NAN; // error

  delay(20); // account for conversion time for reading temperature
 80a01a0:	2014      	movs	r0, #20
 80a01a2:	f000 f9eb 	bl	80a057c <delay>
 80a01a6:	f000 f88b 	bl	80a02c0 <HAL_Timer_Get_Milli_Seconds>
 80a01aa:	4605      	mov	r5, r0
 80a01ac:	f000 f888 	bl	80a02c0 <HAL_Timer_Get_Milli_Seconds>

  uint32_t start = millis(); // start timeout
  while (millis() - start < _TRANSACTION_TIMEOUT) {
 80a01b0:	1b40      	subs	r0, r0, r5
 80a01b2:	2863      	cmp	r0, #99	; 0x63
 80a01b4:	d835      	bhi.n	80a0222 <_ZN15Adafruit_Si702115readTemperatureEv+0xa2>
    if (_wire->requestFrom(_i2caddr, 3) == 3) {
 80a01b6:	2203      	movs	r2, #3
 80a01b8:	f994 100a 	ldrsb.w	r1, [r4, #10]
 80a01bc:	68e0      	ldr	r0, [r4, #12]
 80a01be:	f000 fa30 	bl	80a0622 <_ZN7TwoWire11requestFromEii>
 80a01c2:	2803      	cmp	r0, #3
 80a01c4:	d129      	bne.n	80a021a <_ZN15Adafruit_Si702115readTemperatureEv+0x9a>
      uint16_t temp = _wire->read() << 8 | _wire->read();
 80a01c6:	68e0      	ldr	r0, [r4, #12]
 80a01c8:	6803      	ldr	r3, [r0, #0]
 80a01ca:	695b      	ldr	r3, [r3, #20]
 80a01cc:	4798      	blx	r3
 80a01ce:	4606      	mov	r6, r0
 80a01d0:	68e0      	ldr	r0, [r4, #12]
 80a01d2:	6803      	ldr	r3, [r0, #0]
 80a01d4:	695b      	ldr	r3, [r3, #20]
 80a01d6:	4798      	blx	r3
 80a01d8:	4605      	mov	r5, r0
      uint8_t chxsum = _wire->read();
 80a01da:	68e0      	ldr	r0, [r4, #12]
 80a01dc:	6803      	ldr	r3, [r0, #0]
 80a01de:	695b      	ldr	r3, [r3, #20]
 80a01e0:	4798      	blx	r3

      float temperature = temp;
      temperature *= 175.72;
 80a01e2:	ea45 2006 	orr.w	r0, r5, r6, lsl #8
 80a01e6:	b280      	uxth	r0, r0
 80a01e8:	f001 fe3c 	bl	80a1e64 <__aeabi_ui2f>
 80a01ec:	f001 f9e8 	bl	80a15c0 <__aeabi_f2d>
 80a01f0:	a30d      	add	r3, pc, #52	; (adr r3, 80a0228 <_ZN15Adafruit_Si702115readTemperatureEv+0xa8>)
 80a01f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a01f6:	f001 fa37 	bl	80a1668 <__aeabi_dmul>
 80a01fa:	f001 fd2d 	bl	80a1c58 <__aeabi_d2f>
      temperature /= 65536;
      temperature -= 46.85;
 80a01fe:	f04f 515e 	mov.w	r1, #931135488	; 0x37800000
 80a0202:	f001 fe87 	bl	80a1f14 <__aeabi_fmul>
 80a0206:	f001 f9db 	bl	80a15c0 <__aeabi_f2d>
 80a020a:	a309      	add	r3, pc, #36	; (adr r3, 80a0230 <_ZN15Adafruit_Si702115readTemperatureEv+0xb0>)
 80a020c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0210:	f001 f876 	bl	80a1300 <__aeabi_dsub>
 80a0214:	f001 fd20 	bl	80a1c58 <__aeabi_d2f>
      return temperature;
 80a0218:	bd70      	pop	{r4, r5, r6, pc}
    }
    delay(6); // 1/2 typical sample processing time
 80a021a:	2006      	movs	r0, #6
 80a021c:	f000 f9ae 	bl	80a057c <delay>
    return NAN; // error

  delay(20); // account for conversion time for reading temperature

  uint32_t start = millis(); // start timeout
  while (millis() - start < _TRANSACTION_TIMEOUT) {
 80a0220:	e7c4      	b.n	80a01ac <_ZN15Adafruit_Si702115readTemperatureEv+0x2c>
  _wire->beginTransmission(_i2caddr);
  _wire->write(SI7021_MEASTEMP_NOHOLD_CMD);
  uint8_t err = _wire->endTransmission();

  if (err != 0)
    return NAN; // error
 80a0222:	4805      	ldr	r0, [pc, #20]	; (80a0238 <_ZN15Adafruit_Si702115readTemperatureEv+0xb8>)
    }
    delay(6); // 1/2 typical sample processing time
  }

  return NAN; // Error timeout
}
 80a0224:	bd70      	pop	{r4, r5, r6, pc}
 80a0226:	bf00      	nop
 80a0228:	3d70a3d7 	.word	0x3d70a3d7
 80a022c:	4065f70a 	.word	0x4065f70a
 80a0230:	cccccccd 	.word	0xcccccccd
 80a0234:	40476ccc 	.word	0x40476ccc
 80a0238:	7fc00000 	.word	0x7fc00000

080a023c <_GLOBAL__sub_I__ZN15Adafruit_Si7021C2EP7TwoWire>:
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a023c:	f000 b848 	b.w	80a02d0 <HAL_Pin_Map>

080a0240 <setup>:
 */

#include "Adafruit_Si7021.h"

// setup() runs once, when the device is first turned on.
void setup() {
 80a0240:	b530      	push	{r4, r5, lr}
 80a0242:	b087      	sub	sp, #28
  // Put initialization like pinMode and begin functions here.
  Serial.println("Hello!");
 80a0244:	f000 fd50 	bl	80a0ce8 <_Z16_fetch_usbserialv>
 80a0248:	4911      	ldr	r1, [pc, #68]	; (80a0290 <setup+0x50>)
 80a024a:	f000 fb08 	bl	80a085e <_ZN5Print7printlnEPKc>
 *  @brief  Class that stores state and functions for interacting with
 *          Si7021 Sensor
 */
class Adafruit_Si7021 {
public:
  Adafruit_Si7021(TwoWire *theWire = &Wire);
 80a024e:	f000 fea9 	bl	80a0fa4 <_Z19__fetch_global_Wirev>
  Adafruit_Si7021 sensor = Adafruit_Si7021();  
 80a0252:	4601      	mov	r1, r0
 80a0254:	a802      	add	r0, sp, #8
 80a0256:	f7ff ff30 	bl	80a00ba <_ZN15Adafruit_Si7021C1EP7TwoWire>
  float temp = sensor.readTemperature();
 80a025a:	a802      	add	r0, sp, #8
 80a025c:	f7ff ff90 	bl	80a0180 <_ZN15Adafruit_Si702115readTemperatureEv>
 80a0260:	4605      	mov	r5, r0
  float humi = sensor.readHumidity();
 80a0262:	a802      	add	r0, sp, #8
 80a0264:	f7ff ff34 	bl	80a00d0 <_ZN15Adafruit_Si702112readHumidityEv>
  Serial.print("temp: ");
 80a0268:	f000 fd3e 	bl	80a0ce8 <_Z16_fetch_usbserialv>
 80a026c:	4909      	ldr	r1, [pc, #36]	; (80a0294 <setup+0x54>)
 80a026e:	f000 fae3 	bl	80a0838 <_ZN5Print5printEPKc>
  Serial.println(temp);
 80a0272:	f000 fd39 	bl	80a0ce8 <_Z16_fetch_usbserialv>
 80a0276:	4604      	mov	r4, r0
 80a0278:	4628      	mov	r0, r5
 80a027a:	f001 f9a1 	bl	80a15c0 <__aeabi_f2d>
 80a027e:	2302      	movs	r3, #2
 80a0280:	9300      	str	r3, [sp, #0]
 80a0282:	4602      	mov	r2, r0
 80a0284:	460b      	mov	r3, r1
 80a0286:	4620      	mov	r0, r4
 80a0288:	f000 fbf0 	bl	80a0a6c <_ZN5Print7printlnEdi>
}
 80a028c:	b007      	add	sp, #28
 80a028e:	bd30      	pop	{r4, r5, pc}
 80a0290:	080a2358 	.word	0x080a2358
 80a0294:	080a235f 	.word	0x080a235f

080a0298 <loop>:

// loop() runs over and over again, as quickly as it can execute.
void loop() {
 80a0298:	4770      	bx	lr

080a029a <_GLOBAL__sub_I_setup>:
 80a029a:	f000 b819 	b.w	80a02d0 <HAL_Pin_Map>
	...

080a02a0 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a02a0:	b508      	push	{r3, lr}
 80a02a2:	4b02      	ldr	r3, [pc, #8]	; (80a02ac <os_mutex_create+0xc>)
 80a02a4:	681b      	ldr	r3, [r3, #0]
 80a02a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a02a8:	9301      	str	r3, [sp, #4]
 80a02aa:	bd08      	pop	{r3, pc}
 80a02ac:	080601d0 	.word	0x080601d0

080a02b0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a02b0:	b508      	push	{r3, lr}
 80a02b2:	4b02      	ldr	r3, [pc, #8]	; (80a02bc <HAL_RNG_GetRandomNumber+0xc>)
 80a02b4:	681b      	ldr	r3, [r3, #0]
 80a02b6:	685b      	ldr	r3, [r3, #4]
 80a02b8:	9301      	str	r3, [sp, #4]
 80a02ba:	bd08      	pop	{r3, pc}
 80a02bc:	0806019c 	.word	0x0806019c

080a02c0 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a02c0:	b508      	push	{r3, lr}
 80a02c2:	4b02      	ldr	r3, [pc, #8]	; (80a02cc <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a02c4:	681b      	ldr	r3, [r3, #0]
 80a02c6:	695b      	ldr	r3, [r3, #20]
 80a02c8:	9301      	str	r3, [sp, #4]
 80a02ca:	bd08      	pop	{r3, pc}
 80a02cc:	0806019c 	.word	0x0806019c

080a02d0 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a02d0:	b508      	push	{r3, lr}
 80a02d2:	4b02      	ldr	r3, [pc, #8]	; (80a02dc <HAL_Pin_Map+0xc>)
 80a02d4:	681b      	ldr	r3, [r3, #0]
 80a02d6:	681b      	ldr	r3, [r3, #0]
 80a02d8:	9301      	str	r3, [sp, #4]
 80a02da:	bd08      	pop	{r3, pc}
 80a02dc:	080601b0 	.word	0x080601b0

080a02e0 <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
 80a02e0:	b508      	push	{r3, lr}
 80a02e2:	4b02      	ldr	r3, [pc, #8]	; (80a02ec <HAL_I2C_Request_Data+0xc>)
 80a02e4:	681b      	ldr	r3, [r3, #0]
 80a02e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a02e8:	9301      	str	r3, [sp, #4]
 80a02ea:	bd08      	pop	{r3, pc}
 80a02ec:	080601ac 	.word	0x080601ac

080a02f0 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
 80a02f0:	b508      	push	{r3, lr}
 80a02f2:	4b02      	ldr	r3, [pc, #8]	; (80a02fc <HAL_I2C_Begin_Transmission+0xc>)
 80a02f4:	681b      	ldr	r3, [r3, #0]
 80a02f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a02f8:	9301      	str	r3, [sp, #4]
 80a02fa:	bd08      	pop	{r3, pc}
 80a02fc:	080601ac 	.word	0x080601ac

080a0300 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 80a0300:	b508      	push	{r3, lr}
 80a0302:	4b02      	ldr	r3, [pc, #8]	; (80a030c <HAL_I2C_End_Transmission+0xc>)
 80a0304:	681b      	ldr	r3, [r3, #0]
 80a0306:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a0308:	9301      	str	r3, [sp, #4]
 80a030a:	bd08      	pop	{r3, pc}
 80a030c:	080601ac 	.word	0x080601ac

080a0310 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a0310:	b508      	push	{r3, lr}
 80a0312:	4b02      	ldr	r3, [pc, #8]	; (80a031c <HAL_I2C_Write_Data+0xc>)
 80a0314:	681b      	ldr	r3, [r3, #0]
 80a0316:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a0318:	9301      	str	r3, [sp, #4]
 80a031a:	bd08      	pop	{r3, pc}
 80a031c:	080601ac 	.word	0x080601ac

080a0320 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a0320:	b508      	push	{r3, lr}
 80a0322:	4b02      	ldr	r3, [pc, #8]	; (80a032c <HAL_I2C_Available_Data+0xc>)
 80a0324:	681b      	ldr	r3, [r3, #0]
 80a0326:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a0328:	9301      	str	r3, [sp, #4]
 80a032a:	bd08      	pop	{r3, pc}
 80a032c:	080601ac 	.word	0x080601ac

080a0330 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a0330:	b508      	push	{r3, lr}
 80a0332:	4b02      	ldr	r3, [pc, #8]	; (80a033c <HAL_I2C_Read_Data+0xc>)
 80a0334:	681b      	ldr	r3, [r3, #0]
 80a0336:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a0338:	9301      	str	r3, [sp, #4]
 80a033a:	bd08      	pop	{r3, pc}
 80a033c:	080601ac 	.word	0x080601ac

080a0340 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a0340:	b508      	push	{r3, lr}
 80a0342:	4b02      	ldr	r3, [pc, #8]	; (80a034c <HAL_I2C_Peek_Data+0xc>)
 80a0344:	681b      	ldr	r3, [r3, #0]
 80a0346:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a0348:	9301      	str	r3, [sp, #4]
 80a034a:	bd08      	pop	{r3, pc}
 80a034c:	080601ac 	.word	0x080601ac

080a0350 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a0350:	b508      	push	{r3, lr}
 80a0352:	4b02      	ldr	r3, [pc, #8]	; (80a035c <HAL_I2C_Flush_Data+0xc>)
 80a0354:	681b      	ldr	r3, [r3, #0]
 80a0356:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a0358:	9301      	str	r3, [sp, #4]
 80a035a:	bd08      	pop	{r3, pc}
 80a035c:	080601ac 	.word	0x080601ac

080a0360 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a0360:	b508      	push	{r3, lr}
 80a0362:	4b03      	ldr	r3, [pc, #12]	; (80a0370 <HAL_I2C_Init+0x10>)
 80a0364:	681b      	ldr	r3, [r3, #0]
 80a0366:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a036a:	9301      	str	r3, [sp, #4]
 80a036c:	bd08      	pop	{r3, pc}
 80a036e:	0000      	.short	0x0000
 80a0370:	080601ac 	.word	0x080601ac

080a0374 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a0374:	b508      	push	{r3, lr}
 80a0376:	4b02      	ldr	r3, [pc, #8]	; (80a0380 <HAL_SPI_Init+0xc>)
 80a0378:	681b      	ldr	r3, [r3, #0]
 80a037a:	69db      	ldr	r3, [r3, #28]
 80a037c:	9301      	str	r3, [sp, #4]
 80a037e:	bd08      	pop	{r3, pc}
 80a0380:	080601b4 	.word	0x080601b4

080a0384 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a0384:	b508      	push	{r3, lr}
 80a0386:	4b02      	ldr	r3, [pc, #8]	; (80a0390 <HAL_USART_Init+0xc>)
 80a0388:	681b      	ldr	r3, [r3, #0]
 80a038a:	699b      	ldr	r3, [r3, #24]
 80a038c:	9301      	str	r3, [sp, #4]
 80a038e:	bd08      	pop	{r3, pc}
 80a0390:	080601c4 	.word	0x080601c4

080a0394 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a0394:	b508      	push	{r3, lr}
 80a0396:	4b02      	ldr	r3, [pc, #8]	; (80a03a0 <HAL_USART_Write_Data+0xc>)
 80a0398:	681b      	ldr	r3, [r3, #0]
 80a039a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a039c:	9301      	str	r3, [sp, #4]
 80a039e:	bd08      	pop	{r3, pc}
 80a03a0:	080601c4 	.word	0x080601c4

080a03a4 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a03a4:	b508      	push	{r3, lr}
 80a03a6:	4b02      	ldr	r3, [pc, #8]	; (80a03b0 <HAL_USART_Available_Data+0xc>)
 80a03a8:	681b      	ldr	r3, [r3, #0]
 80a03aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a03ac:	9301      	str	r3, [sp, #4]
 80a03ae:	bd08      	pop	{r3, pc}
 80a03b0:	080601c4 	.word	0x080601c4

080a03b4 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a03b4:	b508      	push	{r3, lr}
 80a03b6:	4b02      	ldr	r3, [pc, #8]	; (80a03c0 <HAL_USART_Read_Data+0xc>)
 80a03b8:	681b      	ldr	r3, [r3, #0]
 80a03ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a03bc:	9301      	str	r3, [sp, #4]
 80a03be:	bd08      	pop	{r3, pc}
 80a03c0:	080601c4 	.word	0x080601c4

080a03c4 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a03c4:	b508      	push	{r3, lr}
 80a03c6:	4b02      	ldr	r3, [pc, #8]	; (80a03d0 <HAL_USART_Peek_Data+0xc>)
 80a03c8:	681b      	ldr	r3, [r3, #0]
 80a03ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a03cc:	9301      	str	r3, [sp, #4]
 80a03ce:	bd08      	pop	{r3, pc}
 80a03d0:	080601c4 	.word	0x080601c4

080a03d4 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a03d4:	b508      	push	{r3, lr}
 80a03d6:	4b02      	ldr	r3, [pc, #8]	; (80a03e0 <HAL_USART_Flush_Data+0xc>)
 80a03d8:	681b      	ldr	r3, [r3, #0]
 80a03da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a03dc:	9301      	str	r3, [sp, #4]
 80a03de:	bd08      	pop	{r3, pc}
 80a03e0:	080601c4 	.word	0x080601c4

080a03e4 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a03e4:	b508      	push	{r3, lr}
 80a03e6:	4b02      	ldr	r3, [pc, #8]	; (80a03f0 <HAL_USART_Available_Data_For_Write+0xc>)
 80a03e8:	681b      	ldr	r3, [r3, #0]
 80a03ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a03ec:	9301      	str	r3, [sp, #4]
 80a03ee:	bd08      	pop	{r3, pc}
 80a03f0:	080601c4 	.word	0x080601c4

080a03f4 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a03f4:	b508      	push	{r3, lr}
 80a03f6:	4b02      	ldr	r3, [pc, #8]	; (80a0400 <HAL_USB_USART_Init+0xc>)
 80a03f8:	681b      	ldr	r3, [r3, #0]
 80a03fa:	681b      	ldr	r3, [r3, #0]
 80a03fc:	9301      	str	r3, [sp, #4]
 80a03fe:	bd08      	pop	{r3, pc}
 80a0400:	080601d8 	.word	0x080601d8

080a0404 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a0404:	b508      	push	{r3, lr}
 80a0406:	4b02      	ldr	r3, [pc, #8]	; (80a0410 <HAL_USB_USART_Available_Data+0xc>)
 80a0408:	681b      	ldr	r3, [r3, #0]
 80a040a:	691b      	ldr	r3, [r3, #16]
 80a040c:	9301      	str	r3, [sp, #4]
 80a040e:	bd08      	pop	{r3, pc}
 80a0410:	080601d8 	.word	0x080601d8

080a0414 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a0414:	b508      	push	{r3, lr}
 80a0416:	4b02      	ldr	r3, [pc, #8]	; (80a0420 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a0418:	681b      	ldr	r3, [r3, #0]
 80a041a:	695b      	ldr	r3, [r3, #20]
 80a041c:	9301      	str	r3, [sp, #4]
 80a041e:	bd08      	pop	{r3, pc}
 80a0420:	080601d8 	.word	0x080601d8

080a0424 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0424:	b508      	push	{r3, lr}
 80a0426:	4b02      	ldr	r3, [pc, #8]	; (80a0430 <HAL_USB_USART_Receive_Data+0xc>)
 80a0428:	681b      	ldr	r3, [r3, #0]
 80a042a:	699b      	ldr	r3, [r3, #24]
 80a042c:	9301      	str	r3, [sp, #4]
 80a042e:	bd08      	pop	{r3, pc}
 80a0430:	080601d8 	.word	0x080601d8

080a0434 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0434:	b508      	push	{r3, lr}
 80a0436:	4b02      	ldr	r3, [pc, #8]	; (80a0440 <HAL_USB_USART_Send_Data+0xc>)
 80a0438:	681b      	ldr	r3, [r3, #0]
 80a043a:	69db      	ldr	r3, [r3, #28]
 80a043c:	9301      	str	r3, [sp, #4]
 80a043e:	bd08      	pop	{r3, pc}
 80a0440:	080601d8 	.word	0x080601d8

080a0444 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a0444:	b508      	push	{r3, lr}
 80a0446:	4b02      	ldr	r3, [pc, #8]	; (80a0450 <HAL_USB_USART_Flush_Data+0xc>)
 80a0448:	681b      	ldr	r3, [r3, #0]
 80a044a:	6a1b      	ldr	r3, [r3, #32]
 80a044c:	9301      	str	r3, [sp, #4]
 80a044e:	bd08      	pop	{r3, pc}
 80a0450:	080601d8 	.word	0x080601d8

080a0454 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a0454:	b508      	push	{r3, lr}
 80a0456:	4b02      	ldr	r3, [pc, #8]	; (80a0460 <inet_gethostbyname+0xc>)
 80a0458:	681b      	ldr	r3, [r3, #0]
 80a045a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a045c:	9301      	str	r3, [sp, #4]
 80a045e:	bd08      	pop	{r3, pc}
 80a0460:	080601c0 	.word	0x080601c0

080a0464 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a0464:	b508      	push	{r3, lr}
 80a0466:	4b02      	ldr	r3, [pc, #8]	; (80a0470 <set_system_mode+0xc>)
 80a0468:	681b      	ldr	r3, [r3, #0]
 80a046a:	685b      	ldr	r3, [r3, #4]
 80a046c:	9301      	str	r3, [sp, #4]
 80a046e:	bd08      	pop	{r3, pc}
 80a0470:	080601a4 	.word	0x080601a4

080a0474 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a0474:	b508      	push	{r3, lr}
 80a0476:	4b02      	ldr	r3, [pc, #8]	; (80a0480 <system_delay_ms+0xc>)
 80a0478:	681b      	ldr	r3, [r3, #0]
 80a047a:	695b      	ldr	r3, [r3, #20]
 80a047c:	9301      	str	r3, [sp, #4]
 80a047e:	bd08      	pop	{r3, pc}
 80a0480:	080601a4 	.word	0x080601a4

080a0484 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a0484:	b508      	push	{r3, lr}
 80a0486:	4b03      	ldr	r3, [pc, #12]	; (80a0494 <system_ctrl_set_app_request_handler+0x10>)
 80a0488:	681b      	ldr	r3, [r3, #0]
 80a048a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a048e:	9301      	str	r3, [sp, #4]
 80a0490:	bd08      	pop	{r3, pc}
 80a0492:	0000      	.short	0x0000
 80a0494:	080601a4 	.word	0x080601a4

080a0498 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a0498:	b508      	push	{r3, lr}
 80a049a:	4b03      	ldr	r3, [pc, #12]	; (80a04a8 <system_ctrl_set_result+0x10>)
 80a049c:	681b      	ldr	r3, [r3, #0]
 80a049e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a04a2:	9301      	str	r3, [sp, #4]
 80a04a4:	bd08      	pop	{r3, pc}
 80a04a6:	0000      	.short	0x0000
 80a04a8:	080601a4 	.word	0x080601a4

080a04ac <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a04ac:	b508      	push	{r3, lr}
 80a04ae:	4b02      	ldr	r3, [pc, #8]	; (80a04b8 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a04b0:	681b      	ldr	r3, [r3, #0]
 80a04b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a04b4:	9301      	str	r3, [sp, #4]
 80a04b6:	bd08      	pop	{r3, pc}
 80a04b8:	080601cc 	.word	0x080601cc

080a04bc <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a04bc:	b508      	push	{r3, lr}
 80a04be:	4b02      	ldr	r3, [pc, #8]	; (80a04c8 <network_connect+0xc>)
 80a04c0:	681b      	ldr	r3, [r3, #0]
 80a04c2:	685b      	ldr	r3, [r3, #4]
 80a04c4:	9301      	str	r3, [sp, #4]
 80a04c6:	bd08      	pop	{r3, pc}
 80a04c8:	080601c8 	.word	0x080601c8

080a04cc <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a04cc:	b508      	push	{r3, lr}
 80a04ce:	4b02      	ldr	r3, [pc, #8]	; (80a04d8 <network_connecting+0xc>)
 80a04d0:	681b      	ldr	r3, [r3, #0]
 80a04d2:	689b      	ldr	r3, [r3, #8]
 80a04d4:	9301      	str	r3, [sp, #4]
 80a04d6:	bd08      	pop	{r3, pc}
 80a04d8:	080601c8 	.word	0x080601c8

080a04dc <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a04dc:	b508      	push	{r3, lr}
 80a04de:	4b02      	ldr	r3, [pc, #8]	; (80a04e8 <network_disconnect+0xc>)
 80a04e0:	681b      	ldr	r3, [r3, #0]
 80a04e2:	68db      	ldr	r3, [r3, #12]
 80a04e4:	9301      	str	r3, [sp, #4]
 80a04e6:	bd08      	pop	{r3, pc}
 80a04e8:	080601c8 	.word	0x080601c8

080a04ec <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a04ec:	b508      	push	{r3, lr}
 80a04ee:	4b02      	ldr	r3, [pc, #8]	; (80a04f8 <network_ready+0xc>)
 80a04f0:	681b      	ldr	r3, [r3, #0]
 80a04f2:	691b      	ldr	r3, [r3, #16]
 80a04f4:	9301      	str	r3, [sp, #4]
 80a04f6:	bd08      	pop	{r3, pc}
 80a04f8:	080601c8 	.word	0x080601c8

080a04fc <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a04fc:	b508      	push	{r3, lr}
 80a04fe:	4b02      	ldr	r3, [pc, #8]	; (80a0508 <network_on+0xc>)
 80a0500:	681b      	ldr	r3, [r3, #0]
 80a0502:	695b      	ldr	r3, [r3, #20]
 80a0504:	9301      	str	r3, [sp, #4]
 80a0506:	bd08      	pop	{r3, pc}
 80a0508:	080601c8 	.word	0x080601c8

080a050c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a050c:	b508      	push	{r3, lr}
 80a050e:	4b02      	ldr	r3, [pc, #8]	; (80a0518 <network_off+0xc>)
 80a0510:	681b      	ldr	r3, [r3, #0]
 80a0512:	699b      	ldr	r3, [r3, #24]
 80a0514:	9301      	str	r3, [sp, #4]
 80a0516:	bd08      	pop	{r3, pc}
 80a0518:	080601c8 	.word	0x080601c8

080a051c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a051c:	b508      	push	{r3, lr}
 80a051e:	4b02      	ldr	r3, [pc, #8]	; (80a0528 <network_listen+0xc>)
 80a0520:	681b      	ldr	r3, [r3, #0]
 80a0522:	69db      	ldr	r3, [r3, #28]
 80a0524:	9301      	str	r3, [sp, #4]
 80a0526:	bd08      	pop	{r3, pc}
 80a0528:	080601c8 	.word	0x080601c8

080a052c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a052c:	b508      	push	{r3, lr}
 80a052e:	4b02      	ldr	r3, [pc, #8]	; (80a0538 <network_listening+0xc>)
 80a0530:	681b      	ldr	r3, [r3, #0]
 80a0532:	6a1b      	ldr	r3, [r3, #32]
 80a0534:	9301      	str	r3, [sp, #4]
 80a0536:	bd08      	pop	{r3, pc}
 80a0538:	080601c8 	.word	0x080601c8

080a053c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a053c:	b508      	push	{r3, lr}
 80a053e:	4b02      	ldr	r3, [pc, #8]	; (80a0548 <network_set_listen_timeout+0xc>)
 80a0540:	681b      	ldr	r3, [r3, #0]
 80a0542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0544:	9301      	str	r3, [sp, #4]
 80a0546:	bd08      	pop	{r3, pc}
 80a0548:	080601c8 	.word	0x080601c8

080a054c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a054c:	b508      	push	{r3, lr}
 80a054e:	4b02      	ldr	r3, [pc, #8]	; (80a0558 <network_get_listen_timeout+0xc>)
 80a0550:	681b      	ldr	r3, [r3, #0]
 80a0552:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0554:	9301      	str	r3, [sp, #4]
 80a0556:	bd08      	pop	{r3, pc}
 80a0558:	080601c8 	.word	0x080601c8

080a055c <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a055c:	b508      	push	{r3, lr}
 80a055e:	4b02      	ldr	r3, [pc, #8]	; (80a0568 <malloc+0xc>)
 80a0560:	681b      	ldr	r3, [r3, #0]
 80a0562:	681b      	ldr	r3, [r3, #0]
 80a0564:	9301      	str	r3, [sp, #4]
 80a0566:	bd08      	pop	{r3, pc}
 80a0568:	080601a0 	.word	0x080601a0

080a056c <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a056c:	b508      	push	{r3, lr}
 80a056e:	4b02      	ldr	r3, [pc, #8]	; (80a0578 <free+0xc>)
 80a0570:	681b      	ldr	r3, [r3, #0]
 80a0572:	685b      	ldr	r3, [r3, #4]
 80a0574:	9301      	str	r3, [sp, #4]
 80a0576:	bd08      	pop	{r3, pc}
 80a0578:	080601a0 	.word	0x080601a0

080a057c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a057c:	2100      	movs	r1, #0
 80a057e:	f7ff bf79 	b.w	80a0474 <system_delay_ms>

080a0582 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a0582:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a0584:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a0586:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a0588:	b113      	cbz	r3, 80a0590 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a058a:	2203      	movs	r2, #3
 80a058c:	4601      	mov	r1, r0
 80a058e:	4798      	blx	r3
    }
 80a0590:	4620      	mov	r0, r4
 80a0592:	bd10      	pop	{r4, pc}

080a0594 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a0594:	4770      	bx	lr

080a0596 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a0596:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0598:	4606      	mov	r6, r0
 80a059a:	4615      	mov	r5, r2
 80a059c:	460c      	mov	r4, r1
 80a059e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a05a0:	42bc      	cmp	r4, r7
 80a05a2:	d006      	beq.n	80a05b2 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a05a4:	6833      	ldr	r3, [r6, #0]
 80a05a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a05aa:	689b      	ldr	r3, [r3, #8]
 80a05ac:	4630      	mov	r0, r6
 80a05ae:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a05b0:	e7f6      	b.n	80a05a0 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a05b2:	4628      	mov	r0, r5
 80a05b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a05b6 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a05b6:	2200      	movs	r2, #0
 80a05b8:	7c00      	ldrb	r0, [r0, #16]
 80a05ba:	f7ff bea9 	b.w	80a0310 <HAL_I2C_Write_Data>

080a05be <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a05be:	2100      	movs	r1, #0
 80a05c0:	7c00      	ldrb	r0, [r0, #16]
 80a05c2:	f7ff bead 	b.w	80a0320 <HAL_I2C_Available_Data>

080a05c6 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a05c6:	2100      	movs	r1, #0
 80a05c8:	7c00      	ldrb	r0, [r0, #16]
 80a05ca:	f7ff beb1 	b.w	80a0330 <HAL_I2C_Read_Data>

080a05ce <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a05ce:	2100      	movs	r1, #0
 80a05d0:	7c00      	ldrb	r0, [r0, #16]
 80a05d2:	f7ff beb5 	b.w	80a0340 <HAL_I2C_Peek_Data>

080a05d6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a05d6:	2100      	movs	r1, #0
 80a05d8:	7c00      	ldrb	r0, [r0, #16]
 80a05da:	f7ff beb9 	b.w	80a0350 <HAL_I2C_Flush_Data>

080a05de <_ZN7TwoWireD0Ev>:
 80a05de:	b510      	push	{r4, lr}
 80a05e0:	4604      	mov	r4, r0
 80a05e2:	2114      	movs	r1, #20
 80a05e4:	f000 fd3d 	bl	80a1062 <_ZdlPvj>
 80a05e8:	4620      	mov	r0, r4
 80a05ea:	bd10      	pop	{r4, pc}

080a05ec <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a05ec:	b510      	push	{r4, lr}
 80a05ee:	4604      	mov	r4, r0
 80a05f0:	4608      	mov	r0, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a05f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a05f6:	60a3      	str	r3, [r4, #8]
 80a05f8:	4b04      	ldr	r3, [pc, #16]	; (80a060c <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a05fa:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a05fc:	7420      	strb	r0, [r4, #16]
 80a05fe:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a0600:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a0602:	f7ff fead 	bl	80a0360 <HAL_I2C_Init>

}
 80a0606:	4620      	mov	r0, r4
 80a0608:	bd10      	pop	{r4, pc}
 80a060a:	bf00      	nop
 80a060c:	080a2370 	.word	0x080a2370

080a0610 <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 80a0610:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
 80a0612:	2400      	movs	r4, #0
 80a0614:	7c00      	ldrb	r0, [r0, #16]
 80a0616:	9400      	str	r4, [sp, #0]
 80a0618:	f7ff fe62 	bl	80a02e0 <HAL_I2C_Request_Data>
  return result;
}
 80a061c:	b2c0      	uxtb	r0, r0
 80a061e:	b002      	add	sp, #8
 80a0620:	bd10      	pop	{r4, pc}

080a0622 <_ZN7TwoWire11requestFromEii>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 80a0622:	2301      	movs	r3, #1
 80a0624:	b2d2      	uxtb	r2, r2
 80a0626:	b2c9      	uxtb	r1, r1
 80a0628:	f7ff bff2 	b.w	80a0610 <_ZN7TwoWire11requestFromEhhh>

080a062c <_ZN7TwoWire17beginTransmissionEh>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 80a062c:	2200      	movs	r2, #0
 80a062e:	7c00      	ldrb	r0, [r0, #16]
 80a0630:	f7ff be5e 	b.w	80a02f0 <HAL_I2C_Begin_Transmission>

080a0634 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
 80a0634:	b2c9      	uxtb	r1, r1
 80a0636:	f7ff bff9 	b.w	80a062c <_ZN7TwoWire17beginTransmissionEh>

080a063a <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 80a063a:	2200      	movs	r2, #0
 80a063c:	7c00      	ldrb	r0, [r0, #16]
 80a063e:	f7ff be5f 	b.w	80a0300 <HAL_I2C_End_Transmission>

080a0642 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
 80a0642:	2101      	movs	r1, #1
 80a0644:	f7ff bff9 	b.w	80a063a <_ZN7TwoWire15endTransmissionEh>

080a0648 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a0648:	4770      	bx	lr

080a064a <_ZN9IPAddressD0Ev>:
 80a064a:	b510      	push	{r4, lr}
 80a064c:	4604      	mov	r4, r0
 80a064e:	2118      	movs	r1, #24
 80a0650:	f000 fd07 	bl	80a1062 <_ZdlPvj>
 80a0654:	4620      	mov	r0, r4
 80a0656:	bd10      	pop	{r4, pc}

080a0658 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a0658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a065a:	460f      	mov	r7, r1
 80a065c:	f100 0608 	add.w	r6, r0, #8
 80a0660:	1d05      	adds	r5, r0, #4
 80a0662:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a0664:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a0668:	220a      	movs	r2, #10
 80a066a:	4638      	mov	r0, r7
 80a066c:	f000 f92b 	bl	80a08c6 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a0670:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a0672:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a0674:	d007      	beq.n	80a0686 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a0676:	2c00      	cmp	r4, #0
 80a0678:	d0f4      	beq.n	80a0664 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a067a:	212e      	movs	r1, #46	; 0x2e
 80a067c:	4638      	mov	r0, r7
 80a067e:	f000 f8df 	bl	80a0840 <_ZN5Print5printEc>
 80a0682:	4404      	add	r4, r0
 80a0684:	e7ee      	b.n	80a0664 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a0686:	4620      	mov	r0, r4
 80a0688:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a068c <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a068c:	b510      	push	{r4, lr}
 80a068e:	4604      	mov	r4, r0
 80a0690:	4b04      	ldr	r3, [pc, #16]	; (80a06a4 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a0692:	2211      	movs	r2, #17
 80a0694:	f840 3b04 	str.w	r3, [r0], #4
 80a0698:	2100      	movs	r1, #0
 80a069a:	f001 fe1a 	bl	80a22d2 <memset>
{
    clear();
}
 80a069e:	4620      	mov	r0, r4
 80a06a0:	bd10      	pop	{r4, pc}
 80a06a2:	bf00      	nop
 80a06a4:	080a2398 	.word	0x080a2398

080a06a8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a06a8:	4603      	mov	r3, r0
 80a06aa:	4a07      	ldr	r2, [pc, #28]	; (80a06c8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a06ac:	b510      	push	{r4, lr}
 80a06ae:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a06b2:	f101 0210 	add.w	r2, r1, #16
 80a06b6:	f851 4b04 	ldr.w	r4, [r1], #4
 80a06ba:	4291      	cmp	r1, r2
 80a06bc:	f843 4b04 	str.w	r4, [r3], #4
 80a06c0:	d1f9      	bne.n	80a06b6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a06c2:	780a      	ldrb	r2, [r1, #0]
 80a06c4:	701a      	strb	r2, [r3, #0]
}
 80a06c6:	bd10      	pop	{r4, pc}
 80a06c8:	080a2398 	.word	0x080a2398

080a06cc <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a06cc:	4a02      	ldr	r2, [pc, #8]	; (80a06d8 <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a06ce:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a06d0:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a06d2:	2204      	movs	r2, #4
 80a06d4:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a06d6:	4770      	bx	lr
 80a06d8:	080a2398 	.word	0x080a2398

080a06dc <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a06dc:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a06de:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a06e2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a06e6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a06ea:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a06ee:	2304      	movs	r3, #4
 80a06f0:	6041      	str	r1, [r0, #4]
 80a06f2:	7503      	strb	r3, [r0, #20]
 80a06f4:	bd10      	pop	{r4, pc}
	...

080a06f8 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a06f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a06fa:	4d04      	ldr	r5, [pc, #16]	; (80a070c <_ZN9IPAddressC1Ehhhh+0x14>)
 80a06fc:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a06fe:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a0702:	9500      	str	r5, [sp, #0]
 80a0704:	f7ff ffea 	bl	80a06dc <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a0708:	b003      	add	sp, #12
 80a070a:	bd30      	pop	{r4, r5, pc}
 80a070c:	080a2398 	.word	0x080a2398

080a0710 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a0710:	4a01      	ldr	r2, [pc, #4]	; (80a0718 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a0712:	4b02      	ldr	r3, [pc, #8]	; (80a071c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a0714:	601a      	str	r2, [r3, #0]
 80a0716:	4770      	bx	lr
 80a0718:	080a241a 	.word	0x080a241a
 80a071c:	2000006c 	.word	0x2000006c

080a0720 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a0720:	2300      	movs	r3, #0
 80a0722:	461a      	mov	r2, r3
 80a0724:	6840      	ldr	r0, [r0, #4]
 80a0726:	f7ff bec9 	b.w	80a04bc <network_connect>

080a072a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a072a:	2200      	movs	r2, #0
 80a072c:	2102      	movs	r1, #2
 80a072e:	6840      	ldr	r0, [r0, #4]
 80a0730:	f7ff bed4 	b.w	80a04dc <network_disconnect>

080a0734 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a0734:	2200      	movs	r2, #0
 80a0736:	4611      	mov	r1, r2
 80a0738:	6840      	ldr	r0, [r0, #4]
 80a073a:	f7ff bec7 	b.w	80a04cc <network_connecting>

080a073e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a073e:	2200      	movs	r2, #0
 80a0740:	4611      	mov	r1, r2
 80a0742:	6840      	ldr	r0, [r0, #4]
 80a0744:	f7ff bed2 	b.w	80a04ec <network_ready>

080a0748 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a0748:	2300      	movs	r3, #0
 80a074a:	461a      	mov	r2, r3
 80a074c:	4619      	mov	r1, r3
 80a074e:	6840      	ldr	r0, [r0, #4]
 80a0750:	f7ff bed4 	b.w	80a04fc <network_on>

080a0754 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a0754:	2300      	movs	r3, #0
 80a0756:	461a      	mov	r2, r3
 80a0758:	4619      	mov	r1, r3
 80a075a:	6840      	ldr	r0, [r0, #4]
 80a075c:	f7ff bed6 	b.w	80a050c <network_off>

080a0760 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a0760:	2200      	movs	r2, #0
 80a0762:	f081 0101 	eor.w	r1, r1, #1
 80a0766:	6840      	ldr	r0, [r0, #4]
 80a0768:	f7ff bed8 	b.w	80a051c <network_listen>

080a076c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a076c:	2200      	movs	r2, #0
 80a076e:	6840      	ldr	r0, [r0, #4]
 80a0770:	f7ff bee4 	b.w	80a053c <network_set_listen_timeout>

080a0774 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a0774:	2200      	movs	r2, #0
 80a0776:	4611      	mov	r1, r2
 80a0778:	6840      	ldr	r0, [r0, #4]
 80a077a:	f7ff bee7 	b.w	80a054c <network_get_listen_timeout>

080a077e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a077e:	2200      	movs	r2, #0
 80a0780:	4611      	mov	r1, r2
 80a0782:	6840      	ldr	r0, [r0, #4]
 80a0784:	f7ff bed2 	b.w	80a052c <network_listening>

080a0788 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a0788:	b570      	push	{r4, r5, r6, lr}
 80a078a:	4616      	mov	r6, r2
 80a078c:	b08e      	sub	sp, #56	; 0x38
 80a078e:	4604      	mov	r4, r0
    IPAddress addr;
 80a0790:	a808      	add	r0, sp, #32
 80a0792:	f7ff ff7b 	bl	80a068c <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a0796:	2211      	movs	r2, #17
 80a0798:	2100      	movs	r1, #0
 80a079a:	a803      	add	r0, sp, #12
 80a079c:	f001 fd99 	bl	80a22d2 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a07a0:	4630      	mov	r0, r6
 80a07a2:	f001 fdc7 	bl	80a2334 <strlen>
 80a07a6:	2500      	movs	r5, #0
 80a07a8:	4b0a      	ldr	r3, [pc, #40]	; (80a07d4 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a07aa:	9500      	str	r5, [sp, #0]
 80a07ac:	b281      	uxth	r1, r0
 80a07ae:	685b      	ldr	r3, [r3, #4]
 80a07b0:	aa03      	add	r2, sp, #12
 80a07b2:	4630      	mov	r0, r6
 80a07b4:	f7ff fe4e 	bl	80a0454 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a07b8:	b120      	cbz	r0, 80a07c4 <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a07ba:	4629      	mov	r1, r5
 80a07bc:	4620      	mov	r0, r4
 80a07be:	f7ff ff85 	bl	80a06cc <_ZN9IPAddressC1Em>
 80a07c2:	e003      	b.n	80a07cc <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a07c4:	a903      	add	r1, sp, #12
 80a07c6:	4620      	mov	r0, r4
 80a07c8:	f7ff ff6e 	bl	80a06a8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a07cc:	4620      	mov	r0, r4
 80a07ce:	b00e      	add	sp, #56	; 0x38
 80a07d0:	bd70      	pop	{r4, r5, r6, pc}
 80a07d2:	bf00      	nop
 80a07d4:	200004f0 	.word	0x200004f0

080a07d8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a07d8:	4b02      	ldr	r3, [pc, #8]	; (80a07e4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a07da:	4a03      	ldr	r2, [pc, #12]	; (80a07e8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a07dc:	601a      	str	r2, [r3, #0]
 80a07de:	2200      	movs	r2, #0
 80a07e0:	605a      	str	r2, [r3, #4]
 80a07e2:	4770      	bx	lr
 80a07e4:	20000070 	.word	0x20000070
 80a07e8:	080a2490 	.word	0x080a2490

080a07ec <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a07ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a07ee:	4606      	mov	r6, r0
 80a07f0:	460d      	mov	r5, r1
 80a07f2:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a07f4:	2400      	movs	r4, #0
  while (size--) {
 80a07f6:	42bd      	cmp	r5, r7
 80a07f8:	d00c      	beq.n	80a0814 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a07fa:	6833      	ldr	r3, [r6, #0]
 80a07fc:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a0800:	689b      	ldr	r3, [r3, #8]
 80a0802:	4630      	mov	r0, r6
 80a0804:	4798      	blx	r3
     if (chunk>=0)
 80a0806:	2800      	cmp	r0, #0
 80a0808:	db01      	blt.n	80a080e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a080a:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a080c:	e7f3      	b.n	80a07f6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a080e:	2c00      	cmp	r4, #0
 80a0810:	bf08      	it	eq
 80a0812:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a0814:	4620      	mov	r0, r4
 80a0816:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0818 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a0818:	b570      	push	{r4, r5, r6, lr}
 80a081a:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a081c:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a081e:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a0820:	b149      	cbz	r1, 80a0836 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a0822:	f001 fd87 	bl	80a2334 <strlen>
 80a0826:	682b      	ldr	r3, [r5, #0]
 80a0828:	4602      	mov	r2, r0
 80a082a:	4621      	mov	r1, r4
 80a082c:	4628      	mov	r0, r5
    }
 80a082e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a0832:	68db      	ldr	r3, [r3, #12]
 80a0834:	4718      	bx	r3
    }
 80a0836:	bd70      	pop	{r4, r5, r6, pc}

080a0838 <_ZN5Print5printEPKc>:
 80a0838:	b508      	push	{r3, lr}
 80a083a:	f7ff ffed 	bl	80a0818 <_ZN5Print5writeEPKc>
 80a083e:	bd08      	pop	{r3, pc}

080a0840 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a0840:	6803      	ldr	r3, [r0, #0]
 80a0842:	689b      	ldr	r3, [r3, #8]
 80a0844:	4718      	bx	r3

080a0846 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a0846:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a0848:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a084a:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a084c:	f7ff fff8 	bl	80a0840 <_ZN5Print5printEc>
  n += print('\n');
 80a0850:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a0852:	4604      	mov	r4, r0
  n += print('\n');
 80a0854:	4628      	mov	r0, r5
 80a0856:	f7ff fff3 	bl	80a0840 <_ZN5Print5printEc>
  return n;
}
 80a085a:	4420      	add	r0, r4
 80a085c:	bd38      	pop	{r3, r4, r5, pc}

080a085e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a085e:	b538      	push	{r3, r4, r5, lr}
 80a0860:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a0862:	f7ff ffd9 	bl	80a0818 <_ZN5Print5writeEPKc>
 80a0866:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a0868:	4628      	mov	r0, r5
 80a086a:	f7ff ffec 	bl	80a0846 <_ZN5Print7printlnEv>
  return n;
}
 80a086e:	4420      	add	r0, r4
 80a0870:	bd38      	pop	{r3, r4, r5, pc}

080a0872 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a0872:	2a01      	cmp	r2, #1
 80a0874:	bf98      	it	ls
 80a0876:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a0878:	b530      	push	{r4, r5, lr}
 80a087a:	460b      	mov	r3, r1
 80a087c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a087e:	2100      	movs	r1, #0
 80a0880:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a0884:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a0888:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a088c:	fb05 3312 	mls	r3, r5, r2, r3
 80a0890:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a0892:	2b09      	cmp	r3, #9
 80a0894:	bf94      	ite	ls
 80a0896:	3330      	addls	r3, #48	; 0x30
 80a0898:	3337      	addhi	r3, #55	; 0x37
 80a089a:	b2db      	uxtb	r3, r3
 80a089c:	4621      	mov	r1, r4
 80a089e:	f804 3901 	strb.w	r3, [r4], #-1
 80a08a2:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a08a4:	2d00      	cmp	r5, #0
 80a08a6:	d1ef      	bne.n	80a0888 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a08a8:	f7ff ffb6 	bl	80a0818 <_ZN5Print5writeEPKc>
}
 80a08ac:	b00b      	add	sp, #44	; 0x2c
 80a08ae:	bd30      	pop	{r4, r5, pc}

080a08b0 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a08b0:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a08b2:	b922      	cbnz	r2, 80a08be <_ZN5Print5printEmi+0xe>
 80a08b4:	6803      	ldr	r3, [r0, #0]
 80a08b6:	b2c9      	uxtb	r1, r1
 80a08b8:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a08ba:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a08bc:	4718      	bx	r3
  else return printNumber(n, base);
 80a08be:	b2d2      	uxtb	r2, r2
}
 80a08c0:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a08c2:	f7ff bfd6 	b.w	80a0872 <_ZN5Print11printNumberEmh>

080a08c6 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a08c6:	f7ff bff3 	b.w	80a08b0 <_ZN5Print5printEmi>

080a08ca <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 80a08ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a08ce:	4607      	mov	r7, r0
 80a08d0:	460e      	mov	r6, r1
  if (base == 0) {
 80a08d2:	4615      	mov	r5, r2
 80a08d4:	b92a      	cbnz	r2, 80a08e2 <_ZN5Print5printEli+0x18>
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80a08d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
 80a08da:	6803      	ldr	r3, [r0, #0]
 80a08dc:	b2c9      	uxtb	r1, r1
 80a08de:	689b      	ldr	r3, [r3, #8]
 80a08e0:	4718      	bx	r3
  } else if (base == 10) {
 80a08e2:	2a0a      	cmp	r2, #10
 80a08e4:	d102      	bne.n	80a08ec <_ZN5Print5printEli+0x22>
    if (n < 0) {
 80a08e6:	2900      	cmp	r1, #0
 80a08e8:	da01      	bge.n	80a08ee <_ZN5Print5printEli+0x24>
 80a08ea:	e004      	b.n	80a08f6 <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80a08ec:	b2d2      	uxtb	r2, r2
  }
}
 80a08ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80a08f2:	f7ff bfbe 	b.w	80a0872 <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80a08f6:	212d      	movs	r1, #45	; 0x2d
 80a08f8:	f7ff ffa2 	bl	80a0840 <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
 80a08fc:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80a08fe:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
 80a0900:	4271      	negs	r1, r6
 80a0902:	4638      	mov	r0, r7
 80a0904:	f7ff ffb5 	bl	80a0872 <_ZN5Print11printNumberEmh>
 80a0908:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80a090a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080a0910 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a0910:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a0914:	4619      	mov	r1, r3

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a0916:	4680      	mov	r8, r0
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a0918:	4610      	mov	r0, r2

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a091a:	4617      	mov	r7, r2
 80a091c:	461e      	mov	r6, r3
 80a091e:	f89d 5020 	ldrb.w	r5, [sp, #32]
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a0922:	f001 f93b 	bl	80a1b9c <__aeabi_dcmpun>
 80a0926:	b108      	cbz	r0, 80a092c <_ZN5Print10printFloatEdh+0x1c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a0928:	4947      	ldr	r1, [pc, #284]	; (80a0a48 <_ZN5Print10printFloatEdh+0x138>)
 80a092a:	e012      	b.n	80a0952 <_ZN5Print10printFloatEdh+0x42>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 80a092c:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 80a0930:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80a0934:	4b45      	ldr	r3, [pc, #276]	; (80a0a4c <_ZN5Print10printFloatEdh+0x13c>)
 80a0936:	4638      	mov	r0, r7
 80a0938:	4621      	mov	r1, r4
 80a093a:	f001 f92f 	bl	80a1b9c <__aeabi_dcmpun>
 80a093e:	b968      	cbnz	r0, 80a095c <_ZN5Print10printFloatEdh+0x4c>
 80a0940:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80a0944:	4b41      	ldr	r3, [pc, #260]	; (80a0a4c <_ZN5Print10printFloatEdh+0x13c>)
 80a0946:	4638      	mov	r0, r7
 80a0948:	4621      	mov	r1, r4
 80a094a:	f001 f909 	bl	80a1b60 <__aeabi_dcmple>
 80a094e:	b928      	cbnz	r0, 80a095c <_ZN5Print10printFloatEdh+0x4c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a0950:	493f      	ldr	r1, [pc, #252]	; (80a0a50 <_ZN5Print10printFloatEdh+0x140>)
 80a0952:	4640      	mov	r0, r8
 80a0954:	f7ff ff60 	bl	80a0818 <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 80a0958:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 80a095c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a0960:	4b3c      	ldr	r3, [pc, #240]	; (80a0a54 <_ZN5Print10printFloatEdh+0x144>)
 80a0962:	4638      	mov	r0, r7
 80a0964:	4631      	mov	r1, r6
 80a0966:	f001 f90f 	bl	80a1b88 <__aeabi_dcmpgt>
 80a096a:	b108      	cbz	r0, 80a0970 <_ZN5Print10printFloatEdh+0x60>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a096c:	493a      	ldr	r1, [pc, #232]	; (80a0a58 <_ZN5Print10printFloatEdh+0x148>)
 80a096e:	e7f0      	b.n	80a0952 <_ZN5Print10printFloatEdh+0x42>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 80a0970:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a0974:	4b39      	ldr	r3, [pc, #228]	; (80a0a5c <_ZN5Print10printFloatEdh+0x14c>)
 80a0976:	4638      	mov	r0, r7
 80a0978:	4631      	mov	r1, r6
 80a097a:	f001 f8e7 	bl	80a1b4c <__aeabi_dcmplt>
 80a097e:	2800      	cmp	r0, #0
 80a0980:	d1f4      	bne.n	80a096c <_ZN5Print10printFloatEdh+0x5c>

  // Handle negative numbers
  if (number < 0.0)
 80a0982:	2200      	movs	r2, #0
 80a0984:	2300      	movs	r3, #0
 80a0986:	4638      	mov	r0, r7
 80a0988:	4631      	mov	r1, r6
 80a098a:	f001 f8df 	bl	80a1b4c <__aeabi_dcmplt>
 80a098e:	b138      	cbz	r0, 80a09a0 <_ZN5Print10printFloatEdh+0x90>
  {
     n += print('-');
 80a0990:	212d      	movs	r1, #45	; 0x2d
 80a0992:	4640      	mov	r0, r8
 80a0994:	f7ff ff54 	bl	80a0840 <_ZN5Print5printEc>
     number = -number;
 80a0998:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
 80a099c:	4604      	mov	r4, r0
 80a099e:	e000      	b.n	80a09a2 <_ZN5Print10printFloatEdh+0x92>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 80a09a0:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 80a09a2:	492f      	ldr	r1, [pc, #188]	; (80a0a60 <_ZN5Print10printFloatEdh+0x150>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 80a09a4:	f04f 0900 	mov.w	r9, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 80a09a8:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
 80a09aa:	fa5f f389 	uxtb.w	r3, r9
 80a09ae:	429d      	cmp	r5, r3
 80a09b0:	d906      	bls.n	80a09c0 <_ZN5Print10printFloatEdh+0xb0>
    rounding /= 10.0;
 80a09b2:	2200      	movs	r2, #0
 80a09b4:	4b2b      	ldr	r3, [pc, #172]	; (80a0a64 <_ZN5Print10printFloatEdh+0x154>)
 80a09b6:	f000 ff81 	bl	80a18bc <__aeabi_ddiv>
 80a09ba:	f109 0901 	add.w	r9, r9, #1
 80a09be:	e7f4      	b.n	80a09aa <_ZN5Print10printFloatEdh+0x9a>

  number += rounding;
 80a09c0:	463a      	mov	r2, r7
 80a09c2:	4633      	mov	r3, r6
 80a09c4:	f000 fc9e 	bl	80a1304 <__adddf3>
 80a09c8:	460f      	mov	r7, r1
 80a09ca:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 80a09cc:	f001 f924 	bl	80a1c18 <__aeabi_d2uiz>
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a09d0:	220a      	movs	r2, #10
 80a09d2:	4601      	mov	r1, r0
    rounding /= 10.0;

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 80a09d4:	4681      	mov	r9, r0
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a09d6:	4640      	mov	r0, r8
 80a09d8:	f7ff ff4b 	bl	80a0872 <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
 80a09dc:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
 80a09de:	b37d      	cbz	r5, 80a0a40 <_ZN5Print10printFloatEdh+0x130>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
 80a09e0:	4648      	mov	r0, r9
 80a09e2:	f000 fdcb 	bl	80a157c <__aeabi_ui2d>
 80a09e6:	4602      	mov	r2, r0
 80a09e8:	460b      	mov	r3, r1
 80a09ea:	4630      	mov	r0, r6
 80a09ec:	4639      	mov	r1, r7
 80a09ee:	f000 fc87 	bl	80a1300 <__aeabi_dsub>
 80a09f2:	4606      	mov	r6, r0
 80a09f4:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a09f6:	4640      	mov	r0, r8
 80a09f8:	491b      	ldr	r1, [pc, #108]	; (80a0a68 <_ZN5Print10printFloatEdh+0x158>)
 80a09fa:	f7ff ff0d 	bl	80a0818 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
 80a09fe:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
 80a0a00:	4b18      	ldr	r3, [pc, #96]	; (80a0a64 <_ZN5Print10printFloatEdh+0x154>)
 80a0a02:	2200      	movs	r2, #0
 80a0a04:	4630      	mov	r0, r6
 80a0a06:	4639      	mov	r1, r7
 80a0a08:	f000 fe2e 	bl	80a1668 <__aeabi_dmul>
 80a0a0c:	460f      	mov	r7, r1
 80a0a0e:	4606      	mov	r6, r0
    int toPrint = int(remainder);
 80a0a10:	f001 f8da 	bl	80a1bc8 <__aeabi_d2iz>
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a0a14:	220a      	movs	r2, #10
 80a0a16:	4601      	mov	r1, r0

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
 80a0a18:	4681      	mov	r9, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a0a1a:	4640      	mov	r0, r8
 80a0a1c:	f7ff ff55 	bl	80a08ca <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
 80a0a20:	4404      	add	r4, r0
    remainder -= toPrint;
 80a0a22:	4648      	mov	r0, r9
 80a0a24:	f000 fdba 	bl	80a159c <__aeabi_i2d>
 80a0a28:	4602      	mov	r2, r0
 80a0a2a:	460b      	mov	r3, r1
 80a0a2c:	4630      	mov	r0, r6
 80a0a2e:	4639      	mov	r1, r7
 80a0a30:	f000 fc66 	bl	80a1300 <__aeabi_dsub>
 80a0a34:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 80a0a36:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
 80a0a3a:	4606      	mov	r6, r0
 80a0a3c:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 80a0a3e:	d1df      	bne.n	80a0a00 <_ZN5Print10printFloatEdh+0xf0>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
 80a0a40:	4620      	mov	r0, r4
 80a0a42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a0a46:	bf00      	nop
 80a0a48:	080a24bc 	.word	0x080a24bc
 80a0a4c:	7fefffff 	.word	0x7fefffff
 80a0a50:	080a24c6 	.word	0x080a24c6
 80a0a54:	41efffff 	.word	0x41efffff
 80a0a58:	080a24c0 	.word	0x080a24c0
 80a0a5c:	c1efffff 	.word	0xc1efffff
 80a0a60:	3fe00000 	.word	0x3fe00000
 80a0a64:	40240000 	.word	0x40240000
 80a0a68:	080a24c4 	.word	0x080a24c4

080a0a6c <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
 80a0a6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
 80a0a6e:	f89d 1018 	ldrb.w	r1, [sp, #24]
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
 80a0a72:	4605      	mov	r5, r0
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
 80a0a74:	9100      	str	r1, [sp, #0]
 80a0a76:	f7ff ff4b 	bl	80a0910 <_ZN5Print10printFloatEdh>
 80a0a7a:	4604      	mov	r4, r0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
 80a0a7c:	4628      	mov	r0, r5
 80a0a7e:	f7ff fee2 	bl	80a0846 <_ZN5Print7printlnEv>
  return n;
}
 80a0a82:	4420      	add	r0, r4
 80a0a84:	b003      	add	sp, #12
 80a0a86:	bd30      	pop	{r4, r5, pc}

080a0a88 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a0a88:	b510      	push	{r4, lr}
 80a0a8a:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0a8c:	f7ff fd79 	bl	80a0582 <_ZNSt14_Function_baseD1Ev>
 80a0a90:	4620      	mov	r0, r4
 80a0a92:	bd10      	pop	{r4, pc}

080a0a94 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0a94:	4803      	ldr	r0, [pc, #12]	; (80a0aa4 <_GLOBAL__sub_I_RGB+0x10>)
 80a0a96:	2300      	movs	r3, #0
 80a0a98:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a0a9a:	4a03      	ldr	r2, [pc, #12]	; (80a0aa8 <_GLOBAL__sub_I_RGB+0x14>)
 80a0a9c:	4903      	ldr	r1, [pc, #12]	; (80a0aac <_GLOBAL__sub_I_RGB+0x18>)
 80a0a9e:	f000 badb 	b.w	80a1058 <__aeabi_atexit>
 80a0aa2:	bf00      	nop
 80a0aa4:	20000078 	.word	0x20000078
 80a0aa8:	20000068 	.word	0x20000068
 80a0aac:	080a0a89 	.word	0x080a0a89

080a0ab0 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a0ab0:	4770      	bx	lr

080a0ab2 <_ZN8SPIClassD0Ev>:
 80a0ab2:	b510      	push	{r4, lr}
 80a0ab4:	4604      	mov	r4, r0
 80a0ab6:	2110      	movs	r1, #16
 80a0ab8:	f000 fad3 	bl	80a1062 <_ZdlPvj>
 80a0abc:	4620      	mov	r0, r4
 80a0abe:	bd10      	pop	{r4, pc}

080a0ac0 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a0ac0:	b570      	push	{r4, r5, r6, lr}
 80a0ac2:	4604      	mov	r4, r0
 80a0ac4:	460e      	mov	r6, r1
 80a0ac6:	4b07      	ldr	r3, [pc, #28]	; (80a0ae4 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a0ac8:	2500      	movs	r5, #0
 80a0aca:	6003      	str	r3, [r0, #0]
 80a0acc:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a0ad0:	f7ff fbe6 	bl	80a02a0 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a0ad4:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a0ad6:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a0ad8:	f7ff fc4c 	bl	80a0374 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a0adc:	60a5      	str	r5, [r4, #8]
}
 80a0ade:	4620      	mov	r0, r4
 80a0ae0:	bd70      	pop	{r4, r5, r6, pc}
 80a0ae2:	bf00      	nop
 80a0ae4:	080a24d4 	.word	0x080a24d4

080a0ae8 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a0ae8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a0aec:	4b03      	ldr	r3, [pc, #12]	; (80a0afc <_GLOBAL__sub_I_System+0x14>)
 80a0aee:	2000      	movs	r0, #0
 80a0af0:	7018      	strb	r0, [r3, #0]
 80a0af2:	8058      	strh	r0, [r3, #2]
 80a0af4:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a0af6:	f7ff bcb5 	b.w	80a0464 <set_system_mode>
 80a0afa:	bf00      	nop
 80a0afc:	20000088 	.word	0x20000088

080a0b00 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a0b00:	4b02      	ldr	r3, [pc, #8]	; (80a0b0c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a0b02:	681a      	ldr	r2, [r3, #0]
 80a0b04:	4b02      	ldr	r3, [pc, #8]	; (80a0b10 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a0b06:	601a      	str	r2, [r3, #0]
 80a0b08:	4770      	bx	lr
 80a0b0a:	bf00      	nop
 80a0b0c:	20000000 	.word	0x20000000
 80a0b10:	20000090 	.word	0x20000090

080a0b14 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a0b14:	4770      	bx	lr

080a0b16 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a0b16:	7441      	strb	r1, [r0, #17]
 80a0b18:	4770      	bx	lr

080a0b1a <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a0b1a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a0b1c:	7c00      	ldrb	r0, [r0, #16]
 80a0b1e:	f7ff fc61 	bl	80a03e4 <HAL_USART_Available_Data_For_Write>
}
 80a0b22:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0b26:	bd08      	pop	{r3, pc}

080a0b28 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a0b28:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a0b2a:	7c00      	ldrb	r0, [r0, #16]
 80a0b2c:	f7ff fc3a 	bl	80a03a4 <HAL_USART_Available_Data>
}
 80a0b30:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0b34:	bd08      	pop	{r3, pc}

080a0b36 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a0b36:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a0b38:	7c00      	ldrb	r0, [r0, #16]
 80a0b3a:	f7ff fc43 	bl	80a03c4 <HAL_USART_Peek_Data>
}
 80a0b3e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a0b42:	bf28      	it	cs
 80a0b44:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a0b48:	bd08      	pop	{r3, pc}

080a0b4a <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a0b4a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a0b4c:	7c00      	ldrb	r0, [r0, #16]
 80a0b4e:	f7ff fc31 	bl	80a03b4 <HAL_USART_Read_Data>
}
 80a0b52:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a0b56:	bf28      	it	cs
 80a0b58:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a0b5c:	bd08      	pop	{r3, pc}

080a0b5e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a0b5e:	7c00      	ldrb	r0, [r0, #16]
 80a0b60:	f7ff bc38 	b.w	80a03d4 <HAL_USART_Flush_Data>

080a0b64 <_ZN11USARTSerialD0Ev>:
 80a0b64:	b510      	push	{r4, lr}
 80a0b66:	4604      	mov	r4, r0
 80a0b68:	2114      	movs	r1, #20
 80a0b6a:	f000 fa7a 	bl	80a1062 <_ZdlPvj>
 80a0b6e:	4620      	mov	r0, r4
 80a0b70:	bd10      	pop	{r4, pc}

080a0b72 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a0b72:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a0b74:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a0b76:	4604      	mov	r4, r0
 80a0b78:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a0b7a:	b925      	cbnz	r5, 80a0b86 <_ZN11USARTSerial5writeEh+0x14>
 80a0b7c:	7c00      	ldrb	r0, [r0, #16]
 80a0b7e:	f7ff fc31 	bl	80a03e4 <HAL_USART_Available_Data_For_Write>
 80a0b82:	2800      	cmp	r0, #0
 80a0b84:	dd05      	ble.n	80a0b92 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a0b86:	4631      	mov	r1, r6
 80a0b88:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a0b8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a0b8e:	f7ff bc01 	b.w	80a0394 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a0b92:	4628      	mov	r0, r5
 80a0b94:	bd70      	pop	{r4, r5, r6, pc}
	...

080a0b98 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a0b98:	b510      	push	{r4, lr}
 80a0b9a:	4604      	mov	r4, r0
 80a0b9c:	4608      	mov	r0, r1
 80a0b9e:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a0ba0:	2200      	movs	r2, #0
 80a0ba2:	6062      	str	r2, [r4, #4]
 80a0ba4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a0ba8:	60a2      	str	r2, [r4, #8]
 80a0baa:	4a05      	ldr	r2, [pc, #20]	; (80a0bc0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a0bac:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a0bae:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a0bb0:	2201      	movs	r2, #1
 80a0bb2:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a0bb4:	461a      	mov	r2, r3
 80a0bb6:	f7ff fbe5 	bl	80a0384 <HAL_USART_Init>
}
 80a0bba:	4620      	mov	r0, r4
 80a0bbc:	bd10      	pop	{r4, pc}
 80a0bbe:	bf00      	nop
 80a0bc0:	080a2510 	.word	0x080a2510

080a0bc4 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a0bc4:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a0bc6:	4d0c      	ldr	r5, [pc, #48]	; (80a0bf8 <_Z22__fetch_global_Serial1v+0x34>)
 80a0bc8:	6829      	ldr	r1, [r5, #0]
 80a0bca:	f011 0401 	ands.w	r4, r1, #1
 80a0bce:	d111      	bne.n	80a0bf4 <_Z22__fetch_global_Serial1v+0x30>
 80a0bd0:	4628      	mov	r0, r5
 80a0bd2:	f7ff fa66 	bl	80a00a2 <__cxa_guard_acquire>
 80a0bd6:	b168      	cbz	r0, 80a0bf4 <_Z22__fetch_global_Serial1v+0x30>
 80a0bd8:	4a08      	ldr	r2, [pc, #32]	; (80a0bfc <_Z22__fetch_global_Serial1v+0x38>)
 80a0bda:	4621      	mov	r1, r4
 80a0bdc:	4b08      	ldr	r3, [pc, #32]	; (80a0c00 <_Z22__fetch_global_Serial1v+0x3c>)
 80a0bde:	4809      	ldr	r0, [pc, #36]	; (80a0c04 <_Z22__fetch_global_Serial1v+0x40>)
 80a0be0:	f7ff ffda 	bl	80a0b98 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a0be4:	4628      	mov	r0, r5
 80a0be6:	f7ff fa61 	bl	80a00ac <__cxa_guard_release>
 80a0bea:	4a07      	ldr	r2, [pc, #28]	; (80a0c08 <_Z22__fetch_global_Serial1v+0x44>)
 80a0bec:	4907      	ldr	r1, [pc, #28]	; (80a0c0c <_Z22__fetch_global_Serial1v+0x48>)
 80a0bee:	4805      	ldr	r0, [pc, #20]	; (80a0c04 <_Z22__fetch_global_Serial1v+0x40>)
 80a0bf0:	f000 fa32 	bl	80a1058 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a0bf4:	4803      	ldr	r0, [pc, #12]	; (80a0c04 <_Z22__fetch_global_Serial1v+0x40>)
 80a0bf6:	bd38      	pop	{r3, r4, r5, pc}
 80a0bf8:	2000012c 	.word	0x2000012c
 80a0bfc:	20000130 	.word	0x20000130
 80a0c00:	200000a8 	.word	0x200000a8
 80a0c04:	20000094 	.word	0x20000094
 80a0c08:	20000068 	.word	0x20000068
 80a0c0c:	080a0b15 	.word	0x080a0b15

080a0c10 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a0c10:	7441      	strb	r1, [r0, #17]
 80a0c12:	4770      	bx	lr

080a0c14 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a0c14:	4770      	bx	lr

080a0c16 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a0c16:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a0c18:	2100      	movs	r1, #0
 80a0c1a:	7c00      	ldrb	r0, [r0, #16]
 80a0c1c:	f7ff fc02 	bl	80a0424 <HAL_USB_USART_Receive_Data>
}
 80a0c20:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a0c24:	bf28      	it	cs
 80a0c26:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a0c2a:	bd08      	pop	{r3, pc}

080a0c2c <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a0c2c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a0c2e:	2101      	movs	r1, #1
 80a0c30:	7c00      	ldrb	r0, [r0, #16]
 80a0c32:	f7ff fbf7 	bl	80a0424 <HAL_USB_USART_Receive_Data>
}
 80a0c36:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a0c3a:	bf28      	it	cs
 80a0c3c:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a0c40:	bd08      	pop	{r3, pc}

080a0c42 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a0c42:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a0c44:	7c00      	ldrb	r0, [r0, #16]
 80a0c46:	f7ff fbe5 	bl	80a0414 <HAL_USB_USART_Available_Data_For_Write>
}
 80a0c4a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0c4e:	bd08      	pop	{r3, pc}

080a0c50 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a0c50:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a0c52:	7c00      	ldrb	r0, [r0, #16]
 80a0c54:	f7ff fbd6 	bl	80a0404 <HAL_USB_USART_Available_Data>
}
 80a0c58:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0c5c:	bd08      	pop	{r3, pc}

080a0c5e <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a0c5e:	7c00      	ldrb	r0, [r0, #16]
 80a0c60:	f7ff bbf0 	b.w	80a0444 <HAL_USB_USART_Flush_Data>

080a0c64 <_ZN9USBSerialD0Ev>:
 80a0c64:	b510      	push	{r4, lr}
 80a0c66:	4604      	mov	r4, r0
 80a0c68:	2114      	movs	r1, #20
 80a0c6a:	f000 f9fa 	bl	80a1062 <_ZdlPvj>
 80a0c6e:	4620      	mov	r0, r4
 80a0c70:	bd10      	pop	{r4, pc}

080a0c72 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a0c72:	b538      	push	{r3, r4, r5, lr}
 80a0c74:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a0c76:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a0c78:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a0c7a:	f7ff fbcb 	bl	80a0414 <HAL_USB_USART_Available_Data_For_Write>
 80a0c7e:	2800      	cmp	r0, #0
 80a0c80:	dc01      	bgt.n	80a0c86 <_ZN9USBSerial5writeEh+0x14>
 80a0c82:	7c60      	ldrb	r0, [r4, #17]
 80a0c84:	b128      	cbz	r0, 80a0c92 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a0c86:	4629      	mov	r1, r5
 80a0c88:	7c20      	ldrb	r0, [r4, #16]
 80a0c8a:	f7ff fbd3 	bl	80a0434 <HAL_USB_USART_Send_Data>
 80a0c8e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a0c92:	bd38      	pop	{r3, r4, r5, pc}

080a0c94 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a0c94:	b510      	push	{r4, lr}
 80a0c96:	4604      	mov	r4, r0
 80a0c98:	2300      	movs	r3, #0
 80a0c9a:	6063      	str	r3, [r4, #4]
 80a0c9c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a0ca0:	60a3      	str	r3, [r4, #8]
 80a0ca2:	4b05      	ldr	r3, [pc, #20]	; (80a0cb8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a0ca4:	4608      	mov	r0, r1
 80a0ca6:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a0ca8:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a0caa:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a0cac:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a0cae:	4611      	mov	r1, r2
 80a0cb0:	f7ff fba0 	bl	80a03f4 <HAL_USB_USART_Init>
}
 80a0cb4:	4620      	mov	r0, r4
 80a0cb6:	bd10      	pop	{r4, pc}
 80a0cb8:	080a2540 	.word	0x080a2540

080a0cbc <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a0cbc:	b510      	push	{r4, lr}
 80a0cbe:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a0cc0:	2214      	movs	r2, #20
 80a0cc2:	2100      	movs	r1, #0
 80a0cc4:	f001 fb05 	bl	80a22d2 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a0cc8:	4b05      	ldr	r3, [pc, #20]	; (80a0ce0 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a0cca:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a0ccc:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a0cce:	4b05      	ldr	r3, [pc, #20]	; (80a0ce4 <_Z19acquireSerialBufferv+0x28>)
 80a0cd0:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a0cd2:	f240 1301 	movw	r3, #257	; 0x101
 80a0cd6:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a0cd8:	2381      	movs	r3, #129	; 0x81
 80a0cda:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a0cdc:	bd10      	pop	{r4, pc}
 80a0cde:	bf00      	nop
 80a0ce0:	20000239 	.word	0x20000239
 80a0ce4:	200001b8 	.word	0x200001b8

080a0ce8 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a0ce8:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a0cea:	4d0e      	ldr	r5, [pc, #56]	; (80a0d24 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a0cec:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a0cee:	a801      	add	r0, sp, #4
 80a0cf0:	f7ff ffe4 	bl	80a0cbc <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a0cf4:	6829      	ldr	r1, [r5, #0]
 80a0cf6:	f011 0401 	ands.w	r4, r1, #1
 80a0cfa:	d110      	bne.n	80a0d1e <_Z16_fetch_usbserialv+0x36>
 80a0cfc:	4628      	mov	r0, r5
 80a0cfe:	f7ff f9d0 	bl	80a00a2 <__cxa_guard_acquire>
 80a0d02:	b160      	cbz	r0, 80a0d1e <_Z16_fetch_usbserialv+0x36>
 80a0d04:	aa01      	add	r2, sp, #4
 80a0d06:	4621      	mov	r1, r4
 80a0d08:	4807      	ldr	r0, [pc, #28]	; (80a0d28 <_Z16_fetch_usbserialv+0x40>)
 80a0d0a:	f7ff ffc3 	bl	80a0c94 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a0d0e:	4628      	mov	r0, r5
 80a0d10:	f7ff f9cc 	bl	80a00ac <__cxa_guard_release>
 80a0d14:	4a05      	ldr	r2, [pc, #20]	; (80a0d2c <_Z16_fetch_usbserialv+0x44>)
 80a0d16:	4906      	ldr	r1, [pc, #24]	; (80a0d30 <_Z16_fetch_usbserialv+0x48>)
 80a0d18:	4803      	ldr	r0, [pc, #12]	; (80a0d28 <_Z16_fetch_usbserialv+0x40>)
 80a0d1a:	f000 f99d 	bl	80a1058 <__aeabi_atexit>
	return _usbserial;
}
 80a0d1e:	4802      	ldr	r0, [pc, #8]	; (80a0d28 <_Z16_fetch_usbserialv+0x40>)
 80a0d20:	b007      	add	sp, #28
 80a0d22:	bd30      	pop	{r4, r5, pc}
 80a0d24:	200001b4 	.word	0x200001b4
 80a0d28:	2000033c 	.word	0x2000033c
 80a0d2c:	20000068 	.word	0x20000068
 80a0d30:	080a0c15 	.word	0x080a0c15

080a0d34 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a0d34:	b510      	push	{r4, lr}
 80a0d36:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a0d38:	2214      	movs	r2, #20
 80a0d3a:	2100      	movs	r1, #0
 80a0d3c:	f001 fac9 	bl	80a22d2 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a0d40:	4b05      	ldr	r3, [pc, #20]	; (80a0d58 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a0d42:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a0d44:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a0d46:	4b05      	ldr	r3, [pc, #20]	; (80a0d5c <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a0d48:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a0d4a:	f240 1301 	movw	r3, #257	; 0x101
 80a0d4e:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a0d50:	2381      	movs	r3, #129	; 0x81
 80a0d52:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a0d54:	bd10      	pop	{r4, pc}
 80a0d56:	bf00      	nop
 80a0d58:	200003ec 	.word	0x200003ec
 80a0d5c:	20000354 	.word	0x20000354

080a0d60 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a0d60:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a0d62:	4c0e      	ldr	r4, [pc, #56]	; (80a0d9c <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a0d64:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a0d66:	a801      	add	r0, sp, #4
 80a0d68:	f7ff ffe4 	bl	80a0d34 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a0d6c:	6823      	ldr	r3, [r4, #0]
 80a0d6e:	07db      	lsls	r3, r3, #31
 80a0d70:	d410      	bmi.n	80a0d94 <_Z17_fetch_usbserial1v+0x34>
 80a0d72:	4620      	mov	r0, r4
 80a0d74:	f7ff f995 	bl	80a00a2 <__cxa_guard_acquire>
 80a0d78:	b160      	cbz	r0, 80a0d94 <_Z17_fetch_usbserial1v+0x34>
 80a0d7a:	aa01      	add	r2, sp, #4
 80a0d7c:	2101      	movs	r1, #1
 80a0d7e:	4808      	ldr	r0, [pc, #32]	; (80a0da0 <_Z17_fetch_usbserial1v+0x40>)
 80a0d80:	f7ff ff88 	bl	80a0c94 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a0d84:	4620      	mov	r0, r4
 80a0d86:	f7ff f991 	bl	80a00ac <__cxa_guard_release>
 80a0d8a:	4a06      	ldr	r2, [pc, #24]	; (80a0da4 <_Z17_fetch_usbserial1v+0x44>)
 80a0d8c:	4906      	ldr	r1, [pc, #24]	; (80a0da8 <_Z17_fetch_usbserial1v+0x48>)
 80a0d8e:	4804      	ldr	r0, [pc, #16]	; (80a0da0 <_Z17_fetch_usbserial1v+0x40>)
 80a0d90:	f000 f962 	bl	80a1058 <__aeabi_atexit>
  return _usbserial1;
}
 80a0d94:	4802      	ldr	r0, [pc, #8]	; (80a0da0 <_Z17_fetch_usbserial1v+0x40>)
 80a0d96:	b006      	add	sp, #24
 80a0d98:	bd10      	pop	{r4, pc}
 80a0d9a:	bf00      	nop
 80a0d9c:	20000350 	.word	0x20000350
 80a0da0:	200003d8 	.word	0x200003d8
 80a0da4:	20000068 	.word	0x20000068
 80a0da8:	080a0c15 	.word	0x080a0c15

080a0dac <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a0dac:	2200      	movs	r2, #0
 80a0dae:	4611      	mov	r1, r2
 80a0db0:	6840      	ldr	r0, [r0, #4]
 80a0db2:	f7ff bb9b 	b.w	80a04ec <network_ready>

080a0db6 <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a0db6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0db8:	4616      	mov	r6, r2
 80a0dba:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a0dbc:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a0dbe:	460f      	mov	r7, r1
 80a0dc0:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a0dc2:	2100      	movs	r1, #0
 80a0dc4:	a803      	add	r0, sp, #12
 80a0dc6:	f001 fa84 	bl	80a22d2 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a0dca:	4630      	mov	r0, r6
 80a0dcc:	f001 fab2 	bl	80a2334 <strlen>
 80a0dd0:	2500      	movs	r5, #0
 80a0dd2:	9500      	str	r5, [sp, #0]
 80a0dd4:	b281      	uxth	r1, r0
 80a0dd6:	687b      	ldr	r3, [r7, #4]
 80a0dd8:	aa03      	add	r2, sp, #12
 80a0dda:	4630      	mov	r0, r6
 80a0ddc:	f7ff fb3a 	bl	80a0454 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a0de0:	b120      	cbz	r0, 80a0dec <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a0de2:	4629      	mov	r1, r5
 80a0de4:	4620      	mov	r0, r4
 80a0de6:	f7ff fc71 	bl	80a06cc <_ZN9IPAddressC1Em>
 80a0dea:	e003      	b.n	80a0df4 <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a0dec:	a903      	add	r1, sp, #12
 80a0dee:	4620      	mov	r0, r4
 80a0df0:	f7ff fc5a 	bl	80a06a8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a0df4:	4620      	mov	r0, r4
 80a0df6:	b009      	add	sp, #36	; 0x24
 80a0df8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a0dfa <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a0dfa:	2200      	movs	r2, #0
 80a0dfc:	4611      	mov	r1, r2
 80a0dfe:	6840      	ldr	r0, [r0, #4]
 80a0e00:	f7ff bb94 	b.w	80a052c <network_listening>

080a0e04 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a0e04:	2200      	movs	r2, #0
 80a0e06:	4611      	mov	r1, r2
 80a0e08:	6840      	ldr	r0, [r0, #4]
 80a0e0a:	f7ff bb9f 	b.w	80a054c <network_get_listen_timeout>

080a0e0e <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a0e0e:	2200      	movs	r2, #0
 80a0e10:	6840      	ldr	r0, [r0, #4]
 80a0e12:	f7ff bb93 	b.w	80a053c <network_set_listen_timeout>

080a0e16 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a0e16:	2200      	movs	r2, #0
 80a0e18:	f081 0101 	eor.w	r1, r1, #1
 80a0e1c:	6840      	ldr	r0, [r0, #4]
 80a0e1e:	f7ff bb7d 	b.w	80a051c <network_listen>

080a0e22 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a0e22:	2300      	movs	r3, #0
 80a0e24:	461a      	mov	r2, r3
 80a0e26:	4619      	mov	r1, r3
 80a0e28:	6840      	ldr	r0, [r0, #4]
 80a0e2a:	f7ff bb6f 	b.w	80a050c <network_off>

080a0e2e <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a0e2e:	2300      	movs	r3, #0
 80a0e30:	461a      	mov	r2, r3
 80a0e32:	4619      	mov	r1, r3
 80a0e34:	6840      	ldr	r0, [r0, #4]
 80a0e36:	f7ff bb61 	b.w	80a04fc <network_on>

080a0e3a <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a0e3a:	2200      	movs	r2, #0
 80a0e3c:	4611      	mov	r1, r2
 80a0e3e:	6840      	ldr	r0, [r0, #4]
 80a0e40:	f7ff bb44 	b.w	80a04cc <network_connecting>

080a0e44 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a0e44:	2200      	movs	r2, #0
 80a0e46:	2102      	movs	r1, #2
 80a0e48:	6840      	ldr	r0, [r0, #4]
 80a0e4a:	f7ff bb47 	b.w	80a04dc <network_disconnect>

080a0e4e <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a0e4e:	2300      	movs	r3, #0
 80a0e50:	461a      	mov	r2, r3
 80a0e52:	6840      	ldr	r0, [r0, #4]
 80a0e54:	f7ff bb32 	b.w	80a04bc <network_connect>

080a0e58 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a0e58:	4b02      	ldr	r3, [pc, #8]	; (80a0e64 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a0e5a:	2204      	movs	r2, #4
 80a0e5c:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a0e5e:	4a02      	ldr	r2, [pc, #8]	; (80a0e68 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a0e60:	601a      	str	r2, [r3, #0]
 80a0e62:	4770      	bx	lr
 80a0e64:	200004f0 	.word	0x200004f0
 80a0e68:	080a2570 	.word	0x080a2570

080a0e6c <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a0e6c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a0e6e:	4b14      	ldr	r3, [pc, #80]	; (80a0ec0 <serialEventRun+0x54>)
 80a0e70:	b133      	cbz	r3, 80a0e80 <serialEventRun+0x14>
 80a0e72:	f7ff ff39 	bl	80a0ce8 <_Z16_fetch_usbserialv>
 80a0e76:	6803      	ldr	r3, [r0, #0]
 80a0e78:	691b      	ldr	r3, [r3, #16]
 80a0e7a:	4798      	blx	r3
 80a0e7c:	2800      	cmp	r0, #0
 80a0e7e:	dc16      	bgt.n	80a0eae <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a0e80:	4b10      	ldr	r3, [pc, #64]	; (80a0ec4 <serialEventRun+0x58>)
 80a0e82:	b133      	cbz	r3, 80a0e92 <serialEventRun+0x26>
 80a0e84:	f7ff fe9e 	bl	80a0bc4 <_Z22__fetch_global_Serial1v>
 80a0e88:	6803      	ldr	r3, [r0, #0]
 80a0e8a:	691b      	ldr	r3, [r3, #16]
 80a0e8c:	4798      	blx	r3
 80a0e8e:	2800      	cmp	r0, #0
 80a0e90:	dc10      	bgt.n	80a0eb4 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a0e92:	4b0d      	ldr	r3, [pc, #52]	; (80a0ec8 <serialEventRun+0x5c>)
 80a0e94:	b10b      	cbz	r3, 80a0e9a <serialEventRun+0x2e>
 80a0e96:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a0e9a:	4b0c      	ldr	r3, [pc, #48]	; (80a0ecc <serialEventRun+0x60>)
 80a0e9c:	b17b      	cbz	r3, 80a0ebe <serialEventRun+0x52>
 80a0e9e:	f7ff ff5f 	bl	80a0d60 <_Z17_fetch_usbserial1v>
 80a0ea2:	6803      	ldr	r3, [r0, #0]
 80a0ea4:	691b      	ldr	r3, [r3, #16]
 80a0ea6:	4798      	blx	r3
 80a0ea8:	2800      	cmp	r0, #0
 80a0eaa:	dc06      	bgt.n	80a0eba <serialEventRun+0x4e>
 80a0eac:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a0eae:	f3af 8000 	nop.w
 80a0eb2:	e7e5      	b.n	80a0e80 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a0eb4:	f3af 8000 	nop.w
 80a0eb8:	e7eb      	b.n	80a0e92 <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a0eba:	f3af 8000 	nop.w
 80a0ebe:	bd08      	pop	{r3, pc}
	...

080a0ed0 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a0ed0:	b508      	push	{r3, lr}
	serialEventRun();
 80a0ed2:	f7ff ffcb 	bl	80a0e6c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a0ed6:	f7ff f9f3 	bl	80a02c0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a0eda:	4b01      	ldr	r3, [pc, #4]	; (80a0ee0 <_post_loop+0x10>)
 80a0edc:	6018      	str	r0, [r3, #0]
 80a0ede:	bd08      	pop	{r3, pc}
 80a0ee0:	20000500 	.word	0x20000500

080a0ee4 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a0ee4:	4802      	ldr	r0, [pc, #8]	; (80a0ef0 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a0ee6:	4a03      	ldr	r2, [pc, #12]	; (80a0ef4 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a0ee8:	4903      	ldr	r1, [pc, #12]	; (80a0ef8 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a0eea:	1a12      	subs	r2, r2, r0
 80a0eec:	f001 b9e6 	b.w	80a22bc <memcpy>
 80a0ef0:	40024000 	.word	0x40024000
 80a0ef4:	40024004 	.word	0x40024004
 80a0ef8:	080a2640 	.word	0x080a2640

080a0efc <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a0efc:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a0efe:	2300      	movs	r3, #0
 80a0f00:	9300      	str	r3, [sp, #0]
 80a0f02:	461a      	mov	r2, r3
 80a0f04:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a0f08:	f7ff fac6 	bl	80a0498 <system_ctrl_set_result>
}
 80a0f0c:	b003      	add	sp, #12
 80a0f0e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a0f14 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a0f14:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a0f16:	8843      	ldrh	r3, [r0, #2]
 80a0f18:	2b0a      	cmp	r3, #10
 80a0f1a:	d008      	beq.n	80a0f2e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a0f1c:	2b50      	cmp	r3, #80	; 0x50
 80a0f1e:	d109      	bne.n	80a0f34 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a0f20:	4b09      	ldr	r3, [pc, #36]	; (80a0f48 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a0f22:	681b      	ldr	r3, [r3, #0]
 80a0f24:	b13b      	cbz	r3, 80a0f36 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a0f26:	b003      	add	sp, #12
 80a0f28:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a0f2c:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a0f2e:	f7ff ffe5 	bl	80a0efc <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a0f32:	e006      	b.n	80a0f42 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a0f34:	2300      	movs	r3, #0
 80a0f36:	9300      	str	r3, [sp, #0]
 80a0f38:	461a      	mov	r2, r3
 80a0f3a:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a0f3e:	f7ff faab 	bl	80a0498 <system_ctrl_set_result>
        break;
    }
}
 80a0f42:	b003      	add	sp, #12
 80a0f44:	f85d fb04 	ldr.w	pc, [sp], #4
 80a0f48:	200004f8 	.word	0x200004f8

080a0f4c <module_user_init_hook>:

void module_user_init_hook()
{
 80a0f4c:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a0f4e:	4c10      	ldr	r4, [pc, #64]	; (80a0f90 <module_user_init_hook+0x44>)
 80a0f50:	4d10      	ldr	r5, [pc, #64]	; (80a0f94 <module_user_init_hook+0x48>)
 80a0f52:	6823      	ldr	r3, [r4, #0]
 80a0f54:	42ab      	cmp	r3, r5
 80a0f56:	4b10      	ldr	r3, [pc, #64]	; (80a0f98 <module_user_init_hook+0x4c>)
 80a0f58:	bf0c      	ite	eq
 80a0f5a:	2201      	moveq	r2, #1
 80a0f5c:	2200      	movne	r2, #0
 80a0f5e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a0f60:	d002      	beq.n	80a0f68 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a0f62:	f7ff ffbf 	bl	80a0ee4 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a0f66:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a0f68:	f7ff f9a2 	bl	80a02b0 <HAL_RNG_GetRandomNumber>
 80a0f6c:	4604      	mov	r4, r0
    srand(seed);
 80a0f6e:	f001 f9b9 	bl	80a22e4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a0f72:	4b0a      	ldr	r3, [pc, #40]	; (80a0f9c <module_user_init_hook+0x50>)
 80a0f74:	b113      	cbz	r3, 80a0f7c <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a0f76:	4620      	mov	r0, r4
 80a0f78:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a0f7c:	2100      	movs	r1, #0
 80a0f7e:	4807      	ldr	r0, [pc, #28]	; (80a0f9c <module_user_init_hook+0x50>)
 80a0f80:	f7ff fa94 	bl	80a04ac <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a0f84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a0f88:	2100      	movs	r1, #0
 80a0f8a:	4805      	ldr	r0, [pc, #20]	; (80a0fa0 <module_user_init_hook+0x54>)
 80a0f8c:	f7ff ba7a 	b.w	80a0484 <system_ctrl_set_app_request_handler>
 80a0f90:	40024000 	.word	0x40024000
 80a0f94:	9a271c1e 	.word	0x9a271c1e
 80a0f98:	200004fc 	.word	0x200004fc
 80a0f9c:	00000000 	.word	0x00000000
 80a0fa0:	080a0f15 	.word	0x080a0f15

080a0fa4 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a0fa4:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a0fa6:	4d0b      	ldr	r5, [pc, #44]	; (80a0fd4 <_Z19__fetch_global_Wirev+0x30>)
 80a0fa8:	6829      	ldr	r1, [r5, #0]
 80a0faa:	f011 0401 	ands.w	r4, r1, #1
 80a0fae:	d10f      	bne.n	80a0fd0 <_Z19__fetch_global_Wirev+0x2c>
 80a0fb0:	4628      	mov	r0, r5
 80a0fb2:	f7ff f876 	bl	80a00a2 <__cxa_guard_acquire>
 80a0fb6:	b158      	cbz	r0, 80a0fd0 <_Z19__fetch_global_Wirev+0x2c>
 80a0fb8:	4621      	mov	r1, r4
 80a0fba:	4807      	ldr	r0, [pc, #28]	; (80a0fd8 <_Z19__fetch_global_Wirev+0x34>)
 80a0fbc:	f7ff fb16 	bl	80a05ec <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a0fc0:	4628      	mov	r0, r5
 80a0fc2:	f7ff f873 	bl	80a00ac <__cxa_guard_release>
 80a0fc6:	4a05      	ldr	r2, [pc, #20]	; (80a0fdc <_Z19__fetch_global_Wirev+0x38>)
 80a0fc8:	4905      	ldr	r1, [pc, #20]	; (80a0fe0 <_Z19__fetch_global_Wirev+0x3c>)
 80a0fca:	4803      	ldr	r0, [pc, #12]	; (80a0fd8 <_Z19__fetch_global_Wirev+0x34>)
 80a0fcc:	f000 f844 	bl	80a1058 <__aeabi_atexit>
	return wire;
}
 80a0fd0:	4801      	ldr	r0, [pc, #4]	; (80a0fd8 <_Z19__fetch_global_Wirev+0x34>)
 80a0fd2:	bd38      	pop	{r3, r4, r5, pc}
 80a0fd4:	20000504 	.word	0x20000504
 80a0fd8:	20000508 	.word	0x20000508
 80a0fdc:	20000068 	.word	0x20000068
 80a0fe0:	080a0595 	.word	0x080a0595

080a0fe4 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a0fe4:	b513      	push	{r0, r1, r4, lr}
 80a0fe6:	4c08      	ldr	r4, [pc, #32]	; (80a1008 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a0fe8:	2300      	movs	r3, #0
 80a0fea:	461a      	mov	r2, r3
 80a0fec:	4619      	mov	r1, r3
 80a0fee:	9300      	str	r3, [sp, #0]
 80a0ff0:	4620      	mov	r0, r4
 80a0ff2:	f7ff fb81 	bl	80a06f8 <_ZN9IPAddressC1Ehhhh>
 80a0ff6:	4620      	mov	r0, r4
 80a0ff8:	4a04      	ldr	r2, [pc, #16]	; (80a100c <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a0ffa:	4905      	ldr	r1, [pc, #20]	; (80a1010 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a0ffc:	b002      	add	sp, #8
 80a0ffe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a1002:	f000 b829 	b.w	80a1058 <__aeabi_atexit>
 80a1006:	bf00      	nop
 80a1008:	2000051c 	.word	0x2000051c
 80a100c:	20000068 	.word	0x20000068
 80a1010:	080a0649 	.word	0x080a0649

080a1014 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a1014:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a1016:	4c0c      	ldr	r4, [pc, #48]	; (80a1048 <_GLOBAL__sub_I_SPI+0x34>)
 80a1018:	4e0c      	ldr	r6, [pc, #48]	; (80a104c <_GLOBAL__sub_I_SPI+0x38>)
 80a101a:	4d0d      	ldr	r5, [pc, #52]	; (80a1050 <_GLOBAL__sub_I_SPI+0x3c>)
 80a101c:	2100      	movs	r1, #0
 80a101e:	4620      	mov	r0, r4
 80a1020:	f7ff fd4e 	bl	80a0ac0 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a1024:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a1026:	4c0b      	ldr	r4, [pc, #44]	; (80a1054 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a1028:	4632      	mov	r2, r6
 80a102a:	4629      	mov	r1, r5
 80a102c:	f000 f814 	bl	80a1058 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a1030:	2101      	movs	r1, #1
 80a1032:	4620      	mov	r0, r4
 80a1034:	f7ff fd44 	bl	80a0ac0 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a1038:	4632      	mov	r2, r6
 80a103a:	4629      	mov	r1, r5
 80a103c:	4620      	mov	r0, r4
 80a103e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a1042:	f000 b809 	b.w	80a1058 <__aeabi_atexit>
 80a1046:	bf00      	nop
 80a1048:	20000534 	.word	0x20000534
 80a104c:	20000068 	.word	0x20000068
 80a1050:	080a0ab1 	.word	0x080a0ab1
 80a1054:	20000544 	.word	0x20000544

080a1058 <__aeabi_atexit>:
 80a1058:	460b      	mov	r3, r1
 80a105a:	4601      	mov	r1, r0
 80a105c:	4618      	mov	r0, r3
 80a105e:	f001 b91f 	b.w	80a22a0 <__cxa_atexit>

080a1062 <_ZdlPvj>:
 80a1062:	f7ff b81c 	b.w	80a009e <_ZdlPv>
	...

080a1068 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a1068:	4b24      	ldr	r3, [pc, #144]	; (80a10fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a106a:	681a      	ldr	r2, [r3, #0]
 80a106c:	07d0      	lsls	r0, r2, #31
 80a106e:	bf5c      	itt	pl
 80a1070:	2201      	movpl	r2, #1
 80a1072:	601a      	strpl	r2, [r3, #0]
 80a1074:	4b22      	ldr	r3, [pc, #136]	; (80a1100 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a1076:	681a      	ldr	r2, [r3, #0]
 80a1078:	07d1      	lsls	r1, r2, #31
 80a107a:	bf5c      	itt	pl
 80a107c:	2201      	movpl	r2, #1
 80a107e:	601a      	strpl	r2, [r3, #0]
 80a1080:	4b20      	ldr	r3, [pc, #128]	; (80a1104 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a1082:	681a      	ldr	r2, [r3, #0]
 80a1084:	07d2      	lsls	r2, r2, #31
 80a1086:	bf5c      	itt	pl
 80a1088:	2201      	movpl	r2, #1
 80a108a:	601a      	strpl	r2, [r3, #0]
 80a108c:	4b1e      	ldr	r3, [pc, #120]	; (80a1108 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a108e:	681a      	ldr	r2, [r3, #0]
 80a1090:	07d0      	lsls	r0, r2, #31
 80a1092:	bf5c      	itt	pl
 80a1094:	2201      	movpl	r2, #1
 80a1096:	601a      	strpl	r2, [r3, #0]
 80a1098:	4b1c      	ldr	r3, [pc, #112]	; (80a110c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a109a:	681a      	ldr	r2, [r3, #0]
 80a109c:	07d1      	lsls	r1, r2, #31
 80a109e:	bf5c      	itt	pl
 80a10a0:	2201      	movpl	r2, #1
 80a10a2:	601a      	strpl	r2, [r3, #0]
 80a10a4:	4b1a      	ldr	r3, [pc, #104]	; (80a1110 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a10a6:	681a      	ldr	r2, [r3, #0]
 80a10a8:	07d2      	lsls	r2, r2, #31
 80a10aa:	bf5c      	itt	pl
 80a10ac:	2201      	movpl	r2, #1
 80a10ae:	601a      	strpl	r2, [r3, #0]
 80a10b0:	4b18      	ldr	r3, [pc, #96]	; (80a1114 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a10b2:	681a      	ldr	r2, [r3, #0]
 80a10b4:	07d0      	lsls	r0, r2, #31
 80a10b6:	bf5c      	itt	pl
 80a10b8:	2201      	movpl	r2, #1
 80a10ba:	601a      	strpl	r2, [r3, #0]
 80a10bc:	4b16      	ldr	r3, [pc, #88]	; (80a1118 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a10be:	681a      	ldr	r2, [r3, #0]
 80a10c0:	07d1      	lsls	r1, r2, #31
 80a10c2:	bf5c      	itt	pl
 80a10c4:	2201      	movpl	r2, #1
 80a10c6:	601a      	strpl	r2, [r3, #0]
 80a10c8:	4b14      	ldr	r3, [pc, #80]	; (80a111c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a10ca:	681a      	ldr	r2, [r3, #0]
 80a10cc:	07d2      	lsls	r2, r2, #31
 80a10ce:	bf5c      	itt	pl
 80a10d0:	2201      	movpl	r2, #1
 80a10d2:	601a      	strpl	r2, [r3, #0]
 80a10d4:	4b12      	ldr	r3, [pc, #72]	; (80a1120 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a10d6:	681a      	ldr	r2, [r3, #0]
 80a10d8:	07d0      	lsls	r0, r2, #31
 80a10da:	bf5c      	itt	pl
 80a10dc:	2201      	movpl	r2, #1
 80a10de:	601a      	strpl	r2, [r3, #0]
 80a10e0:	4b10      	ldr	r3, [pc, #64]	; (80a1124 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a10e2:	681a      	ldr	r2, [r3, #0]
 80a10e4:	07d1      	lsls	r1, r2, #31
 80a10e6:	bf5c      	itt	pl
 80a10e8:	2201      	movpl	r2, #1
 80a10ea:	601a      	strpl	r2, [r3, #0]
 80a10ec:	4b0e      	ldr	r3, [pc, #56]	; (80a1128 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a10ee:	681a      	ldr	r2, [r3, #0]
 80a10f0:	07d2      	lsls	r2, r2, #31
 80a10f2:	bf5c      	itt	pl
 80a10f4:	2201      	movpl	r2, #1
 80a10f6:	601a      	strpl	r2, [r3, #0]
 80a10f8:	4770      	bx	lr
 80a10fa:	bf00      	nop
 80a10fc:	20000580 	.word	0x20000580
 80a1100:	2000057c 	.word	0x2000057c
 80a1104:	20000578 	.word	0x20000578
 80a1108:	20000574 	.word	0x20000574
 80a110c:	20000570 	.word	0x20000570
 80a1110:	2000056c 	.word	0x2000056c
 80a1114:	20000568 	.word	0x20000568
 80a1118:	20000564 	.word	0x20000564
 80a111c:	20000560 	.word	0x20000560
 80a1120:	2000055c 	.word	0x2000055c
 80a1124:	20000558 	.word	0x20000558
 80a1128:	20000554 	.word	0x20000554

080a112c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a112c:	4b18      	ldr	r3, [pc, #96]	; (80a1190 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a112e:	681a      	ldr	r2, [r3, #0]
 80a1130:	07d1      	lsls	r1, r2, #31
 80a1132:	bf5c      	itt	pl
 80a1134:	2201      	movpl	r2, #1
 80a1136:	601a      	strpl	r2, [r3, #0]
 80a1138:	4b16      	ldr	r3, [pc, #88]	; (80a1194 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a113a:	681a      	ldr	r2, [r3, #0]
 80a113c:	07d2      	lsls	r2, r2, #31
 80a113e:	bf5c      	itt	pl
 80a1140:	2201      	movpl	r2, #1
 80a1142:	601a      	strpl	r2, [r3, #0]
 80a1144:	4b14      	ldr	r3, [pc, #80]	; (80a1198 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a1146:	681a      	ldr	r2, [r3, #0]
 80a1148:	07d0      	lsls	r0, r2, #31
 80a114a:	bf5c      	itt	pl
 80a114c:	2201      	movpl	r2, #1
 80a114e:	601a      	strpl	r2, [r3, #0]
 80a1150:	4b12      	ldr	r3, [pc, #72]	; (80a119c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a1152:	681a      	ldr	r2, [r3, #0]
 80a1154:	07d1      	lsls	r1, r2, #31
 80a1156:	bf5c      	itt	pl
 80a1158:	2201      	movpl	r2, #1
 80a115a:	601a      	strpl	r2, [r3, #0]
 80a115c:	4b10      	ldr	r3, [pc, #64]	; (80a11a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a115e:	681a      	ldr	r2, [r3, #0]
 80a1160:	07d2      	lsls	r2, r2, #31
 80a1162:	bf5c      	itt	pl
 80a1164:	2201      	movpl	r2, #1
 80a1166:	601a      	strpl	r2, [r3, #0]
 80a1168:	4b0e      	ldr	r3, [pc, #56]	; (80a11a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a116a:	681a      	ldr	r2, [r3, #0]
 80a116c:	07d0      	lsls	r0, r2, #31
 80a116e:	bf5c      	itt	pl
 80a1170:	2201      	movpl	r2, #1
 80a1172:	601a      	strpl	r2, [r3, #0]
 80a1174:	4b0c      	ldr	r3, [pc, #48]	; (80a11a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a1176:	681a      	ldr	r2, [r3, #0]
 80a1178:	07d1      	lsls	r1, r2, #31
 80a117a:	bf5c      	itt	pl
 80a117c:	2201      	movpl	r2, #1
 80a117e:	601a      	strpl	r2, [r3, #0]
 80a1180:	4b0a      	ldr	r3, [pc, #40]	; (80a11ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a1182:	681a      	ldr	r2, [r3, #0]
 80a1184:	07d2      	lsls	r2, r2, #31
 80a1186:	bf5c      	itt	pl
 80a1188:	2201      	movpl	r2, #1
 80a118a:	601a      	strpl	r2, [r3, #0]
 80a118c:	4770      	bx	lr
 80a118e:	bf00      	nop
 80a1190:	200005a0 	.word	0x200005a0
 80a1194:	2000059c 	.word	0x2000059c
 80a1198:	20000598 	.word	0x20000598
 80a119c:	20000594 	.word	0x20000594
 80a11a0:	20000590 	.word	0x20000590
 80a11a4:	2000058c 	.word	0x2000058c
 80a11a8:	20000588 	.word	0x20000588
 80a11ac:	20000584 	.word	0x20000584

080a11b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a11b0:	4b18      	ldr	r3, [pc, #96]	; (80a1214 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a11b2:	681a      	ldr	r2, [r3, #0]
 80a11b4:	07d1      	lsls	r1, r2, #31
 80a11b6:	bf5c      	itt	pl
 80a11b8:	2201      	movpl	r2, #1
 80a11ba:	601a      	strpl	r2, [r3, #0]
 80a11bc:	4b16      	ldr	r3, [pc, #88]	; (80a1218 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a11be:	681a      	ldr	r2, [r3, #0]
 80a11c0:	07d2      	lsls	r2, r2, #31
 80a11c2:	bf5c      	itt	pl
 80a11c4:	2201      	movpl	r2, #1
 80a11c6:	601a      	strpl	r2, [r3, #0]
 80a11c8:	4b14      	ldr	r3, [pc, #80]	; (80a121c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a11ca:	681a      	ldr	r2, [r3, #0]
 80a11cc:	07d0      	lsls	r0, r2, #31
 80a11ce:	bf5c      	itt	pl
 80a11d0:	2201      	movpl	r2, #1
 80a11d2:	601a      	strpl	r2, [r3, #0]
 80a11d4:	4b12      	ldr	r3, [pc, #72]	; (80a1220 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a11d6:	681a      	ldr	r2, [r3, #0]
 80a11d8:	07d1      	lsls	r1, r2, #31
 80a11da:	bf5c      	itt	pl
 80a11dc:	2201      	movpl	r2, #1
 80a11de:	601a      	strpl	r2, [r3, #0]
 80a11e0:	4b10      	ldr	r3, [pc, #64]	; (80a1224 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a11e2:	681a      	ldr	r2, [r3, #0]
 80a11e4:	07d2      	lsls	r2, r2, #31
 80a11e6:	bf5c      	itt	pl
 80a11e8:	2201      	movpl	r2, #1
 80a11ea:	601a      	strpl	r2, [r3, #0]
 80a11ec:	4b0e      	ldr	r3, [pc, #56]	; (80a1228 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a11ee:	681a      	ldr	r2, [r3, #0]
 80a11f0:	07d0      	lsls	r0, r2, #31
 80a11f2:	bf5c      	itt	pl
 80a11f4:	2201      	movpl	r2, #1
 80a11f6:	601a      	strpl	r2, [r3, #0]
 80a11f8:	4b0c      	ldr	r3, [pc, #48]	; (80a122c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a11fa:	681a      	ldr	r2, [r3, #0]
 80a11fc:	07d1      	lsls	r1, r2, #31
 80a11fe:	bf5c      	itt	pl
 80a1200:	2201      	movpl	r2, #1
 80a1202:	601a      	strpl	r2, [r3, #0]
 80a1204:	4b0a      	ldr	r3, [pc, #40]	; (80a1230 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a1206:	681a      	ldr	r2, [r3, #0]
 80a1208:	07d2      	lsls	r2, r2, #31
 80a120a:	bf5c      	itt	pl
 80a120c:	2201      	movpl	r2, #1
 80a120e:	601a      	strpl	r2, [r3, #0]
 80a1210:	4770      	bx	lr
 80a1212:	bf00      	nop
 80a1214:	200005c0 	.word	0x200005c0
 80a1218:	200005bc 	.word	0x200005bc
 80a121c:	200005b8 	.word	0x200005b8
 80a1220:	200005b4 	.word	0x200005b4
 80a1224:	200005b0 	.word	0x200005b0
 80a1228:	200005ac 	.word	0x200005ac
 80a122c:	200005a8 	.word	0x200005a8
 80a1230:	200005a4 	.word	0x200005a4

080a1234 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a1234:	4b24      	ldr	r3, [pc, #144]	; (80a12c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a1236:	681a      	ldr	r2, [r3, #0]
 80a1238:	07d0      	lsls	r0, r2, #31
 80a123a:	bf5c      	itt	pl
 80a123c:	2201      	movpl	r2, #1
 80a123e:	601a      	strpl	r2, [r3, #0]
 80a1240:	4b22      	ldr	r3, [pc, #136]	; (80a12cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a1242:	681a      	ldr	r2, [r3, #0]
 80a1244:	07d1      	lsls	r1, r2, #31
 80a1246:	bf5c      	itt	pl
 80a1248:	2201      	movpl	r2, #1
 80a124a:	601a      	strpl	r2, [r3, #0]
 80a124c:	4b20      	ldr	r3, [pc, #128]	; (80a12d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a124e:	681a      	ldr	r2, [r3, #0]
 80a1250:	07d2      	lsls	r2, r2, #31
 80a1252:	bf5c      	itt	pl
 80a1254:	2201      	movpl	r2, #1
 80a1256:	601a      	strpl	r2, [r3, #0]
 80a1258:	4b1e      	ldr	r3, [pc, #120]	; (80a12d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a125a:	681a      	ldr	r2, [r3, #0]
 80a125c:	07d0      	lsls	r0, r2, #31
 80a125e:	bf5c      	itt	pl
 80a1260:	2201      	movpl	r2, #1
 80a1262:	601a      	strpl	r2, [r3, #0]
 80a1264:	4b1c      	ldr	r3, [pc, #112]	; (80a12d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a1266:	681a      	ldr	r2, [r3, #0]
 80a1268:	07d1      	lsls	r1, r2, #31
 80a126a:	bf5c      	itt	pl
 80a126c:	2201      	movpl	r2, #1
 80a126e:	601a      	strpl	r2, [r3, #0]
 80a1270:	4b1a      	ldr	r3, [pc, #104]	; (80a12dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a1272:	681a      	ldr	r2, [r3, #0]
 80a1274:	07d2      	lsls	r2, r2, #31
 80a1276:	bf5c      	itt	pl
 80a1278:	2201      	movpl	r2, #1
 80a127a:	601a      	strpl	r2, [r3, #0]
 80a127c:	4b18      	ldr	r3, [pc, #96]	; (80a12e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a127e:	681a      	ldr	r2, [r3, #0]
 80a1280:	07d0      	lsls	r0, r2, #31
 80a1282:	bf5c      	itt	pl
 80a1284:	2201      	movpl	r2, #1
 80a1286:	601a      	strpl	r2, [r3, #0]
 80a1288:	4b16      	ldr	r3, [pc, #88]	; (80a12e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a128a:	681a      	ldr	r2, [r3, #0]
 80a128c:	07d1      	lsls	r1, r2, #31
 80a128e:	bf5c      	itt	pl
 80a1290:	2201      	movpl	r2, #1
 80a1292:	601a      	strpl	r2, [r3, #0]
 80a1294:	4b14      	ldr	r3, [pc, #80]	; (80a12e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a1296:	681a      	ldr	r2, [r3, #0]
 80a1298:	07d2      	lsls	r2, r2, #31
 80a129a:	bf5c      	itt	pl
 80a129c:	2201      	movpl	r2, #1
 80a129e:	601a      	strpl	r2, [r3, #0]
 80a12a0:	4b12      	ldr	r3, [pc, #72]	; (80a12ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a12a2:	681a      	ldr	r2, [r3, #0]
 80a12a4:	07d0      	lsls	r0, r2, #31
 80a12a6:	bf5c      	itt	pl
 80a12a8:	2201      	movpl	r2, #1
 80a12aa:	601a      	strpl	r2, [r3, #0]
 80a12ac:	4b10      	ldr	r3, [pc, #64]	; (80a12f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a12ae:	681a      	ldr	r2, [r3, #0]
 80a12b0:	07d1      	lsls	r1, r2, #31
 80a12b2:	bf5c      	itt	pl
 80a12b4:	2201      	movpl	r2, #1
 80a12b6:	601a      	strpl	r2, [r3, #0]
 80a12b8:	4b0e      	ldr	r3, [pc, #56]	; (80a12f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a12ba:	681a      	ldr	r2, [r3, #0]
 80a12bc:	07d2      	lsls	r2, r2, #31
 80a12be:	bf5c      	itt	pl
 80a12c0:	2201      	movpl	r2, #1
 80a12c2:	601a      	strpl	r2, [r3, #0]
 80a12c4:	4770      	bx	lr
 80a12c6:	bf00      	nop
 80a12c8:	200005f0 	.word	0x200005f0
 80a12cc:	200005ec 	.word	0x200005ec
 80a12d0:	200005e8 	.word	0x200005e8
 80a12d4:	200005e4 	.word	0x200005e4
 80a12d8:	200005e0 	.word	0x200005e0
 80a12dc:	200005dc 	.word	0x200005dc
 80a12e0:	200005d8 	.word	0x200005d8
 80a12e4:	200005d4 	.word	0x200005d4
 80a12e8:	200005d0 	.word	0x200005d0
 80a12ec:	200005cc 	.word	0x200005cc
 80a12f0:	200005c8 	.word	0x200005c8
 80a12f4:	200005c4 	.word	0x200005c4

080a12f8 <__aeabi_drsub>:
 80a12f8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a12fc:	e002      	b.n	80a1304 <__adddf3>
 80a12fe:	bf00      	nop

080a1300 <__aeabi_dsub>:
 80a1300:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a1304 <__adddf3>:
 80a1304:	b530      	push	{r4, r5, lr}
 80a1306:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a130a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a130e:	ea94 0f05 	teq	r4, r5
 80a1312:	bf08      	it	eq
 80a1314:	ea90 0f02 	teqeq	r0, r2
 80a1318:	bf1f      	itttt	ne
 80a131a:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a131e:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a1322:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a1326:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a132a:	f000 80e2 	beq.w	80a14f2 <__adddf3+0x1ee>
 80a132e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a1332:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a1336:	bfb8      	it	lt
 80a1338:	426d      	neglt	r5, r5
 80a133a:	dd0c      	ble.n	80a1356 <__adddf3+0x52>
 80a133c:	442c      	add	r4, r5
 80a133e:	ea80 0202 	eor.w	r2, r0, r2
 80a1342:	ea81 0303 	eor.w	r3, r1, r3
 80a1346:	ea82 0000 	eor.w	r0, r2, r0
 80a134a:	ea83 0101 	eor.w	r1, r3, r1
 80a134e:	ea80 0202 	eor.w	r2, r0, r2
 80a1352:	ea81 0303 	eor.w	r3, r1, r3
 80a1356:	2d36      	cmp	r5, #54	; 0x36
 80a1358:	bf88      	it	hi
 80a135a:	bd30      	pophi	{r4, r5, pc}
 80a135c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a1360:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a1364:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a1368:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a136c:	d002      	beq.n	80a1374 <__adddf3+0x70>
 80a136e:	4240      	negs	r0, r0
 80a1370:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a1374:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a1378:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a137c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a1380:	d002      	beq.n	80a1388 <__adddf3+0x84>
 80a1382:	4252      	negs	r2, r2
 80a1384:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a1388:	ea94 0f05 	teq	r4, r5
 80a138c:	f000 80a7 	beq.w	80a14de <__adddf3+0x1da>
 80a1390:	f1a4 0401 	sub.w	r4, r4, #1
 80a1394:	f1d5 0e20 	rsbs	lr, r5, #32
 80a1398:	db0d      	blt.n	80a13b6 <__adddf3+0xb2>
 80a139a:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a139e:	fa22 f205 	lsr.w	r2, r2, r5
 80a13a2:	1880      	adds	r0, r0, r2
 80a13a4:	f141 0100 	adc.w	r1, r1, #0
 80a13a8:	fa03 f20e 	lsl.w	r2, r3, lr
 80a13ac:	1880      	adds	r0, r0, r2
 80a13ae:	fa43 f305 	asr.w	r3, r3, r5
 80a13b2:	4159      	adcs	r1, r3
 80a13b4:	e00e      	b.n	80a13d4 <__adddf3+0xd0>
 80a13b6:	f1a5 0520 	sub.w	r5, r5, #32
 80a13ba:	f10e 0e20 	add.w	lr, lr, #32
 80a13be:	2a01      	cmp	r2, #1
 80a13c0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a13c4:	bf28      	it	cs
 80a13c6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a13ca:	fa43 f305 	asr.w	r3, r3, r5
 80a13ce:	18c0      	adds	r0, r0, r3
 80a13d0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a13d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a13d8:	d507      	bpl.n	80a13ea <__adddf3+0xe6>
 80a13da:	f04f 0e00 	mov.w	lr, #0
 80a13de:	f1dc 0c00 	rsbs	ip, ip, #0
 80a13e2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a13e6:	eb6e 0101 	sbc.w	r1, lr, r1
 80a13ea:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a13ee:	d31b      	bcc.n	80a1428 <__adddf3+0x124>
 80a13f0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a13f4:	d30c      	bcc.n	80a1410 <__adddf3+0x10c>
 80a13f6:	0849      	lsrs	r1, r1, #1
 80a13f8:	ea5f 0030 	movs.w	r0, r0, rrx
 80a13fc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a1400:	f104 0401 	add.w	r4, r4, #1
 80a1404:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a1408:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a140c:	f080 809a 	bcs.w	80a1544 <__adddf3+0x240>
 80a1410:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a1414:	bf08      	it	eq
 80a1416:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a141a:	f150 0000 	adcs.w	r0, r0, #0
 80a141e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a1422:	ea41 0105 	orr.w	r1, r1, r5
 80a1426:	bd30      	pop	{r4, r5, pc}
 80a1428:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a142c:	4140      	adcs	r0, r0
 80a142e:	eb41 0101 	adc.w	r1, r1, r1
 80a1432:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a1436:	f1a4 0401 	sub.w	r4, r4, #1
 80a143a:	d1e9      	bne.n	80a1410 <__adddf3+0x10c>
 80a143c:	f091 0f00 	teq	r1, #0
 80a1440:	bf04      	itt	eq
 80a1442:	4601      	moveq	r1, r0
 80a1444:	2000      	moveq	r0, #0
 80a1446:	fab1 f381 	clz	r3, r1
 80a144a:	bf08      	it	eq
 80a144c:	3320      	addeq	r3, #32
 80a144e:	f1a3 030b 	sub.w	r3, r3, #11
 80a1452:	f1b3 0220 	subs.w	r2, r3, #32
 80a1456:	da0c      	bge.n	80a1472 <__adddf3+0x16e>
 80a1458:	320c      	adds	r2, #12
 80a145a:	dd08      	ble.n	80a146e <__adddf3+0x16a>
 80a145c:	f102 0c14 	add.w	ip, r2, #20
 80a1460:	f1c2 020c 	rsb	r2, r2, #12
 80a1464:	fa01 f00c 	lsl.w	r0, r1, ip
 80a1468:	fa21 f102 	lsr.w	r1, r1, r2
 80a146c:	e00c      	b.n	80a1488 <__adddf3+0x184>
 80a146e:	f102 0214 	add.w	r2, r2, #20
 80a1472:	bfd8      	it	le
 80a1474:	f1c2 0c20 	rsble	ip, r2, #32
 80a1478:	fa01 f102 	lsl.w	r1, r1, r2
 80a147c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a1480:	bfdc      	itt	le
 80a1482:	ea41 010c 	orrle.w	r1, r1, ip
 80a1486:	4090      	lslle	r0, r2
 80a1488:	1ae4      	subs	r4, r4, r3
 80a148a:	bfa2      	ittt	ge
 80a148c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a1490:	4329      	orrge	r1, r5
 80a1492:	bd30      	popge	{r4, r5, pc}
 80a1494:	ea6f 0404 	mvn.w	r4, r4
 80a1498:	3c1f      	subs	r4, #31
 80a149a:	da1c      	bge.n	80a14d6 <__adddf3+0x1d2>
 80a149c:	340c      	adds	r4, #12
 80a149e:	dc0e      	bgt.n	80a14be <__adddf3+0x1ba>
 80a14a0:	f104 0414 	add.w	r4, r4, #20
 80a14a4:	f1c4 0220 	rsb	r2, r4, #32
 80a14a8:	fa20 f004 	lsr.w	r0, r0, r4
 80a14ac:	fa01 f302 	lsl.w	r3, r1, r2
 80a14b0:	ea40 0003 	orr.w	r0, r0, r3
 80a14b4:	fa21 f304 	lsr.w	r3, r1, r4
 80a14b8:	ea45 0103 	orr.w	r1, r5, r3
 80a14bc:	bd30      	pop	{r4, r5, pc}
 80a14be:	f1c4 040c 	rsb	r4, r4, #12
 80a14c2:	f1c4 0220 	rsb	r2, r4, #32
 80a14c6:	fa20 f002 	lsr.w	r0, r0, r2
 80a14ca:	fa01 f304 	lsl.w	r3, r1, r4
 80a14ce:	ea40 0003 	orr.w	r0, r0, r3
 80a14d2:	4629      	mov	r1, r5
 80a14d4:	bd30      	pop	{r4, r5, pc}
 80a14d6:	fa21 f004 	lsr.w	r0, r1, r4
 80a14da:	4629      	mov	r1, r5
 80a14dc:	bd30      	pop	{r4, r5, pc}
 80a14de:	f094 0f00 	teq	r4, #0
 80a14e2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a14e6:	bf06      	itte	eq
 80a14e8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a14ec:	3401      	addeq	r4, #1
 80a14ee:	3d01      	subne	r5, #1
 80a14f0:	e74e      	b.n	80a1390 <__adddf3+0x8c>
 80a14f2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a14f6:	bf18      	it	ne
 80a14f8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a14fc:	d029      	beq.n	80a1552 <__adddf3+0x24e>
 80a14fe:	ea94 0f05 	teq	r4, r5
 80a1502:	bf08      	it	eq
 80a1504:	ea90 0f02 	teqeq	r0, r2
 80a1508:	d005      	beq.n	80a1516 <__adddf3+0x212>
 80a150a:	ea54 0c00 	orrs.w	ip, r4, r0
 80a150e:	bf04      	itt	eq
 80a1510:	4619      	moveq	r1, r3
 80a1512:	4610      	moveq	r0, r2
 80a1514:	bd30      	pop	{r4, r5, pc}
 80a1516:	ea91 0f03 	teq	r1, r3
 80a151a:	bf1e      	ittt	ne
 80a151c:	2100      	movne	r1, #0
 80a151e:	2000      	movne	r0, #0
 80a1520:	bd30      	popne	{r4, r5, pc}
 80a1522:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a1526:	d105      	bne.n	80a1534 <__adddf3+0x230>
 80a1528:	0040      	lsls	r0, r0, #1
 80a152a:	4149      	adcs	r1, r1
 80a152c:	bf28      	it	cs
 80a152e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a1532:	bd30      	pop	{r4, r5, pc}
 80a1534:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a1538:	bf3c      	itt	cc
 80a153a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a153e:	bd30      	popcc	{r4, r5, pc}
 80a1540:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a1544:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a1548:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a154c:	f04f 0000 	mov.w	r0, #0
 80a1550:	bd30      	pop	{r4, r5, pc}
 80a1552:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a1556:	bf1a      	itte	ne
 80a1558:	4619      	movne	r1, r3
 80a155a:	4610      	movne	r0, r2
 80a155c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a1560:	bf1c      	itt	ne
 80a1562:	460b      	movne	r3, r1
 80a1564:	4602      	movne	r2, r0
 80a1566:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a156a:	bf06      	itte	eq
 80a156c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a1570:	ea91 0f03 	teqeq	r1, r3
 80a1574:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a1578:	bd30      	pop	{r4, r5, pc}
 80a157a:	bf00      	nop

080a157c <__aeabi_ui2d>:
 80a157c:	f090 0f00 	teq	r0, #0
 80a1580:	bf04      	itt	eq
 80a1582:	2100      	moveq	r1, #0
 80a1584:	4770      	bxeq	lr
 80a1586:	b530      	push	{r4, r5, lr}
 80a1588:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a158c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a1590:	f04f 0500 	mov.w	r5, #0
 80a1594:	f04f 0100 	mov.w	r1, #0
 80a1598:	e750      	b.n	80a143c <__adddf3+0x138>
 80a159a:	bf00      	nop

080a159c <__aeabi_i2d>:
 80a159c:	f090 0f00 	teq	r0, #0
 80a15a0:	bf04      	itt	eq
 80a15a2:	2100      	moveq	r1, #0
 80a15a4:	4770      	bxeq	lr
 80a15a6:	b530      	push	{r4, r5, lr}
 80a15a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a15ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a15b0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a15b4:	bf48      	it	mi
 80a15b6:	4240      	negmi	r0, r0
 80a15b8:	f04f 0100 	mov.w	r1, #0
 80a15bc:	e73e      	b.n	80a143c <__adddf3+0x138>
 80a15be:	bf00      	nop

080a15c0 <__aeabi_f2d>:
 80a15c0:	0042      	lsls	r2, r0, #1
 80a15c2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a15c6:	ea4f 0131 	mov.w	r1, r1, rrx
 80a15ca:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a15ce:	bf1f      	itttt	ne
 80a15d0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a15d4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a15d8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a15dc:	4770      	bxne	lr
 80a15de:	f092 0f00 	teq	r2, #0
 80a15e2:	bf14      	ite	ne
 80a15e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a15e8:	4770      	bxeq	lr
 80a15ea:	b530      	push	{r4, r5, lr}
 80a15ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a15f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a15f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a15f8:	e720      	b.n	80a143c <__adddf3+0x138>
 80a15fa:	bf00      	nop

080a15fc <__aeabi_ul2d>:
 80a15fc:	ea50 0201 	orrs.w	r2, r0, r1
 80a1600:	bf08      	it	eq
 80a1602:	4770      	bxeq	lr
 80a1604:	b530      	push	{r4, r5, lr}
 80a1606:	f04f 0500 	mov.w	r5, #0
 80a160a:	e00a      	b.n	80a1622 <__aeabi_l2d+0x16>

080a160c <__aeabi_l2d>:
 80a160c:	ea50 0201 	orrs.w	r2, r0, r1
 80a1610:	bf08      	it	eq
 80a1612:	4770      	bxeq	lr
 80a1614:	b530      	push	{r4, r5, lr}
 80a1616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a161a:	d502      	bpl.n	80a1622 <__aeabi_l2d+0x16>
 80a161c:	4240      	negs	r0, r0
 80a161e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a1622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a1626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a162a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a162e:	f43f aedc 	beq.w	80a13ea <__adddf3+0xe6>
 80a1632:	f04f 0203 	mov.w	r2, #3
 80a1636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a163a:	bf18      	it	ne
 80a163c:	3203      	addne	r2, #3
 80a163e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a1642:	bf18      	it	ne
 80a1644:	3203      	addne	r2, #3
 80a1646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a164a:	f1c2 0320 	rsb	r3, r2, #32
 80a164e:	fa00 fc03 	lsl.w	ip, r0, r3
 80a1652:	fa20 f002 	lsr.w	r0, r0, r2
 80a1656:	fa01 fe03 	lsl.w	lr, r1, r3
 80a165a:	ea40 000e 	orr.w	r0, r0, lr
 80a165e:	fa21 f102 	lsr.w	r1, r1, r2
 80a1662:	4414      	add	r4, r2
 80a1664:	e6c1      	b.n	80a13ea <__adddf3+0xe6>
 80a1666:	bf00      	nop

080a1668 <__aeabi_dmul>:
 80a1668:	b570      	push	{r4, r5, r6, lr}
 80a166a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a166e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a1672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a1676:	bf1d      	ittte	ne
 80a1678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a167c:	ea94 0f0c 	teqne	r4, ip
 80a1680:	ea95 0f0c 	teqne	r5, ip
 80a1684:	f000 f8de 	bleq	80a1844 <__aeabi_dmul+0x1dc>
 80a1688:	442c      	add	r4, r5
 80a168a:	ea81 0603 	eor.w	r6, r1, r3
 80a168e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a1692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a1696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a169a:	bf18      	it	ne
 80a169c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a16a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a16a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a16a8:	d038      	beq.n	80a171c <__aeabi_dmul+0xb4>
 80a16aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80a16ae:	f04f 0500 	mov.w	r5, #0
 80a16b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a16b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a16ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a16be:	f04f 0600 	mov.w	r6, #0
 80a16c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a16c6:	f09c 0f00 	teq	ip, #0
 80a16ca:	bf18      	it	ne
 80a16cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80a16d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a16d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a16d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a16dc:	d204      	bcs.n	80a16e8 <__aeabi_dmul+0x80>
 80a16de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a16e2:	416d      	adcs	r5, r5
 80a16e4:	eb46 0606 	adc.w	r6, r6, r6
 80a16e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a16ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a16f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a16f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a16f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a16fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a1700:	bf88      	it	hi
 80a1702:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a1706:	d81e      	bhi.n	80a1746 <__aeabi_dmul+0xde>
 80a1708:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a170c:	bf08      	it	eq
 80a170e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a1712:	f150 0000 	adcs.w	r0, r0, #0
 80a1716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a171a:	bd70      	pop	{r4, r5, r6, pc}
 80a171c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a1720:	ea46 0101 	orr.w	r1, r6, r1
 80a1724:	ea40 0002 	orr.w	r0, r0, r2
 80a1728:	ea81 0103 	eor.w	r1, r1, r3
 80a172c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a1730:	bfc2      	ittt	gt
 80a1732:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a1736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a173a:	bd70      	popgt	{r4, r5, r6, pc}
 80a173c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a1740:	f04f 0e00 	mov.w	lr, #0
 80a1744:	3c01      	subs	r4, #1
 80a1746:	f300 80ab 	bgt.w	80a18a0 <__aeabi_dmul+0x238>
 80a174a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a174e:	bfde      	ittt	le
 80a1750:	2000      	movle	r0, #0
 80a1752:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a1756:	bd70      	pople	{r4, r5, r6, pc}
 80a1758:	f1c4 0400 	rsb	r4, r4, #0
 80a175c:	3c20      	subs	r4, #32
 80a175e:	da35      	bge.n	80a17cc <__aeabi_dmul+0x164>
 80a1760:	340c      	adds	r4, #12
 80a1762:	dc1b      	bgt.n	80a179c <__aeabi_dmul+0x134>
 80a1764:	f104 0414 	add.w	r4, r4, #20
 80a1768:	f1c4 0520 	rsb	r5, r4, #32
 80a176c:	fa00 f305 	lsl.w	r3, r0, r5
 80a1770:	fa20 f004 	lsr.w	r0, r0, r4
 80a1774:	fa01 f205 	lsl.w	r2, r1, r5
 80a1778:	ea40 0002 	orr.w	r0, r0, r2
 80a177c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a1780:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a1784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a1788:	fa21 f604 	lsr.w	r6, r1, r4
 80a178c:	eb42 0106 	adc.w	r1, r2, r6
 80a1790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a1794:	bf08      	it	eq
 80a1796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a179a:	bd70      	pop	{r4, r5, r6, pc}
 80a179c:	f1c4 040c 	rsb	r4, r4, #12
 80a17a0:	f1c4 0520 	rsb	r5, r4, #32
 80a17a4:	fa00 f304 	lsl.w	r3, r0, r4
 80a17a8:	fa20 f005 	lsr.w	r0, r0, r5
 80a17ac:	fa01 f204 	lsl.w	r2, r1, r4
 80a17b0:	ea40 0002 	orr.w	r0, r0, r2
 80a17b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a17b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a17bc:	f141 0100 	adc.w	r1, r1, #0
 80a17c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a17c4:	bf08      	it	eq
 80a17c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a17ca:	bd70      	pop	{r4, r5, r6, pc}
 80a17cc:	f1c4 0520 	rsb	r5, r4, #32
 80a17d0:	fa00 f205 	lsl.w	r2, r0, r5
 80a17d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80a17d8:	fa20 f304 	lsr.w	r3, r0, r4
 80a17dc:	fa01 f205 	lsl.w	r2, r1, r5
 80a17e0:	ea43 0302 	orr.w	r3, r3, r2
 80a17e4:	fa21 f004 	lsr.w	r0, r1, r4
 80a17e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a17ec:	fa21 f204 	lsr.w	r2, r1, r4
 80a17f0:	ea20 0002 	bic.w	r0, r0, r2
 80a17f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a17f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a17fc:	bf08      	it	eq
 80a17fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a1802:	bd70      	pop	{r4, r5, r6, pc}
 80a1804:	f094 0f00 	teq	r4, #0
 80a1808:	d10f      	bne.n	80a182a <__aeabi_dmul+0x1c2>
 80a180a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a180e:	0040      	lsls	r0, r0, #1
 80a1810:	eb41 0101 	adc.w	r1, r1, r1
 80a1814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a1818:	bf08      	it	eq
 80a181a:	3c01      	subeq	r4, #1
 80a181c:	d0f7      	beq.n	80a180e <__aeabi_dmul+0x1a6>
 80a181e:	ea41 0106 	orr.w	r1, r1, r6
 80a1822:	f095 0f00 	teq	r5, #0
 80a1826:	bf18      	it	ne
 80a1828:	4770      	bxne	lr
 80a182a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a182e:	0052      	lsls	r2, r2, #1
 80a1830:	eb43 0303 	adc.w	r3, r3, r3
 80a1834:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a1838:	bf08      	it	eq
 80a183a:	3d01      	subeq	r5, #1
 80a183c:	d0f7      	beq.n	80a182e <__aeabi_dmul+0x1c6>
 80a183e:	ea43 0306 	orr.w	r3, r3, r6
 80a1842:	4770      	bx	lr
 80a1844:	ea94 0f0c 	teq	r4, ip
 80a1848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a184c:	bf18      	it	ne
 80a184e:	ea95 0f0c 	teqne	r5, ip
 80a1852:	d00c      	beq.n	80a186e <__aeabi_dmul+0x206>
 80a1854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a1858:	bf18      	it	ne
 80a185a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a185e:	d1d1      	bne.n	80a1804 <__aeabi_dmul+0x19c>
 80a1860:	ea81 0103 	eor.w	r1, r1, r3
 80a1864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a1868:	f04f 0000 	mov.w	r0, #0
 80a186c:	bd70      	pop	{r4, r5, r6, pc}
 80a186e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a1872:	bf06      	itte	eq
 80a1874:	4610      	moveq	r0, r2
 80a1876:	4619      	moveq	r1, r3
 80a1878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a187c:	d019      	beq.n	80a18b2 <__aeabi_dmul+0x24a>
 80a187e:	ea94 0f0c 	teq	r4, ip
 80a1882:	d102      	bne.n	80a188a <__aeabi_dmul+0x222>
 80a1884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a1888:	d113      	bne.n	80a18b2 <__aeabi_dmul+0x24a>
 80a188a:	ea95 0f0c 	teq	r5, ip
 80a188e:	d105      	bne.n	80a189c <__aeabi_dmul+0x234>
 80a1890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a1894:	bf1c      	itt	ne
 80a1896:	4610      	movne	r0, r2
 80a1898:	4619      	movne	r1, r3
 80a189a:	d10a      	bne.n	80a18b2 <__aeabi_dmul+0x24a>
 80a189c:	ea81 0103 	eor.w	r1, r1, r3
 80a18a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a18a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a18a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a18ac:	f04f 0000 	mov.w	r0, #0
 80a18b0:	bd70      	pop	{r4, r5, r6, pc}
 80a18b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a18b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a18ba:	bd70      	pop	{r4, r5, r6, pc}

080a18bc <__aeabi_ddiv>:
 80a18bc:	b570      	push	{r4, r5, r6, lr}
 80a18be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a18c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a18c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a18ca:	bf1d      	ittte	ne
 80a18cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a18d0:	ea94 0f0c 	teqne	r4, ip
 80a18d4:	ea95 0f0c 	teqne	r5, ip
 80a18d8:	f000 f8a7 	bleq	80a1a2a <__aeabi_ddiv+0x16e>
 80a18dc:	eba4 0405 	sub.w	r4, r4, r5
 80a18e0:	ea81 0e03 	eor.w	lr, r1, r3
 80a18e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a18e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a18ec:	f000 8088 	beq.w	80a1a00 <__aeabi_ddiv+0x144>
 80a18f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a18f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a18f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a18fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a1900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a1904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a1908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a190c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a1910:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a1914:	429d      	cmp	r5, r3
 80a1916:	bf08      	it	eq
 80a1918:	4296      	cmpeq	r6, r2
 80a191a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a191e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a1922:	d202      	bcs.n	80a192a <__aeabi_ddiv+0x6e>
 80a1924:	085b      	lsrs	r3, r3, #1
 80a1926:	ea4f 0232 	mov.w	r2, r2, rrx
 80a192a:	1ab6      	subs	r6, r6, r2
 80a192c:	eb65 0503 	sbc.w	r5, r5, r3
 80a1930:	085b      	lsrs	r3, r3, #1
 80a1932:	ea4f 0232 	mov.w	r2, r2, rrx
 80a1936:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a193a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a193e:	ebb6 0e02 	subs.w	lr, r6, r2
 80a1942:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a1946:	bf22      	ittt	cs
 80a1948:	1ab6      	subcs	r6, r6, r2
 80a194a:	4675      	movcs	r5, lr
 80a194c:	ea40 000c 	orrcs.w	r0, r0, ip
 80a1950:	085b      	lsrs	r3, r3, #1
 80a1952:	ea4f 0232 	mov.w	r2, r2, rrx
 80a1956:	ebb6 0e02 	subs.w	lr, r6, r2
 80a195a:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a195e:	bf22      	ittt	cs
 80a1960:	1ab6      	subcs	r6, r6, r2
 80a1962:	4675      	movcs	r5, lr
 80a1964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a1968:	085b      	lsrs	r3, r3, #1
 80a196a:	ea4f 0232 	mov.w	r2, r2, rrx
 80a196e:	ebb6 0e02 	subs.w	lr, r6, r2
 80a1972:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a1976:	bf22      	ittt	cs
 80a1978:	1ab6      	subcs	r6, r6, r2
 80a197a:	4675      	movcs	r5, lr
 80a197c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a1980:	085b      	lsrs	r3, r3, #1
 80a1982:	ea4f 0232 	mov.w	r2, r2, rrx
 80a1986:	ebb6 0e02 	subs.w	lr, r6, r2
 80a198a:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a198e:	bf22      	ittt	cs
 80a1990:	1ab6      	subcs	r6, r6, r2
 80a1992:	4675      	movcs	r5, lr
 80a1994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a1998:	ea55 0e06 	orrs.w	lr, r5, r6
 80a199c:	d018      	beq.n	80a19d0 <__aeabi_ddiv+0x114>
 80a199e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a19a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a19a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a19aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a19ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a19b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a19b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a19ba:	d1c0      	bne.n	80a193e <__aeabi_ddiv+0x82>
 80a19bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a19c0:	d10b      	bne.n	80a19da <__aeabi_ddiv+0x11e>
 80a19c2:	ea41 0100 	orr.w	r1, r1, r0
 80a19c6:	f04f 0000 	mov.w	r0, #0
 80a19ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a19ce:	e7b6      	b.n	80a193e <__aeabi_ddiv+0x82>
 80a19d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a19d4:	bf04      	itt	eq
 80a19d6:	4301      	orreq	r1, r0
 80a19d8:	2000      	moveq	r0, #0
 80a19da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a19de:	bf88      	it	hi
 80a19e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a19e4:	f63f aeaf 	bhi.w	80a1746 <__aeabi_dmul+0xde>
 80a19e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80a19ec:	bf04      	itt	eq
 80a19ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a19f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a19f6:	f150 0000 	adcs.w	r0, r0, #0
 80a19fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a19fe:	bd70      	pop	{r4, r5, r6, pc}
 80a1a00:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a1a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a1a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a1a0c:	bfc2      	ittt	gt
 80a1a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a1a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a1a16:	bd70      	popgt	{r4, r5, r6, pc}
 80a1a18:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a1a1c:	f04f 0e00 	mov.w	lr, #0
 80a1a20:	3c01      	subs	r4, #1
 80a1a22:	e690      	b.n	80a1746 <__aeabi_dmul+0xde>
 80a1a24:	ea45 0e06 	orr.w	lr, r5, r6
 80a1a28:	e68d      	b.n	80a1746 <__aeabi_dmul+0xde>
 80a1a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a1a2e:	ea94 0f0c 	teq	r4, ip
 80a1a32:	bf08      	it	eq
 80a1a34:	ea95 0f0c 	teqeq	r5, ip
 80a1a38:	f43f af3b 	beq.w	80a18b2 <__aeabi_dmul+0x24a>
 80a1a3c:	ea94 0f0c 	teq	r4, ip
 80a1a40:	d10a      	bne.n	80a1a58 <__aeabi_ddiv+0x19c>
 80a1a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a1a46:	f47f af34 	bne.w	80a18b2 <__aeabi_dmul+0x24a>
 80a1a4a:	ea95 0f0c 	teq	r5, ip
 80a1a4e:	f47f af25 	bne.w	80a189c <__aeabi_dmul+0x234>
 80a1a52:	4610      	mov	r0, r2
 80a1a54:	4619      	mov	r1, r3
 80a1a56:	e72c      	b.n	80a18b2 <__aeabi_dmul+0x24a>
 80a1a58:	ea95 0f0c 	teq	r5, ip
 80a1a5c:	d106      	bne.n	80a1a6c <__aeabi_ddiv+0x1b0>
 80a1a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a1a62:	f43f aefd 	beq.w	80a1860 <__aeabi_dmul+0x1f8>
 80a1a66:	4610      	mov	r0, r2
 80a1a68:	4619      	mov	r1, r3
 80a1a6a:	e722      	b.n	80a18b2 <__aeabi_dmul+0x24a>
 80a1a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a1a70:	bf18      	it	ne
 80a1a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a1a76:	f47f aec5 	bne.w	80a1804 <__aeabi_dmul+0x19c>
 80a1a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a1a7e:	f47f af0d 	bne.w	80a189c <__aeabi_dmul+0x234>
 80a1a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a1a86:	f47f aeeb 	bne.w	80a1860 <__aeabi_dmul+0x1f8>
 80a1a8a:	e712      	b.n	80a18b2 <__aeabi_dmul+0x24a>

080a1a8c <__gedf2>:
 80a1a8c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80a1a90:	e006      	b.n	80a1aa0 <__cmpdf2+0x4>
 80a1a92:	bf00      	nop

080a1a94 <__ledf2>:
 80a1a94:	f04f 0c01 	mov.w	ip, #1
 80a1a98:	e002      	b.n	80a1aa0 <__cmpdf2+0x4>
 80a1a9a:	bf00      	nop

080a1a9c <__cmpdf2>:
 80a1a9c:	f04f 0c01 	mov.w	ip, #1
 80a1aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a1aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a1aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a1aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a1ab0:	bf18      	it	ne
 80a1ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a1ab6:	d01b      	beq.n	80a1af0 <__cmpdf2+0x54>
 80a1ab8:	b001      	add	sp, #4
 80a1aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a1abe:	bf0c      	ite	eq
 80a1ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a1ac4:	ea91 0f03 	teqne	r1, r3
 80a1ac8:	bf02      	ittt	eq
 80a1aca:	ea90 0f02 	teqeq	r0, r2
 80a1ace:	2000      	moveq	r0, #0
 80a1ad0:	4770      	bxeq	lr
 80a1ad2:	f110 0f00 	cmn.w	r0, #0
 80a1ad6:	ea91 0f03 	teq	r1, r3
 80a1ada:	bf58      	it	pl
 80a1adc:	4299      	cmppl	r1, r3
 80a1ade:	bf08      	it	eq
 80a1ae0:	4290      	cmpeq	r0, r2
 80a1ae2:	bf2c      	ite	cs
 80a1ae4:	17d8      	asrcs	r0, r3, #31
 80a1ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a1aea:	f040 0001 	orr.w	r0, r0, #1
 80a1aee:	4770      	bx	lr
 80a1af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a1af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a1af8:	d102      	bne.n	80a1b00 <__cmpdf2+0x64>
 80a1afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a1afe:	d107      	bne.n	80a1b10 <__cmpdf2+0x74>
 80a1b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a1b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a1b08:	d1d6      	bne.n	80a1ab8 <__cmpdf2+0x1c>
 80a1b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a1b0e:	d0d3      	beq.n	80a1ab8 <__cmpdf2+0x1c>
 80a1b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a1b14:	4770      	bx	lr
 80a1b16:	bf00      	nop

080a1b18 <__aeabi_cdrcmple>:
 80a1b18:	4684      	mov	ip, r0
 80a1b1a:	4610      	mov	r0, r2
 80a1b1c:	4662      	mov	r2, ip
 80a1b1e:	468c      	mov	ip, r1
 80a1b20:	4619      	mov	r1, r3
 80a1b22:	4663      	mov	r3, ip
 80a1b24:	e000      	b.n	80a1b28 <__aeabi_cdcmpeq>
 80a1b26:	bf00      	nop

080a1b28 <__aeabi_cdcmpeq>:
 80a1b28:	b501      	push	{r0, lr}
 80a1b2a:	f7ff ffb7 	bl	80a1a9c <__cmpdf2>
 80a1b2e:	2800      	cmp	r0, #0
 80a1b30:	bf48      	it	mi
 80a1b32:	f110 0f00 	cmnmi.w	r0, #0
 80a1b36:	bd01      	pop	{r0, pc}

080a1b38 <__aeabi_dcmpeq>:
 80a1b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a1b3c:	f7ff fff4 	bl	80a1b28 <__aeabi_cdcmpeq>
 80a1b40:	bf0c      	ite	eq
 80a1b42:	2001      	moveq	r0, #1
 80a1b44:	2000      	movne	r0, #0
 80a1b46:	f85d fb08 	ldr.w	pc, [sp], #8
 80a1b4a:	bf00      	nop

080a1b4c <__aeabi_dcmplt>:
 80a1b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a1b50:	f7ff ffea 	bl	80a1b28 <__aeabi_cdcmpeq>
 80a1b54:	bf34      	ite	cc
 80a1b56:	2001      	movcc	r0, #1
 80a1b58:	2000      	movcs	r0, #0
 80a1b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a1b5e:	bf00      	nop

080a1b60 <__aeabi_dcmple>:
 80a1b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a1b64:	f7ff ffe0 	bl	80a1b28 <__aeabi_cdcmpeq>
 80a1b68:	bf94      	ite	ls
 80a1b6a:	2001      	movls	r0, #1
 80a1b6c:	2000      	movhi	r0, #0
 80a1b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a1b72:	bf00      	nop

080a1b74 <__aeabi_dcmpge>:
 80a1b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a1b78:	f7ff ffce 	bl	80a1b18 <__aeabi_cdrcmple>
 80a1b7c:	bf94      	ite	ls
 80a1b7e:	2001      	movls	r0, #1
 80a1b80:	2000      	movhi	r0, #0
 80a1b82:	f85d fb08 	ldr.w	pc, [sp], #8
 80a1b86:	bf00      	nop

080a1b88 <__aeabi_dcmpgt>:
 80a1b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a1b8c:	f7ff ffc4 	bl	80a1b18 <__aeabi_cdrcmple>
 80a1b90:	bf34      	ite	cc
 80a1b92:	2001      	movcc	r0, #1
 80a1b94:	2000      	movcs	r0, #0
 80a1b96:	f85d fb08 	ldr.w	pc, [sp], #8
 80a1b9a:	bf00      	nop

080a1b9c <__aeabi_dcmpun>:
 80a1b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a1ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a1ba4:	d102      	bne.n	80a1bac <__aeabi_dcmpun+0x10>
 80a1ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a1baa:	d10a      	bne.n	80a1bc2 <__aeabi_dcmpun+0x26>
 80a1bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a1bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a1bb4:	d102      	bne.n	80a1bbc <__aeabi_dcmpun+0x20>
 80a1bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a1bba:	d102      	bne.n	80a1bc2 <__aeabi_dcmpun+0x26>
 80a1bbc:	f04f 0000 	mov.w	r0, #0
 80a1bc0:	4770      	bx	lr
 80a1bc2:	f04f 0001 	mov.w	r0, #1
 80a1bc6:	4770      	bx	lr

080a1bc8 <__aeabi_d2iz>:
 80a1bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a1bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a1bd0:	d215      	bcs.n	80a1bfe <__aeabi_d2iz+0x36>
 80a1bd2:	d511      	bpl.n	80a1bf8 <__aeabi_d2iz+0x30>
 80a1bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a1bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a1bdc:	d912      	bls.n	80a1c04 <__aeabi_d2iz+0x3c>
 80a1bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a1be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a1be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a1bea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a1bee:	fa23 f002 	lsr.w	r0, r3, r2
 80a1bf2:	bf18      	it	ne
 80a1bf4:	4240      	negne	r0, r0
 80a1bf6:	4770      	bx	lr
 80a1bf8:	f04f 0000 	mov.w	r0, #0
 80a1bfc:	4770      	bx	lr
 80a1bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a1c02:	d105      	bne.n	80a1c10 <__aeabi_d2iz+0x48>
 80a1c04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80a1c08:	bf08      	it	eq
 80a1c0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a1c0e:	4770      	bx	lr
 80a1c10:	f04f 0000 	mov.w	r0, #0
 80a1c14:	4770      	bx	lr
 80a1c16:	bf00      	nop

080a1c18 <__aeabi_d2uiz>:
 80a1c18:	004a      	lsls	r2, r1, #1
 80a1c1a:	d211      	bcs.n	80a1c40 <__aeabi_d2uiz+0x28>
 80a1c1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a1c20:	d211      	bcs.n	80a1c46 <__aeabi_d2uiz+0x2e>
 80a1c22:	d50d      	bpl.n	80a1c40 <__aeabi_d2uiz+0x28>
 80a1c24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a1c28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a1c2c:	d40e      	bmi.n	80a1c4c <__aeabi_d2uiz+0x34>
 80a1c2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a1c32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a1c36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a1c3a:	fa23 f002 	lsr.w	r0, r3, r2
 80a1c3e:	4770      	bx	lr
 80a1c40:	f04f 0000 	mov.w	r0, #0
 80a1c44:	4770      	bx	lr
 80a1c46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a1c4a:	d102      	bne.n	80a1c52 <__aeabi_d2uiz+0x3a>
 80a1c4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a1c50:	4770      	bx	lr
 80a1c52:	f04f 0000 	mov.w	r0, #0
 80a1c56:	4770      	bx	lr

080a1c58 <__aeabi_d2f>:
 80a1c58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a1c5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80a1c60:	bf24      	itt	cs
 80a1c62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80a1c66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80a1c6a:	d90d      	bls.n	80a1c88 <__aeabi_d2f+0x30>
 80a1c6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a1c70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80a1c74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80a1c78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80a1c7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80a1c80:	bf08      	it	eq
 80a1c82:	f020 0001 	biceq.w	r0, r0, #1
 80a1c86:	4770      	bx	lr
 80a1c88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80a1c8c:	d121      	bne.n	80a1cd2 <__aeabi_d2f+0x7a>
 80a1c8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80a1c92:	bfbc      	itt	lt
 80a1c94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80a1c98:	4770      	bxlt	lr
 80a1c9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a1c9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80a1ca2:	f1c2 0218 	rsb	r2, r2, #24
 80a1ca6:	f1c2 0c20 	rsb	ip, r2, #32
 80a1caa:	fa10 f30c 	lsls.w	r3, r0, ip
 80a1cae:	fa20 f002 	lsr.w	r0, r0, r2
 80a1cb2:	bf18      	it	ne
 80a1cb4:	f040 0001 	orrne.w	r0, r0, #1
 80a1cb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a1cbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80a1cc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 80a1cc4:	ea40 000c 	orr.w	r0, r0, ip
 80a1cc8:	fa23 f302 	lsr.w	r3, r3, r2
 80a1ccc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80a1cd0:	e7cc      	b.n	80a1c6c <__aeabi_d2f+0x14>
 80a1cd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80a1cd6:	d107      	bne.n	80a1ce8 <__aeabi_d2f+0x90>
 80a1cd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80a1cdc:	bf1e      	ittt	ne
 80a1cde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80a1ce2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80a1ce6:	4770      	bxne	lr
 80a1ce8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80a1cec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a1cf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a1cf4:	4770      	bx	lr
 80a1cf6:	bf00      	nop

080a1cf8 <__aeabi_frsub>:
 80a1cf8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a1cfc:	e002      	b.n	80a1d04 <__addsf3>
 80a1cfe:	bf00      	nop

080a1d00 <__aeabi_fsub>:
 80a1d00:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a1d04 <__addsf3>:
 80a1d04:	0042      	lsls	r2, r0, #1
 80a1d06:	bf1f      	itttt	ne
 80a1d08:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a1d0c:	ea92 0f03 	teqne	r2, r3
 80a1d10:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a1d14:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a1d18:	d06a      	beq.n	80a1df0 <__addsf3+0xec>
 80a1d1a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a1d1e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a1d22:	bfc1      	itttt	gt
 80a1d24:	18d2      	addgt	r2, r2, r3
 80a1d26:	4041      	eorgt	r1, r0
 80a1d28:	4048      	eorgt	r0, r1
 80a1d2a:	4041      	eorgt	r1, r0
 80a1d2c:	bfb8      	it	lt
 80a1d2e:	425b      	neglt	r3, r3
 80a1d30:	2b19      	cmp	r3, #25
 80a1d32:	bf88      	it	hi
 80a1d34:	4770      	bxhi	lr
 80a1d36:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a1d3a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a1d3e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a1d42:	bf18      	it	ne
 80a1d44:	4240      	negne	r0, r0
 80a1d46:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a1d4a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a1d4e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a1d52:	bf18      	it	ne
 80a1d54:	4249      	negne	r1, r1
 80a1d56:	ea92 0f03 	teq	r2, r3
 80a1d5a:	d03f      	beq.n	80a1ddc <__addsf3+0xd8>
 80a1d5c:	f1a2 0201 	sub.w	r2, r2, #1
 80a1d60:	fa41 fc03 	asr.w	ip, r1, r3
 80a1d64:	eb10 000c 	adds.w	r0, r0, ip
 80a1d68:	f1c3 0320 	rsb	r3, r3, #32
 80a1d6c:	fa01 f103 	lsl.w	r1, r1, r3
 80a1d70:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a1d74:	d502      	bpl.n	80a1d7c <__addsf3+0x78>
 80a1d76:	4249      	negs	r1, r1
 80a1d78:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a1d7c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a1d80:	d313      	bcc.n	80a1daa <__addsf3+0xa6>
 80a1d82:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a1d86:	d306      	bcc.n	80a1d96 <__addsf3+0x92>
 80a1d88:	0840      	lsrs	r0, r0, #1
 80a1d8a:	ea4f 0131 	mov.w	r1, r1, rrx
 80a1d8e:	f102 0201 	add.w	r2, r2, #1
 80a1d92:	2afe      	cmp	r2, #254	; 0xfe
 80a1d94:	d251      	bcs.n	80a1e3a <__addsf3+0x136>
 80a1d96:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a1d9a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a1d9e:	bf08      	it	eq
 80a1da0:	f020 0001 	biceq.w	r0, r0, #1
 80a1da4:	ea40 0003 	orr.w	r0, r0, r3
 80a1da8:	4770      	bx	lr
 80a1daa:	0049      	lsls	r1, r1, #1
 80a1dac:	eb40 0000 	adc.w	r0, r0, r0
 80a1db0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80a1db4:	f1a2 0201 	sub.w	r2, r2, #1
 80a1db8:	d1ed      	bne.n	80a1d96 <__addsf3+0x92>
 80a1dba:	fab0 fc80 	clz	ip, r0
 80a1dbe:	f1ac 0c08 	sub.w	ip, ip, #8
 80a1dc2:	ebb2 020c 	subs.w	r2, r2, ip
 80a1dc6:	fa00 f00c 	lsl.w	r0, r0, ip
 80a1dca:	bfaa      	itet	ge
 80a1dcc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a1dd0:	4252      	neglt	r2, r2
 80a1dd2:	4318      	orrge	r0, r3
 80a1dd4:	bfbc      	itt	lt
 80a1dd6:	40d0      	lsrlt	r0, r2
 80a1dd8:	4318      	orrlt	r0, r3
 80a1dda:	4770      	bx	lr
 80a1ddc:	f092 0f00 	teq	r2, #0
 80a1de0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a1de4:	bf06      	itte	eq
 80a1de6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a1dea:	3201      	addeq	r2, #1
 80a1dec:	3b01      	subne	r3, #1
 80a1dee:	e7b5      	b.n	80a1d5c <__addsf3+0x58>
 80a1df0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a1df4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a1df8:	bf18      	it	ne
 80a1dfa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a1dfe:	d021      	beq.n	80a1e44 <__addsf3+0x140>
 80a1e00:	ea92 0f03 	teq	r2, r3
 80a1e04:	d004      	beq.n	80a1e10 <__addsf3+0x10c>
 80a1e06:	f092 0f00 	teq	r2, #0
 80a1e0a:	bf08      	it	eq
 80a1e0c:	4608      	moveq	r0, r1
 80a1e0e:	4770      	bx	lr
 80a1e10:	ea90 0f01 	teq	r0, r1
 80a1e14:	bf1c      	itt	ne
 80a1e16:	2000      	movne	r0, #0
 80a1e18:	4770      	bxne	lr
 80a1e1a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a1e1e:	d104      	bne.n	80a1e2a <__addsf3+0x126>
 80a1e20:	0040      	lsls	r0, r0, #1
 80a1e22:	bf28      	it	cs
 80a1e24:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a1e28:	4770      	bx	lr
 80a1e2a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a1e2e:	bf3c      	itt	cc
 80a1e30:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a1e34:	4770      	bxcc	lr
 80a1e36:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a1e3a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a1e3e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a1e42:	4770      	bx	lr
 80a1e44:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a1e48:	bf16      	itet	ne
 80a1e4a:	4608      	movne	r0, r1
 80a1e4c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a1e50:	4601      	movne	r1, r0
 80a1e52:	0242      	lsls	r2, r0, #9
 80a1e54:	bf06      	itte	eq
 80a1e56:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a1e5a:	ea90 0f01 	teqeq	r0, r1
 80a1e5e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a1e62:	4770      	bx	lr

080a1e64 <__aeabi_ui2f>:
 80a1e64:	f04f 0300 	mov.w	r3, #0
 80a1e68:	e004      	b.n	80a1e74 <__aeabi_i2f+0x8>
 80a1e6a:	bf00      	nop

080a1e6c <__aeabi_i2f>:
 80a1e6c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a1e70:	bf48      	it	mi
 80a1e72:	4240      	negmi	r0, r0
 80a1e74:	ea5f 0c00 	movs.w	ip, r0
 80a1e78:	bf08      	it	eq
 80a1e7a:	4770      	bxeq	lr
 80a1e7c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a1e80:	4601      	mov	r1, r0
 80a1e82:	f04f 0000 	mov.w	r0, #0
 80a1e86:	e01c      	b.n	80a1ec2 <__aeabi_l2f+0x2a>

080a1e88 <__aeabi_ul2f>:
 80a1e88:	ea50 0201 	orrs.w	r2, r0, r1
 80a1e8c:	bf08      	it	eq
 80a1e8e:	4770      	bxeq	lr
 80a1e90:	f04f 0300 	mov.w	r3, #0
 80a1e94:	e00a      	b.n	80a1eac <__aeabi_l2f+0x14>
 80a1e96:	bf00      	nop

080a1e98 <__aeabi_l2f>:
 80a1e98:	ea50 0201 	orrs.w	r2, r0, r1
 80a1e9c:	bf08      	it	eq
 80a1e9e:	4770      	bxeq	lr
 80a1ea0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a1ea4:	d502      	bpl.n	80a1eac <__aeabi_l2f+0x14>
 80a1ea6:	4240      	negs	r0, r0
 80a1ea8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a1eac:	ea5f 0c01 	movs.w	ip, r1
 80a1eb0:	bf02      	ittt	eq
 80a1eb2:	4684      	moveq	ip, r0
 80a1eb4:	4601      	moveq	r1, r0
 80a1eb6:	2000      	moveq	r0, #0
 80a1eb8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a1ebc:	bf08      	it	eq
 80a1ebe:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a1ec2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a1ec6:	fabc f28c 	clz	r2, ip
 80a1eca:	3a08      	subs	r2, #8
 80a1ecc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a1ed0:	db10      	blt.n	80a1ef4 <__aeabi_l2f+0x5c>
 80a1ed2:	fa01 fc02 	lsl.w	ip, r1, r2
 80a1ed6:	4463      	add	r3, ip
 80a1ed8:	fa00 fc02 	lsl.w	ip, r0, r2
 80a1edc:	f1c2 0220 	rsb	r2, r2, #32
 80a1ee0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a1ee4:	fa20 f202 	lsr.w	r2, r0, r2
 80a1ee8:	eb43 0002 	adc.w	r0, r3, r2
 80a1eec:	bf08      	it	eq
 80a1eee:	f020 0001 	biceq.w	r0, r0, #1
 80a1ef2:	4770      	bx	lr
 80a1ef4:	f102 0220 	add.w	r2, r2, #32
 80a1ef8:	fa01 fc02 	lsl.w	ip, r1, r2
 80a1efc:	f1c2 0220 	rsb	r2, r2, #32
 80a1f00:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a1f04:	fa21 f202 	lsr.w	r2, r1, r2
 80a1f08:	eb43 0002 	adc.w	r0, r3, r2
 80a1f0c:	bf08      	it	eq
 80a1f0e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a1f12:	4770      	bx	lr

080a1f14 <__aeabi_fmul>:
 80a1f14:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a1f18:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a1f1c:	bf1e      	ittt	ne
 80a1f1e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a1f22:	ea92 0f0c 	teqne	r2, ip
 80a1f26:	ea93 0f0c 	teqne	r3, ip
 80a1f2a:	d06f      	beq.n	80a200c <__aeabi_fmul+0xf8>
 80a1f2c:	441a      	add	r2, r3
 80a1f2e:	ea80 0c01 	eor.w	ip, r0, r1
 80a1f32:	0240      	lsls	r0, r0, #9
 80a1f34:	bf18      	it	ne
 80a1f36:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a1f3a:	d01e      	beq.n	80a1f7a <__aeabi_fmul+0x66>
 80a1f3c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a1f40:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a1f44:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a1f48:	fba0 3101 	umull	r3, r1, r0, r1
 80a1f4c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a1f50:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a1f54:	bf3e      	ittt	cc
 80a1f56:	0049      	lslcc	r1, r1, #1
 80a1f58:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a1f5c:	005b      	lslcc	r3, r3, #1
 80a1f5e:	ea40 0001 	orr.w	r0, r0, r1
 80a1f62:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a1f66:	2afd      	cmp	r2, #253	; 0xfd
 80a1f68:	d81d      	bhi.n	80a1fa6 <__aeabi_fmul+0x92>
 80a1f6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a1f6e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a1f72:	bf08      	it	eq
 80a1f74:	f020 0001 	biceq.w	r0, r0, #1
 80a1f78:	4770      	bx	lr
 80a1f7a:	f090 0f00 	teq	r0, #0
 80a1f7e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a1f82:	bf08      	it	eq
 80a1f84:	0249      	lsleq	r1, r1, #9
 80a1f86:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a1f8a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a1f8e:	3a7f      	subs	r2, #127	; 0x7f
 80a1f90:	bfc2      	ittt	gt
 80a1f92:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a1f96:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a1f9a:	4770      	bxgt	lr
 80a1f9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a1fa0:	f04f 0300 	mov.w	r3, #0
 80a1fa4:	3a01      	subs	r2, #1
 80a1fa6:	dc5d      	bgt.n	80a2064 <__aeabi_fmul+0x150>
 80a1fa8:	f112 0f19 	cmn.w	r2, #25
 80a1fac:	bfdc      	itt	le
 80a1fae:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a1fb2:	4770      	bxle	lr
 80a1fb4:	f1c2 0200 	rsb	r2, r2, #0
 80a1fb8:	0041      	lsls	r1, r0, #1
 80a1fba:	fa21 f102 	lsr.w	r1, r1, r2
 80a1fbe:	f1c2 0220 	rsb	r2, r2, #32
 80a1fc2:	fa00 fc02 	lsl.w	ip, r0, r2
 80a1fc6:	ea5f 0031 	movs.w	r0, r1, rrx
 80a1fca:	f140 0000 	adc.w	r0, r0, #0
 80a1fce:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a1fd2:	bf08      	it	eq
 80a1fd4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a1fd8:	4770      	bx	lr
 80a1fda:	f092 0f00 	teq	r2, #0
 80a1fde:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a1fe2:	bf02      	ittt	eq
 80a1fe4:	0040      	lsleq	r0, r0, #1
 80a1fe6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a1fea:	3a01      	subeq	r2, #1
 80a1fec:	d0f9      	beq.n	80a1fe2 <__aeabi_fmul+0xce>
 80a1fee:	ea40 000c 	orr.w	r0, r0, ip
 80a1ff2:	f093 0f00 	teq	r3, #0
 80a1ff6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a1ffa:	bf02      	ittt	eq
 80a1ffc:	0049      	lsleq	r1, r1, #1
 80a1ffe:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a2002:	3b01      	subeq	r3, #1
 80a2004:	d0f9      	beq.n	80a1ffa <__aeabi_fmul+0xe6>
 80a2006:	ea41 010c 	orr.w	r1, r1, ip
 80a200a:	e78f      	b.n	80a1f2c <__aeabi_fmul+0x18>
 80a200c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a2010:	ea92 0f0c 	teq	r2, ip
 80a2014:	bf18      	it	ne
 80a2016:	ea93 0f0c 	teqne	r3, ip
 80a201a:	d00a      	beq.n	80a2032 <__aeabi_fmul+0x11e>
 80a201c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a2020:	bf18      	it	ne
 80a2022:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a2026:	d1d8      	bne.n	80a1fda <__aeabi_fmul+0xc6>
 80a2028:	ea80 0001 	eor.w	r0, r0, r1
 80a202c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a2030:	4770      	bx	lr
 80a2032:	f090 0f00 	teq	r0, #0
 80a2036:	bf17      	itett	ne
 80a2038:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a203c:	4608      	moveq	r0, r1
 80a203e:	f091 0f00 	teqne	r1, #0
 80a2042:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a2046:	d014      	beq.n	80a2072 <__aeabi_fmul+0x15e>
 80a2048:	ea92 0f0c 	teq	r2, ip
 80a204c:	d101      	bne.n	80a2052 <__aeabi_fmul+0x13e>
 80a204e:	0242      	lsls	r2, r0, #9
 80a2050:	d10f      	bne.n	80a2072 <__aeabi_fmul+0x15e>
 80a2052:	ea93 0f0c 	teq	r3, ip
 80a2056:	d103      	bne.n	80a2060 <__aeabi_fmul+0x14c>
 80a2058:	024b      	lsls	r3, r1, #9
 80a205a:	bf18      	it	ne
 80a205c:	4608      	movne	r0, r1
 80a205e:	d108      	bne.n	80a2072 <__aeabi_fmul+0x15e>
 80a2060:	ea80 0001 	eor.w	r0, r0, r1
 80a2064:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a2068:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a206c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a2070:	4770      	bx	lr
 80a2072:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a2076:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a207a:	4770      	bx	lr

080a207c <__aeabi_fdiv>:
 80a207c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a2080:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a2084:	bf1e      	ittt	ne
 80a2086:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a208a:	ea92 0f0c 	teqne	r2, ip
 80a208e:	ea93 0f0c 	teqne	r3, ip
 80a2092:	d069      	beq.n	80a2168 <__aeabi_fdiv+0xec>
 80a2094:	eba2 0203 	sub.w	r2, r2, r3
 80a2098:	ea80 0c01 	eor.w	ip, r0, r1
 80a209c:	0249      	lsls	r1, r1, #9
 80a209e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a20a2:	d037      	beq.n	80a2114 <__aeabi_fdiv+0x98>
 80a20a4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a20a8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a20ac:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a20b0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a20b4:	428b      	cmp	r3, r1
 80a20b6:	bf38      	it	cc
 80a20b8:	005b      	lslcc	r3, r3, #1
 80a20ba:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a20be:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a20c2:	428b      	cmp	r3, r1
 80a20c4:	bf24      	itt	cs
 80a20c6:	1a5b      	subcs	r3, r3, r1
 80a20c8:	ea40 000c 	orrcs.w	r0, r0, ip
 80a20cc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a20d0:	bf24      	itt	cs
 80a20d2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a20d6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a20da:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a20de:	bf24      	itt	cs
 80a20e0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a20e4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a20e8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a20ec:	bf24      	itt	cs
 80a20ee:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a20f2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a20f6:	011b      	lsls	r3, r3, #4
 80a20f8:	bf18      	it	ne
 80a20fa:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a20fe:	d1e0      	bne.n	80a20c2 <__aeabi_fdiv+0x46>
 80a2100:	2afd      	cmp	r2, #253	; 0xfd
 80a2102:	f63f af50 	bhi.w	80a1fa6 <__aeabi_fmul+0x92>
 80a2106:	428b      	cmp	r3, r1
 80a2108:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a210c:	bf08      	it	eq
 80a210e:	f020 0001 	biceq.w	r0, r0, #1
 80a2112:	4770      	bx	lr
 80a2114:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a2118:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a211c:	327f      	adds	r2, #127	; 0x7f
 80a211e:	bfc2      	ittt	gt
 80a2120:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a2124:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a2128:	4770      	bxgt	lr
 80a212a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a212e:	f04f 0300 	mov.w	r3, #0
 80a2132:	3a01      	subs	r2, #1
 80a2134:	e737      	b.n	80a1fa6 <__aeabi_fmul+0x92>
 80a2136:	f092 0f00 	teq	r2, #0
 80a213a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a213e:	bf02      	ittt	eq
 80a2140:	0040      	lsleq	r0, r0, #1
 80a2142:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a2146:	3a01      	subeq	r2, #1
 80a2148:	d0f9      	beq.n	80a213e <__aeabi_fdiv+0xc2>
 80a214a:	ea40 000c 	orr.w	r0, r0, ip
 80a214e:	f093 0f00 	teq	r3, #0
 80a2152:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a2156:	bf02      	ittt	eq
 80a2158:	0049      	lsleq	r1, r1, #1
 80a215a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a215e:	3b01      	subeq	r3, #1
 80a2160:	d0f9      	beq.n	80a2156 <__aeabi_fdiv+0xda>
 80a2162:	ea41 010c 	orr.w	r1, r1, ip
 80a2166:	e795      	b.n	80a2094 <__aeabi_fdiv+0x18>
 80a2168:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a216c:	ea92 0f0c 	teq	r2, ip
 80a2170:	d108      	bne.n	80a2184 <__aeabi_fdiv+0x108>
 80a2172:	0242      	lsls	r2, r0, #9
 80a2174:	f47f af7d 	bne.w	80a2072 <__aeabi_fmul+0x15e>
 80a2178:	ea93 0f0c 	teq	r3, ip
 80a217c:	f47f af70 	bne.w	80a2060 <__aeabi_fmul+0x14c>
 80a2180:	4608      	mov	r0, r1
 80a2182:	e776      	b.n	80a2072 <__aeabi_fmul+0x15e>
 80a2184:	ea93 0f0c 	teq	r3, ip
 80a2188:	d104      	bne.n	80a2194 <__aeabi_fdiv+0x118>
 80a218a:	024b      	lsls	r3, r1, #9
 80a218c:	f43f af4c 	beq.w	80a2028 <__aeabi_fmul+0x114>
 80a2190:	4608      	mov	r0, r1
 80a2192:	e76e      	b.n	80a2072 <__aeabi_fmul+0x15e>
 80a2194:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a2198:	bf18      	it	ne
 80a219a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a219e:	d1ca      	bne.n	80a2136 <__aeabi_fdiv+0xba>
 80a21a0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a21a4:	f47f af5c 	bne.w	80a2060 <__aeabi_fmul+0x14c>
 80a21a8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a21ac:	f47f af3c 	bne.w	80a2028 <__aeabi_fmul+0x114>
 80a21b0:	e75f      	b.n	80a2072 <__aeabi_fmul+0x15e>
 80a21b2:	bf00      	nop

080a21b4 <__gesf2>:
 80a21b4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80a21b8:	e006      	b.n	80a21c8 <__cmpsf2+0x4>
 80a21ba:	bf00      	nop

080a21bc <__lesf2>:
 80a21bc:	f04f 0c01 	mov.w	ip, #1
 80a21c0:	e002      	b.n	80a21c8 <__cmpsf2+0x4>
 80a21c2:	bf00      	nop

080a21c4 <__cmpsf2>:
 80a21c4:	f04f 0c01 	mov.w	ip, #1
 80a21c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a21cc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a21d0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a21d4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a21d8:	bf18      	it	ne
 80a21da:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a21de:	d011      	beq.n	80a2204 <__cmpsf2+0x40>
 80a21e0:	b001      	add	sp, #4
 80a21e2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80a21e6:	bf18      	it	ne
 80a21e8:	ea90 0f01 	teqne	r0, r1
 80a21ec:	bf58      	it	pl
 80a21ee:	ebb2 0003 	subspl.w	r0, r2, r3
 80a21f2:	bf88      	it	hi
 80a21f4:	17c8      	asrhi	r0, r1, #31
 80a21f6:	bf38      	it	cc
 80a21f8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80a21fc:	bf18      	it	ne
 80a21fe:	f040 0001 	orrne.w	r0, r0, #1
 80a2202:	4770      	bx	lr
 80a2204:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a2208:	d102      	bne.n	80a2210 <__cmpsf2+0x4c>
 80a220a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80a220e:	d105      	bne.n	80a221c <__cmpsf2+0x58>
 80a2210:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80a2214:	d1e4      	bne.n	80a21e0 <__cmpsf2+0x1c>
 80a2216:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80a221a:	d0e1      	beq.n	80a21e0 <__cmpsf2+0x1c>
 80a221c:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a2220:	4770      	bx	lr
 80a2222:	bf00      	nop

080a2224 <__aeabi_cfrcmple>:
 80a2224:	4684      	mov	ip, r0
 80a2226:	4608      	mov	r0, r1
 80a2228:	4661      	mov	r1, ip
 80a222a:	e7ff      	b.n	80a222c <__aeabi_cfcmpeq>

080a222c <__aeabi_cfcmpeq>:
 80a222c:	b50f      	push	{r0, r1, r2, r3, lr}
 80a222e:	f7ff ffc9 	bl	80a21c4 <__cmpsf2>
 80a2232:	2800      	cmp	r0, #0
 80a2234:	bf48      	it	mi
 80a2236:	f110 0f00 	cmnmi.w	r0, #0
 80a223a:	bd0f      	pop	{r0, r1, r2, r3, pc}

080a223c <__aeabi_fcmpeq>:
 80a223c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2240:	f7ff fff4 	bl	80a222c <__aeabi_cfcmpeq>
 80a2244:	bf0c      	ite	eq
 80a2246:	2001      	moveq	r0, #1
 80a2248:	2000      	movne	r0, #0
 80a224a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a224e:	bf00      	nop

080a2250 <__aeabi_fcmplt>:
 80a2250:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2254:	f7ff ffea 	bl	80a222c <__aeabi_cfcmpeq>
 80a2258:	bf34      	ite	cc
 80a225a:	2001      	movcc	r0, #1
 80a225c:	2000      	movcs	r0, #0
 80a225e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2262:	bf00      	nop

080a2264 <__aeabi_fcmple>:
 80a2264:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2268:	f7ff ffe0 	bl	80a222c <__aeabi_cfcmpeq>
 80a226c:	bf94      	ite	ls
 80a226e:	2001      	movls	r0, #1
 80a2270:	2000      	movhi	r0, #0
 80a2272:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2276:	bf00      	nop

080a2278 <__aeabi_fcmpge>:
 80a2278:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a227c:	f7ff ffd2 	bl	80a2224 <__aeabi_cfrcmple>
 80a2280:	bf94      	ite	ls
 80a2282:	2001      	movls	r0, #1
 80a2284:	2000      	movhi	r0, #0
 80a2286:	f85d fb08 	ldr.w	pc, [sp], #8
 80a228a:	bf00      	nop

080a228c <__aeabi_fcmpgt>:
 80a228c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2290:	f7ff ffc8 	bl	80a2224 <__aeabi_cfrcmple>
 80a2294:	bf34      	ite	cc
 80a2296:	2001      	movcc	r0, #1
 80a2298:	2000      	movcs	r0, #0
 80a229a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a229e:	bf00      	nop

080a22a0 <__cxa_atexit>:
 80a22a0:	b510      	push	{r4, lr}
 80a22a2:	4c05      	ldr	r4, [pc, #20]	; (80a22b8 <__cxa_atexit+0x18>)
 80a22a4:	4613      	mov	r3, r2
 80a22a6:	b12c      	cbz	r4, 80a22b4 <__cxa_atexit+0x14>
 80a22a8:	460a      	mov	r2, r1
 80a22aa:	4601      	mov	r1, r0
 80a22ac:	2002      	movs	r0, #2
 80a22ae:	f3af 8000 	nop.w
 80a22b2:	bd10      	pop	{r4, pc}
 80a22b4:	4620      	mov	r0, r4
 80a22b6:	bd10      	pop	{r4, pc}
 80a22b8:	00000000 	.word	0x00000000

080a22bc <memcpy>:
 80a22bc:	b510      	push	{r4, lr}
 80a22be:	1e43      	subs	r3, r0, #1
 80a22c0:	440a      	add	r2, r1
 80a22c2:	4291      	cmp	r1, r2
 80a22c4:	d004      	beq.n	80a22d0 <memcpy+0x14>
 80a22c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a22ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a22ce:	e7f8      	b.n	80a22c2 <memcpy+0x6>
 80a22d0:	bd10      	pop	{r4, pc}

080a22d2 <memset>:
 80a22d2:	4603      	mov	r3, r0
 80a22d4:	4402      	add	r2, r0
 80a22d6:	4293      	cmp	r3, r2
 80a22d8:	d002      	beq.n	80a22e0 <memset+0xe>
 80a22da:	f803 1b01 	strb.w	r1, [r3], #1
 80a22de:	e7fa      	b.n	80a22d6 <memset+0x4>
 80a22e0:	4770      	bx	lr
	...

080a22e4 <srand>:
 80a22e4:	b538      	push	{r3, r4, r5, lr}
 80a22e6:	4b12      	ldr	r3, [pc, #72]	; (80a2330 <srand+0x4c>)
 80a22e8:	4605      	mov	r5, r0
 80a22ea:	681c      	ldr	r4, [r3, #0]
 80a22ec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a22ee:	b9d3      	cbnz	r3, 80a2326 <srand+0x42>
 80a22f0:	2018      	movs	r0, #24
 80a22f2:	f7fe f933 	bl	80a055c <malloc>
 80a22f6:	f243 330e 	movw	r3, #13070	; 0x330e
 80a22fa:	63a0      	str	r0, [r4, #56]	; 0x38
 80a22fc:	8003      	strh	r3, [r0, #0]
 80a22fe:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a2302:	8043      	strh	r3, [r0, #2]
 80a2304:	f241 2334 	movw	r3, #4660	; 0x1234
 80a2308:	8083      	strh	r3, [r0, #4]
 80a230a:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a230e:	80c3      	strh	r3, [r0, #6]
 80a2310:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a2314:	8103      	strh	r3, [r0, #8]
 80a2316:	2305      	movs	r3, #5
 80a2318:	8143      	strh	r3, [r0, #10]
 80a231a:	230b      	movs	r3, #11
 80a231c:	8183      	strh	r3, [r0, #12]
 80a231e:	2201      	movs	r2, #1
 80a2320:	2300      	movs	r3, #0
 80a2322:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a2326:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a2328:	2200      	movs	r2, #0
 80a232a:	611d      	str	r5, [r3, #16]
 80a232c:	615a      	str	r2, [r3, #20]
 80a232e:	bd38      	pop	{r3, r4, r5, pc}
 80a2330:	20000064 	.word	0x20000064

080a2334 <strlen>:
 80a2334:	4603      	mov	r3, r0
 80a2336:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a233a:	2a00      	cmp	r2, #0
 80a233c:	d1fb      	bne.n	80a2336 <strlen+0x2>
 80a233e:	1a18      	subs	r0, r3, r0
 80a2340:	3801      	subs	r0, #1
 80a2342:	4770      	bx	lr

080a2344 <dynalib_user>:
 80a2344:	0021 080a 0061 080a 008d 080a 0091 080a     !...a...........
 80a2354:	0000 0000 6548 6c6c 216f 7400 6d65 3a70     ....Hello!.temp:
 80a2364:	0020 0000                                    ...

080a2368 <_ZTV7TwoWire>:
	...
 80a2370:	0595 080a 05df 080a 05b7 080a 0597 080a     ................
 80a2380:	05bf 080a 05c7 080a 05cf 080a 05d7 080a     ................

080a2390 <_ZTV9IPAddress>:
	...
 80a2398:	0659 080a 0649 080a 064b 080a 6162 6475     Y...I...K...baud
 80a23a8:	5300 7265 6169 006c 5355 5342 7265 6169     .Serial.USBSeria
 80a23b8:	316c 7400 7079 0065 6170 6172 006d 6d63     l1.type.param.cm
 80a23c8:	0064 6469 6800 646e 7300 7274 006d 6966     d.id.hnd.strm.fi
 80a23d8:	746c 6c00 6c76 6100 6464 6148 646e 656c     lt.lvl.addHandle
 80a23e8:	0072 6572 6f6d 6576 6148 646e 656c 0072     r.removeHandler.
 80a23f8:	6e65 6d75 6148 646e 656c 7372 4a00 4f53     enumHandlers.JSO
 80a2408:	534e 7274 6165 4c6d 676f 6148 646e 656c     NStreamLogHandle
 80a2418:	0072 7061 0070 3025 3031 2075 5d00 0020     r.app.%010u .] .
 80a2428:	6425 2c00 0020 2928 203a 2000 005b 6f63     %d., .(): . [.co
 80a2438:	6564 3d20 0020 6925 6400 7465 6961 736c     de = .%i.details
 80a2448:	3d20 0020 0a0d 6c00 006e 6e66 6300 646f      = ....ln.fn.cod
 80a2458:	0065 6564 6174 6c69 6e00 6e6f 0065 7274     e.detail.none.tr
 80a2468:	6361 0065 6e69 6f66 7700 7261 006e 7265     ace.info.warn.er
 80a2478:	6f72 0072 6170 696e 0063 6c61 006c 0000     ror.panic.all...

080a2488 <_ZTVN5spark12NetworkClassE>:
	...
 80a2490:	0721 080a 072b 080a 0735 080a 073f 080a     !...+...5...?...
 80a24a0:	0749 080a 0755 080a 0761 080a 076d 080a     I...U...a...m...
 80a24b0:	0775 080a 077f 080a 0789 080a 616e 006e     u...........nan.
 80a24c0:	766f 0066 002e 6e69 0066 0000               ovf...inf...

080a24cc <_ZTV8SPIClass>:
	...
 80a24d4:	0ab1 080a 0ab3 080a 005a 2b25 3330 3a64     ........Z.%+03d:
 80a24e4:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
 80a24f4:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
 80a2504:	0000 0000                                   ....

080a2508 <_ZTV11USARTSerial>:
	...
 80a2510:	0b15 080a 0b65 080a 0b73 080a 07ed 080a     ....e...s.......
 80a2520:	0b29 080a 0b4b 080a 0b37 080a 0b5f 080a     )...K...7..._...
 80a2530:	0b17 080a 0b1b 080a                         ........

080a2538 <_ZTV9USBSerial>:
	...
 80a2540:	0c15 080a 0c65 080a 0c73 080a 07ed 080a     ....e...s.......
 80a2550:	0c51 080a 0c17 080a 0c2d 080a 0c5f 080a     Q.......-..._...
 80a2560:	0c43 080a 0c11 080a                         C.......

080a2568 <_ZTVN5spark9WiFiClassE>:
	...
 80a2570:	0e4f 080a 0e45 080a 0e3b 080a 0dad 080a     O...E...;.......
 80a2580:	0e2f 080a 0e23 080a 0e17 080a 0e0f 080a     /...#...........
 80a2590:	0e05 080a 0dfb 080a 0db7 080a               ............

080a259c <__sf_fake_stdin>:
	...

080a25bc <__sf_fake_stdout>:
	...

080a25dc <__sf_fake_stderr>:
	...
 80a25fc:	0043                                        C.

080a25fe <link_const_variable_data_end>:
	...

080a2600 <link_constructors_location>:
 80a2600:	080a023d 	.word	0x080a023d
 80a2604:	080a029b 	.word	0x080a029b
 80a2608:	080a0711 	.word	0x080a0711
 80a260c:	080a07d9 	.word	0x080a07d9
 80a2610:	080a0a95 	.word	0x080a0a95
 80a2614:	080a0ae9 	.word	0x080a0ae9
 80a2618:	080a0b01 	.word	0x080a0b01
 80a261c:	080a0e59 	.word	0x080a0e59
 80a2620:	080a0fe5 	.word	0x080a0fe5
 80a2624:	080a1015 	.word	0x080a1015
 80a2628:	080a1069 	.word	0x080a1069
 80a262c:	080a112d 	.word	0x080a112d
 80a2630:	080a11b1 	.word	0x080a11b1
 80a2634:	080a1235 	.word	0x080a1235

080a2638 <link_constructors_end>:
	...

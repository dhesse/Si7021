
/Users/dirkhesse/code/Si7021/target/1.4.4/argon/Si7021.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000028f0  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000000  2003f400  2003f400  000169a8  2**0
                  CONTENTS
  4 .data         0000006c  2003e344  000d6910  0000e344  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000440  2003e3b0  2003e3b0  0001e3b0  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d697c  000d697c  0001697c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d69a4  000d69a4  000169a4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000dee39  00000000  00000000  000169a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000115a0  00000000  00000000  000f57e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001c018  00000000  00000000  00106d81  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002440  00000000  00000000  00122d99  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000042e8  00000000  00000000  001251d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00037448  00000000  00000000  001294c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00029a7c  00000000  00000000  00160909  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00104576  00000000  00000000  0018a385  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000c9a4  00000000  00000000  0028e8fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f002 fa1b 	bl	d646c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f002 fa20 	bl	d6482 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e344 	.word	0x2003e344
   d404c:	000d6910 	.word	0x000d6910
   d4050:	2003e3b0 	.word	0x2003e3b0
   d4054:	2003e3b0 	.word	0x2003e3b0
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f001 fbf3 	bl	d5848 <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000d690c 	.word	0x000d690c
   d4084:	000d68cc 	.word	0x000d68cc

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f000 b94a 	b.w	d4320 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 f967 	bl	d4360 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f001 bba5 	b.w	d57e4 <_post_loop>

000d409a <_Znwj>:
   d409a:	f000 bbd1 	b.w	d4840 <malloc>

000d409e <_ZdlPv>:
   d409e:	f000 bbd7 	b.w	d4850 <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f000 bbd5 	b.w	d4850 <free>
	...

000d40a8 <__cxa_pure_virtual>:
        ;
    }
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a8:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40aa:	4a03      	ldr	r2, [pc, #12]	; (d40b8 <__cxa_pure_virtual+0x10>)
   d40ac:	2100      	movs	r1, #0
   d40ae:	200c      	movs	r0, #12
   d40b0:	f000 fb22 	bl	d46f8 <panic_>
   d40b4:	e7fe      	b.n	d40b4 <__cxa_pure_virtual+0xc>
   d40b6:	bf00      	nop
   d40b8:	000d44c9 	.word	0x000d44c9

000d40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40bc:	7800      	ldrb	r0, [r0, #0]
   d40be:	fab0 f080 	clz	r0, r0
   d40c2:	0940      	lsrs	r0, r0, #5
   d40c4:	4770      	bx	lr

000d40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c6:	2301      	movs	r3, #1
   d40c8:	7003      	strb	r3, [r0, #0]
   d40ca:	4770      	bx	lr

000d40cc <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d40cc:	6803      	ldr	r3, [r0, #0]
   d40ce:	b2c9      	uxtb	r1, r1
   d40d0:	689b      	ldr	r3, [r3, #8]
   d40d2:	4718      	bx	r3

000d40d4 <_ZN15Adafruit_Si7021C1EP7TwoWire>:
 *  @brief  Instantiates a new Adafruit_Si7021 class
 *  @param  *theWire
 *          optional wire object
 */
Adafruit_Si7021::Adafruit_Si7021(TwoWire *theWire) {
  _i2caddr = SI7021_DEFAULT_ADDRESS;
   d40d4:	2240      	movs	r2, #64	; 0x40
   d40d6:	7282      	strb	r2, [r0, #10]
  _wire = theWire;
   d40d8:	60c1      	str	r1, [r0, #12]
  sernum_a = sernum_b = 0;
   d40da:	2200      	movs	r2, #0
  _model = SI_7021;
   d40dc:	2103      	movs	r1, #3
 *          optional wire object
 */
Adafruit_Si7021::Adafruit_Si7021(TwoWire *theWire) {
  _i2caddr = SI7021_DEFAULT_ADDRESS;
  _wire = theWire;
  sernum_a = sernum_b = 0;
   d40de:	6042      	str	r2, [r0, #4]
   d40e0:	6002      	str	r2, [r0, #0]
  _model = SI_7021;
   d40e2:	7201      	strb	r1, [r0, #8]
  _revision = 0;
   d40e4:	7242      	strb	r2, [r0, #9]
}
   d40e6:	4770      	bx	lr

000d40e8 <_ZN15Adafruit_Si702112readHumidityEv>:

/*!
 *  @brief  Reads the humidity value from Si7021 (No Master hold)
 *  @return Returns humidity as float value or NAN when there is error timeout
 */
float Adafruit_Si7021::readHumidity() {
   d40e8:	b570      	push	{r4, r5, r6, lr}
   d40ea:	4604      	mov	r4, r0
  _wire->beginTransmission(_i2caddr);
   d40ec:	f990 100a 	ldrsb.w	r1, [r0, #10]
   d40f0:	68c0      	ldr	r0, [r0, #12]
   d40f2:	f000 ff7f 	bl	d4ff4 <_ZN7TwoWire17beginTransmissionEi>

  _wire->write(SI7021_MEASRH_NOHOLD_CMD);
   d40f6:	21f5      	movs	r1, #245	; 0xf5
   d40f8:	68e0      	ldr	r0, [r4, #12]
   d40fa:	f7ff ffe7 	bl	d40cc <_ZN7TwoWire5writeEi>
  uint8_t err = _wire->endTransmission();
   d40fe:	68e0      	ldr	r0, [r4, #12]
   d4100:	f000 ff7f 	bl	d5002 <_ZN7TwoWire15endTransmissionEv>

  if (err != 0)
   d4104:	2800      	cmp	r0, #0
   d4106:	d13f      	bne.n	d4188 <_ZN15Adafruit_Si702112readHumidityEv+0xa0>
    return NAN; // error

  delay(20); // account for conversion time for reading humidity
   d4108:	2014      	movs	r0, #20
   d410a:	f000 fbc1 	bl	d4890 <delay>
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d410e:	f000 f9e3 	bl	d44d8 <HAL_Timer_Get_Milli_Seconds>
   d4112:	4605      	mov	r5, r0
   d4114:	f000 f9e0 	bl	d44d8 <HAL_Timer_Get_Milli_Seconds>

  uint32_t start = millis(); // start timeout
  while (millis() - start < _TRANSACTION_TIMEOUT) {
   d4118:	1b40      	subs	r0, r0, r5
   d411a:	2863      	cmp	r0, #99	; 0x63
   d411c:	d834      	bhi.n	d4188 <_ZN15Adafruit_Si702112readHumidityEv+0xa0>
    if (_wire->requestFrom(_i2caddr, 3) == 3) {
   d411e:	2203      	movs	r2, #3
   d4120:	f994 100a 	ldrsb.w	r1, [r4, #10]
   d4124:	68e0      	ldr	r0, [r4, #12]
   d4126:	f000 ff5c 	bl	d4fe2 <_ZN7TwoWire11requestFromEii>
   d412a:	2803      	cmp	r0, #3
   d412c:	d128      	bne.n	d4180 <_ZN15Adafruit_Si702112readHumidityEv+0x98>
      uint16_t hum = _wire->read() << 8 | _wire->read();
   d412e:	68e0      	ldr	r0, [r4, #12]
   d4130:	6803      	ldr	r3, [r0, #0]
   d4132:	695b      	ldr	r3, [r3, #20]
   d4134:	4798      	blx	r3
   d4136:	4606      	mov	r6, r0
   d4138:	68e0      	ldr	r0, [r4, #12]
   d413a:	6803      	ldr	r3, [r0, #0]
   d413c:	695b      	ldr	r3, [r3, #20]
   d413e:	4798      	blx	r3
   d4140:	4605      	mov	r5, r0
      uint8_t chxsum = _wire->read();
   d4142:	68e0      	ldr	r0, [r4, #12]
   d4144:	6803      	ldr	r3, [r0, #0]

      float humidity = hum;
   d4146:	ea45 2506 	orr.w	r5, r5, r6, lsl #8

  uint32_t start = millis(); // start timeout
  while (millis() - start < _TRANSACTION_TIMEOUT) {
    if (_wire->requestFrom(_i2caddr, 3) == 3) {
      uint16_t hum = _wire->read() << 8 | _wire->read();
      uint8_t chxsum = _wire->read();
   d414a:	695b      	ldr	r3, [r3, #20]

      float humidity = hum;
   d414c:	b2ad      	uxth	r5, r5

  uint32_t start = millis(); // start timeout
  while (millis() - start < _TRANSACTION_TIMEOUT) {
    if (_wire->requestFrom(_i2caddr, 3) == 3) {
      uint16_t hum = _wire->read() << 8 | _wire->read();
      uint8_t chxsum = _wire->read();
   d414e:	4798      	blx	r3

      float humidity = hum;
   d4150:	ee07 5a90 	vmov	s15, r5
      humidity *= 125;
   d4154:	ed9f 7a0e 	vldr	s14, [pc, #56]	; d4190 <_ZN15Adafruit_Si702112readHumidityEv+0xa8>
  while (millis() - start < _TRANSACTION_TIMEOUT) {
    if (_wire->requestFrom(_i2caddr, 3) == 3) {
      uint16_t hum = _wire->read() << 8 | _wire->read();
      uint8_t chxsum = _wire->read();

      float humidity = hum;
   d4158:	eef8 7a67 	vcvt.f32.u32	s15, s15
      humidity *= 125;
      humidity /= 65536;
      humidity -= 6;
   d415c:	eeb9 0a08 	vmov.f32	s0, #152	; 0xc0c00000 -6.0
    if (_wire->requestFrom(_i2caddr, 3) == 3) {
      uint16_t hum = _wire->read() << 8 | _wire->read();
      uint8_t chxsum = _wire->read();

      float humidity = hum;
      humidity *= 125;
   d4160:	ee67 7a87 	vmul.f32	s15, s15, s14
      humidity /= 65536;
      humidity -= 6;
   d4164:	ed9f 7a0b 	vldr	s14, [pc, #44]	; d4194 <_ZN15Adafruit_Si702112readHumidityEv+0xac>
   d4168:	eea7 0a87 	vfma.f32	s0, s15, s14

      return humidity > 100.0 ? 100.0 : humidity;
   d416c:	eddf 7a0a 	vldr	s15, [pc, #40]	; d4198 <_ZN15Adafruit_Si702112readHumidityEv+0xb0>
   d4170:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d4174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4178:	bfc8      	it	gt
   d417a:	eeb0 0a67 	vmovgt.f32	s0, s15
   d417e:	bd70      	pop	{r4, r5, r6, pc}
    }
    delay(6); // 1/2 typical sample processing time
   d4180:	2006      	movs	r0, #6
   d4182:	f000 fb85 	bl	d4890 <delay>
    return NAN; // error

  delay(20); // account for conversion time for reading humidity

  uint32_t start = millis(); // start timeout
  while (millis() - start < _TRANSACTION_TIMEOUT) {
   d4186:	e7c5      	b.n	d4114 <_ZN15Adafruit_Si702112readHumidityEv+0x2c>

  _wire->write(SI7021_MEASRH_NOHOLD_CMD);
  uint8_t err = _wire->endTransmission();

  if (err != 0)
    return NAN; // error
   d4188:	ed9f 0a04 	vldr	s0, [pc, #16]	; d419c <_ZN15Adafruit_Si702112readHumidityEv+0xb4>
      return humidity > 100.0 ? 100.0 : humidity;
    }
    delay(6); // 1/2 typical sample processing time
  }
  return NAN; // Error timeout
}
   d418c:	bd70      	pop	{r4, r5, r6, pc}
   d418e:	bf00      	nop
   d4190:	42fa0000 	.word	0x42fa0000
   d4194:	37800000 	.word	0x37800000
   d4198:	42c80000 	.word	0x42c80000
   d419c:	7fc00000 	.word	0x7fc00000

000d41a0 <_ZN15Adafruit_Si702115readTemperatureEv>:
/*!
 *  @brief  Reads the temperature value from Si7021 (No Master hold)
 *  @return Returns temperature as float value or NAN when there is error
 * timeout
 */
float Adafruit_Si7021::readTemperature() {
   d41a0:	b570      	push	{r4, r5, r6, lr}
   d41a2:	4604      	mov	r4, r0
  _wire->beginTransmission(_i2caddr);
   d41a4:	f990 100a 	ldrsb.w	r1, [r0, #10]
   d41a8:	68c0      	ldr	r0, [r0, #12]
   d41aa:	f000 ff23 	bl	d4ff4 <_ZN7TwoWire17beginTransmissionEi>
  _wire->write(SI7021_MEASTEMP_NOHOLD_CMD);
   d41ae:	21f3      	movs	r1, #243	; 0xf3
   d41b0:	68e0      	ldr	r0, [r4, #12]
   d41b2:	f7ff ff8b 	bl	d40cc <_ZN7TwoWire5writeEi>
  uint8_t err = _wire->endTransmission();
   d41b6:	68e0      	ldr	r0, [r4, #12]
   d41b8:	f000 ff23 	bl	d5002 <_ZN7TwoWire15endTransmissionEv>

  if (err != 0)
   d41bc:	2800      	cmp	r0, #0
   d41be:	d148      	bne.n	d4252 <_ZN15Adafruit_Si702115readTemperatureEv+0xb2>
    return NAN; // error

  delay(20); // account for conversion time for reading temperature
   d41c0:	2014      	movs	r0, #20
   d41c2:	f000 fb65 	bl	d4890 <delay>
   d41c6:	f000 f987 	bl	d44d8 <HAL_Timer_Get_Milli_Seconds>
   d41ca:	4605      	mov	r5, r0
   d41cc:	f000 f984 	bl	d44d8 <HAL_Timer_Get_Milli_Seconds>

  uint32_t start = millis(); // start timeout
  while (millis() - start < _TRANSACTION_TIMEOUT) {
   d41d0:	1b40      	subs	r0, r0, r5
   d41d2:	2863      	cmp	r0, #99	; 0x63
   d41d4:	d83d      	bhi.n	d4252 <_ZN15Adafruit_Si702115readTemperatureEv+0xb2>
    if (_wire->requestFrom(_i2caddr, 3) == 3) {
   d41d6:	2203      	movs	r2, #3
   d41d8:	f994 100a 	ldrsb.w	r1, [r4, #10]
   d41dc:	68e0      	ldr	r0, [r4, #12]
   d41de:	f000 ff00 	bl	d4fe2 <_ZN7TwoWire11requestFromEii>
   d41e2:	2803      	cmp	r0, #3
   d41e4:	d131      	bne.n	d424a <_ZN15Adafruit_Si702115readTemperatureEv+0xaa>
      uint16_t temp = _wire->read() << 8 | _wire->read();
   d41e6:	68e0      	ldr	r0, [r4, #12]
   d41e8:	6803      	ldr	r3, [r0, #0]
   d41ea:	695b      	ldr	r3, [r3, #20]
   d41ec:	4798      	blx	r3
   d41ee:	4606      	mov	r6, r0
   d41f0:	68e0      	ldr	r0, [r4, #12]
   d41f2:	6803      	ldr	r3, [r0, #0]
   d41f4:	695b      	ldr	r3, [r3, #20]
   d41f6:	4798      	blx	r3
   d41f8:	4605      	mov	r5, r0
      uint8_t chxsum = _wire->read();
   d41fa:	68e0      	ldr	r0, [r4, #12]
   d41fc:	6803      	ldr	r3, [r0, #0]

      float temperature = temp;
      temperature *= 175.72;
   d41fe:	ea45 2506 	orr.w	r5, r5, r6, lsl #8

  uint32_t start = millis(); // start timeout
  while (millis() - start < _TRANSACTION_TIMEOUT) {
    if (_wire->requestFrom(_i2caddr, 3) == 3) {
      uint16_t temp = _wire->read() << 8 | _wire->read();
      uint8_t chxsum = _wire->read();
   d4202:	695b      	ldr	r3, [r3, #20]
   d4204:	4798      	blx	r3

      float temperature = temp;
      temperature *= 175.72;
   d4206:	b2a8      	uxth	r0, r5
   d4208:	ee07 0a90 	vmov	s15, r0
   d420c:	eef8 7a67 	vcvt.f32.u32	s15, s15
   d4210:	ee17 0a90 	vmov	r0, s15
   d4214:	f001 fe66 	bl	d5ee4 <__aeabi_f2d>
   d4218:	a315      	add	r3, pc, #84	; (adr r3, d4270 <_ZN15Adafruit_Si702115readTemperatureEv+0xd0>)
   d421a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d421e:	f001 feb5 	bl	d5f8c <__aeabi_dmul>
   d4222:	f002 f8c5 	bl	d63b0 <__aeabi_d2f>
      temperature /= 65536;
      temperature -= 46.85;
   d4226:	eddf 7a10 	vldr	s15, [pc, #64]	; d4268 <_ZN15Adafruit_Si702115readTemperatureEv+0xc8>
   d422a:	ee07 0a10 	vmov	s14, r0
   d422e:	ee67 7a27 	vmul.f32	s15, s14, s15
   d4232:	ee17 0a90 	vmov	r0, s15
   d4236:	f001 fe55 	bl	d5ee4 <__aeabi_f2d>
   d423a:	a309      	add	r3, pc, #36	; (adr r3, d4260 <_ZN15Adafruit_Si702115readTemperatureEv+0xc0>)
   d423c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4240:	f001 fcf0 	bl	d5c24 <__aeabi_dsub>
   d4244:	f002 f8b4 	bl	d63b0 <__aeabi_d2f>
      return temperature;
   d4248:	e004      	b.n	d4254 <_ZN15Adafruit_Si702115readTemperatureEv+0xb4>
    }
    delay(6); // 1/2 typical sample processing time
   d424a:	2006      	movs	r0, #6
   d424c:	f000 fb20 	bl	d4890 <delay>
    return NAN; // error

  delay(20); // account for conversion time for reading temperature

  uint32_t start = millis(); // start timeout
  while (millis() - start < _TRANSACTION_TIMEOUT) {
   d4250:	e7bc      	b.n	d41cc <_ZN15Adafruit_Si702115readTemperatureEv+0x2c>
  _wire->beginTransmission(_i2caddr);
  _wire->write(SI7021_MEASTEMP_NOHOLD_CMD);
  uint8_t err = _wire->endTransmission();

  if (err != 0)
    return NAN; // error
   d4252:	4806      	ldr	r0, [pc, #24]	; (d426c <_ZN15Adafruit_Si702115readTemperatureEv+0xcc>)
    }
    delay(6); // 1/2 typical sample processing time
  }

  return NAN; // Error timeout
}
   d4254:	ee00 0a10 	vmov	s0, r0
   d4258:	bd70      	pop	{r4, r5, r6, pc}
   d425a:	bf00      	nop
   d425c:	f3af 8000 	nop.w
   d4260:	cccccccd 	.word	0xcccccccd
   d4264:	40476ccc 	.word	0x40476ccc
   d4268:	37800000 	.word	0x37800000
   d426c:	7fc00000 	.word	0x7fc00000
   d4270:	3d70a3d7 	.word	0x3d70a3d7
   d4274:	4065f70a 	.word	0x4065f70a

000d4278 <_GLOBAL__sub_I__ZN15Adafruit_Si7021C2EP7TwoWire>:

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4278:	f000 b936 	b.w	d44e8 <HAL_Pin_Map>

000d427c <_ZN10JFieldBase11format_nextEPc.isra.1>:
{
private:
    JFieldBase *next;

protected:
    void format_next(char *buf)
   d427c:	4603      	mov	r3, r0
   d427e:	4608      	mov	r0, r1
    {
        if (next)
   d4280:	681a      	ldr	r2, [r3, #0]
   d4282:	b132      	cbz	r2, d4292 <_ZN10JFieldBase11format_nextEPc.isra.1+0x16>
        {
            buf[0] = ',';
   d4284:	222c      	movs	r2, #44	; 0x2c
   d4286:	f801 2b01 	strb.w	r2, [r1], #1
            next->format(buf + 1);
   d428a:	6818      	ldr	r0, [r3, #0]
   d428c:	6803      	ldr	r3, [r0, #0]
   d428e:	681b      	ldr	r3, [r3, #0]
   d4290:	4718      	bx	r3
        }
        else 
        {
            sprintf(buf, "}");
   d4292:	4901      	ldr	r1, [pc, #4]	; (d4298 <_ZN10JFieldBase11format_nextEPc.isra.1+0x1c>)
   d4294:	f002 b926 	b.w	d64e4 <strcpy>
   d4298:	000d6578 	.word	0x000d6578

000d429c <_ZN6JFieldIfE6formatEPc>:
    format_next(buf + sprintf(buf, "\"%s\": %lu", name, value));
}

template <>
void JField<float>::format(char *buf)
{
   d429c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d429e:	4604      	mov	r4, r0
    format_next(buf + sprintf(buf, "\"%s\": %.2f", name, value));
   d42a0:	68c0      	ldr	r0, [r0, #12]
    format_next(buf + sprintf(buf, "\"%s\": %lu", name, value));
}

template <>
void JField<float>::format(char *buf)
{
   d42a2:	460d      	mov	r5, r1
    format_next(buf + sprintf(buf, "\"%s\": %.2f", name, value));
   d42a4:	f001 fe1e 	bl	d5ee4 <__aeabi_f2d>
   d42a8:	68a2      	ldr	r2, [r4, #8]
   d42aa:	e9cd 0100 	strd	r0, r1, [sp]
   d42ae:	4905      	ldr	r1, [pc, #20]	; (d42c4 <_ZN6JFieldIfE6formatEPc+0x28>)
   d42b0:	4628      	mov	r0, r5
   d42b2:	f000 fad5 	bl	d4860 <sprintf>
   d42b6:	1829      	adds	r1, r5, r0
   d42b8:	1d20      	adds	r0, r4, #4
}
   d42ba:	b003      	add	sp, #12
   d42bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
}

template <>
void JField<float>::format(char *buf)
{
    format_next(buf + sprintf(buf, "\"%s\": %.2f", name, value));
   d42c0:	f7ff bfdc 	b.w	d427c <_ZN10JFieldBase11format_nextEPc.isra.1>
   d42c4:	000d657a 	.word	0x000d657a

000d42c8 <_ZN10JFieldBaseD1Ev>:

public:
    JFieldBase(JFieldBase *next) : next(next){};
    virtual void format(char *buf) = 0;
    JFieldBase* get_next() { return next; };
    virtual ~JFieldBase() {
   d42c8:	b510      	push	{r4, lr}
   d42ca:	4b05      	ldr	r3, [pc, #20]	; (d42e0 <_ZN10JFieldBaseD1Ev+0x18>)
   d42cc:	6003      	str	r3, [r0, #0]
   d42ce:	4604      	mov	r4, r0
        delete next;
   d42d0:	6840      	ldr	r0, [r0, #4]
   d42d2:	b110      	cbz	r0, d42da <_ZN10JFieldBaseD1Ev+0x12>
   d42d4:	6803      	ldr	r3, [r0, #0]
   d42d6:	689b      	ldr	r3, [r3, #8]
   d42d8:	4798      	blx	r3
    };
   d42da:	4620      	mov	r0, r4
   d42dc:	bd10      	pop	{r4, pc}
   d42de:	bf00      	nop
   d42e0:	000d6558 	.word	0x000d6558

000d42e4 <_ZN6JFieldIfED1Ev>:
};

template <typename T>
class JField : public JFieldBase
   d42e4:	b510      	push	{r4, lr}
   d42e6:	4b03      	ldr	r3, [pc, #12]	; (d42f4 <_ZN6JFieldIfED1Ev+0x10>)
   d42e8:	6003      	str	r3, [r0, #0]
   d42ea:	4604      	mov	r4, r0
   d42ec:	f7ff ffec 	bl	d42c8 <_ZN10JFieldBaseD1Ev>
   d42f0:	4620      	mov	r0, r4
   d42f2:	bd10      	pop	{r4, pc}
   d42f4:	000d656c 	.word	0x000d656c

000d42f8 <_ZN6JFieldIfED0Ev>:
   d42f8:	b510      	push	{r4, lr}
   d42fa:	4604      	mov	r4, r0
   d42fc:	f7ff fff2 	bl	d42e4 <_ZN6JFieldIfED1Ev>
   d4300:	4620      	mov	r0, r4
   d4302:	2110      	movs	r1, #16
   d4304:	f001 fb3d 	bl	d5982 <_ZdlPvj>
   d4308:	4620      	mov	r0, r4
   d430a:	bd10      	pop	{r4, pc}

000d430c <_ZN10JFieldBaseD0Ev>:

public:
    JFieldBase(JFieldBase *next) : next(next){};
    virtual void format(char *buf) = 0;
    JFieldBase* get_next() { return next; };
    virtual ~JFieldBase() {
   d430c:	b510      	push	{r4, lr}
   d430e:	4604      	mov	r4, r0
        delete next;
    };
   d4310:	f7ff ffda 	bl	d42c8 <_ZN10JFieldBaseD1Ev>
   d4314:	4620      	mov	r0, r4
   d4316:	2108      	movs	r1, #8
   d4318:	f001 fb33 	bl	d5982 <_ZdlPvj>
   d431c:	4620      	mov	r0, r4
   d431e:	bd10      	pop	{r4, pc}

000d4320 <setup>:
#define MAIN_DEBUG 1

Adafruit_Si7021 sensor = Adafruit_Si7021();

void setup()
{
   d4320:	b508      	push	{r3, lr}
  Wire.begin();
   d4322:	f001 fae7 	bl	d58f4 <_Z19__fetch_global_Wirev>
}
   d4326:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

Adafruit_Si7021 sensor = Adafruit_Si7021();

void setup()
{
  Wire.begin();
   d432a:	f000 be4b 	b.w	d4fc4 <_ZN7TwoWire5beginEv>
	...

000d4330 <_ZN4JSON4pushIfEEvPKcT_>:
    public:
    JSON() : current(NULL) {};
    ~JSON() {
        delete current;
    }
    template<typename T> void push(const char* name, T value) {
   d4330:	b538      	push	{r3, r4, r5, lr}
   d4332:	4604      	mov	r4, r0
   d4334:	ed2d 8b02 	vpush	{d8}
        current = new JField<T>(name, value, current);
   d4338:	2010      	movs	r0, #16
    public:
    JSON() : current(NULL) {};
    ~JSON() {
        delete current;
    }
    template<typename T> void push(const char* name, T value) {
   d433a:	460d      	mov	r5, r1
   d433c:	eeb0 8a40 	vmov.f32	s16, s0
        current = new JField<T>(name, value, current);
   d4340:	f7ff feab 	bl	d409a <_Znwj>
   d4344:	b130      	cbz	r0, d4354 <_ZN4JSON4pushIfEEvPKcT_+0x24>
            sprintf(buf, "}");
        }
    }

public:
    JFieldBase(JFieldBase *next) : next(next){};
   d4346:	6823      	ldr	r3, [r4, #0]
   d4348:	6043      	str	r3, [r0, #4]
private:
    const char *name;
    T value;

public:
    JField(const char *name, T value, JFieldBase *next) : JFieldBase(next), name(name), value(value){};
   d434a:	4b04      	ldr	r3, [pc, #16]	; (d435c <_ZN4JSON4pushIfEEvPKcT_+0x2c>)
   d434c:	6003      	str	r3, [r0, #0]
   d434e:	6085      	str	r5, [r0, #8]
   d4350:	ed80 8a03 	vstr	s16, [r0, #12]
    ~JSON() {
        delete current;
    }
    template<typename T> void push(const char* name, T value) {
        current = new JField<T>(name, value, current);
    }
   d4354:	ecbd 8b02 	vpop	{d8}
    JSON() : current(NULL) {};
    ~JSON() {
        delete current;
    }
    template<typename T> void push(const char* name, T value) {
        current = new JField<T>(name, value, current);
   d4358:	6020      	str	r0, [r4, #0]
    }
   d435a:	bd38      	pop	{r3, r4, r5, pc}
   d435c:	000d656c 	.word	0x000d656c

000d4360 <loop>:
}

uint meas_delay_seconds = 60;

void loop()
{
   d4360:	b510      	push	{r4, lr}
   d4362:	b092      	sub	sp, #72	; 0x48

class JSON {
    private:
    JFieldBase* current;
    public:
    JSON() : current(NULL) {};
   d4364:	ac12      	add	r4, sp, #72	; 0x48
   d4366:	2300      	movs	r3, #0
   d4368:	f844 3d40 	str.w	r3, [r4, #-64]!
  JSON json;
  json.push("temperature", sensor.readTemperature());
   d436c:	482e      	ldr	r0, [pc, #184]	; (d4428 <loop+0xc8>)
   d436e:	f7ff ff17 	bl	d41a0 <_ZN15Adafruit_Si702115readTemperatureEv>
   d4372:	492e      	ldr	r1, [pc, #184]	; (d442c <loop+0xcc>)
   d4374:	4620      	mov	r0, r4
   d4376:	f7ff ffdb 	bl	d4330 <_ZN4JSON4pushIfEEvPKcT_>
  json.push("humidity", sensor.readHumidity());
   d437a:	482b      	ldr	r0, [pc, #172]	; (d4428 <loop+0xc8>)
   d437c:	f7ff feb4 	bl	d40e8 <_ZN15Adafruit_Si702112readHumidityEv>
   d4380:	492b      	ldr	r1, [pc, #172]	; (d4430 <loop+0xd0>)
   d4382:	4620      	mov	r0, r4
   d4384:	f7ff ffd4 	bl	d4330 <_ZN4JSON4pushIfEEvPKcT_>
  json.push("voltage", (float)(analogRead(BATT)*0.0011224));
   d4388:	2021      	movs	r0, #33	; 0x21
   d438a:	f001 fa9b 	bl	d58c4 <analogRead>
   d438e:	f001 fd97 	bl	d5ec0 <__aeabi_i2d>
   d4392:	a323      	add	r3, pc, #140	; (adr r3, d4420 <loop+0xc0>)
   d4394:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4398:	f001 fdf8 	bl	d5f8c <__aeabi_dmul>
   d439c:	f002 f808 	bl	d63b0 <__aeabi_d2f>
   d43a0:	4924      	ldr	r1, [pc, #144]	; (d4434 <loop+0xd4>)
   d43a2:	ee00 0a10 	vmov	s0, r0
   d43a6:	4620      	mov	r0, r4
   d43a8:	f7ff ffc2 	bl	d4330 <_ZN4JSON4pushIfEEvPKcT_>
    template<typename T> void push(const char* name, T value) {
        current = new JField<T>(name, value, current);
    }
    void format(char* buf){
        buf[0] = '{';
        current->format(buf+1);
   d43ac:	9802      	ldr	r0, [sp, #8]
    }
    template<typename T> void push(const char* name, T value) {
        current = new JField<T>(name, value, current);
    }
    void format(char* buf){
        buf[0] = '{';
   d43ae:	237b      	movs	r3, #123	; 0x7b
   d43b0:	f88d 3014 	strb.w	r3, [sp, #20]
        current->format(buf+1);
   d43b4:	6803      	ldr	r3, [r0, #0]
   d43b6:	f10d 0115 	add.w	r1, sp, #21
   d43ba:	681b      	ldr	r3, [r3, #0]
   d43bc:	4798      	blx	r3
  char res[50];
  json.format(res);
#ifdef MAIN_DEBUG
  Serial.println(res);
   d43be:	f001 f98f 	bl	d56e0 <_Z16_fetch_usbserialv>
   d43c2:	a905      	add	r1, sp, #20
   d43c4:	f001 f829 	bl	d541a <_ZN5Print7printlnEPKc>
   d43c8:	4b1b      	ldr	r3, [pc, #108]	; (d4438 <loop+0xd8>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d43ca:	491c      	ldr	r1, [pc, #112]	; (d443c <loop+0xdc>)
   d43cc:	781b      	ldrb	r3, [r3, #0]
   d43ce:	f88d 3000 	strb.w	r3, [sp]
   d43d2:	aa05      	add	r2, sp, #20
   d43d4:	233c      	movs	r3, #60	; 0x3c
   d43d6:	a803      	add	r0, sp, #12
   d43d8:	f000 fbf6 	bl	d4bc8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d43dc:	9c04      	ldr	r4, [sp, #16]
   d43de:	b17c      	cbz	r4, d4400 <loop+0xa0>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d43e0:	6863      	ldr	r3, [r4, #4]
   d43e2:	3b01      	subs	r3, #1
   d43e4:	6063      	str	r3, [r4, #4]
   d43e6:	b95b      	cbnz	r3, d4400 <loop+0xa0>
        {
          _M_dispose();
   d43e8:	6823      	ldr	r3, [r4, #0]
   d43ea:	4620      	mov	r0, r4
   d43ec:	689b      	ldr	r3, [r3, #8]
   d43ee:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d43f0:	68a3      	ldr	r3, [r4, #8]
   d43f2:	3b01      	subs	r3, #1
   d43f4:	60a3      	str	r3, [r4, #8]
   d43f6:	b91b      	cbnz	r3, d4400 <loop+0xa0>
            _M_destroy();
   d43f8:	6823      	ldr	r3, [r4, #0]
   d43fa:	4620      	mov	r0, r4
   d43fc:	68db      	ldr	r3, [r3, #12]
   d43fe:	4798      	blx	r3
#endif
  Particle.publish("ambience/cigarbox", res, PRIVATE);
  delay(meas_delay_seconds * 1000);
   d4400:	4b0f      	ldr	r3, [pc, #60]	; (d4440 <loop+0xe0>)
   d4402:	681b      	ldr	r3, [r3, #0]
   d4404:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4408:	4358      	muls	r0, r3
   d440a:	f000 fa41 	bl	d4890 <delay>
    private:
    JFieldBase* current;
    public:
    JSON() : current(NULL) {};
    ~JSON() {
        delete current;
   d440e:	9802      	ldr	r0, [sp, #8]
   d4410:	b110      	cbz	r0, d4418 <loop+0xb8>
   d4412:	6803      	ldr	r3, [r0, #0]
   d4414:	689b      	ldr	r3, [r3, #8]
   d4416:	4798      	blx	r3
   d4418:	b012      	add	sp, #72	; 0x48
   d441a:	bd10      	pop	{r4, pc}
   d441c:	f3af 8000 	nop.w
   d4420:	d2c10294 	.word	0xd2c10294
   d4424:	3f5263af 	.word	0x3f5263af
   d4428:	2003e3b4 	.word	0x2003e3b4
   d442c:	000d6598 	.word	0x000d6598
   d4430:	000d65a4 	.word	0x000d65a4
   d4434:	000d65ad 	.word	0x000d65ad
   d4438:	2003e3c4 	.word	0x2003e3c4
   d443c:	000d65b5 	.word	0x000d65b5
   d4440:	2003e344 	.word	0x2003e344

000d4444 <_GLOBAL__sub_I__ZN6JFieldIiE6formatEPc>:
   d4444:	b508      	push	{r3, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4446:	4b06      	ldr	r3, [pc, #24]	; (d4460 <_GLOBAL__sub_I__ZN6JFieldIiE6formatEPc+0x1c>)
   d4448:	2201      	movs	r2, #1
   d444a:	701a      	strb	r2, [r3, #0]
   d444c:	f000 f84c 	bl	d44e8 <HAL_Pin_Map>
 *  @brief  Class that stores state and functions for interacting with
 *          Si7021 Sensor
 */
class Adafruit_Si7021 {
public:
  Adafruit_Si7021(TwoWire *theWire = &Wire);
   d4450:	f001 fa50 	bl	d58f4 <_Z19__fetch_global_Wirev>
   d4454:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
#include "Adafruit_Si7021.h"
#include "ujson.hpp"
#define MAIN_DEBUG 1

Adafruit_Si7021 sensor = Adafruit_Si7021();
   d4458:	4601      	mov	r1, r0
   d445a:	4802      	ldr	r0, [pc, #8]	; (d4464 <_GLOBAL__sub_I__ZN6JFieldIiE6formatEPc+0x20>)
   d445c:	f7ff be3a 	b.w	d40d4 <_ZN15Adafruit_Si7021C1EP7TwoWire>
   d4460:	2003e3c4 	.word	0x2003e3c4
   d4464:	2003e3b4 	.word	0x2003e3b4

000d4468 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4468:	b508      	push	{r3, lr}
   d446a:	4b02      	ldr	r3, [pc, #8]	; (d4474 <os_thread_is_current+0xc>)
   d446c:	681b      	ldr	r3, [r3, #0]
   d446e:	689b      	ldr	r3, [r3, #8]
   d4470:	9301      	str	r3, [sp, #4]
   d4472:	bd08      	pop	{r3, pc}
   d4474:	00030248 	.word	0x00030248

000d4478 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4478:	b508      	push	{r3, lr}
   d447a:	4b02      	ldr	r3, [pc, #8]	; (d4484 <os_thread_join+0xc>)
   d447c:	681b      	ldr	r3, [r3, #0]
   d447e:	691b      	ldr	r3, [r3, #16]
   d4480:	9301      	str	r3, [sp, #4]
   d4482:	bd08      	pop	{r3, pc}
   d4484:	00030248 	.word	0x00030248

000d4488 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4488:	b508      	push	{r3, lr}
   d448a:	4b02      	ldr	r3, [pc, #8]	; (d4494 <os_thread_cleanup+0xc>)
   d448c:	681b      	ldr	r3, [r3, #0]
   d448e:	695b      	ldr	r3, [r3, #20]
   d4490:	9301      	str	r3, [sp, #4]
   d4492:	bd08      	pop	{r3, pc}
   d4494:	00030248 	.word	0x00030248

000d4498 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d4498:	b508      	push	{r3, lr}
   d449a:	4b02      	ldr	r3, [pc, #8]	; (d44a4 <os_mutex_create+0xc>)
   d449c:	681b      	ldr	r3, [r3, #0]
   d449e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d44a0:	9301      	str	r3, [sp, #4]
   d44a2:	bd08      	pop	{r3, pc}
   d44a4:	00030248 	.word	0x00030248

000d44a8 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d44a8:	b508      	push	{r3, lr}
   d44aa:	4b02      	ldr	r3, [pc, #8]	; (d44b4 <os_mutex_recursive_create+0xc>)
   d44ac:	681b      	ldr	r3, [r3, #0]
   d44ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d44b0:	9301      	str	r3, [sp, #4]
   d44b2:	bd08      	pop	{r3, pc}
   d44b4:	00030248 	.word	0x00030248

000d44b8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d44b8:	b508      	push	{r3, lr}
   d44ba:	4b02      	ldr	r3, [pc, #8]	; (d44c4 <HAL_RNG_GetRandomNumber+0xc>)
   d44bc:	681b      	ldr	r3, [r3, #0]
   d44be:	685b      	ldr	r3, [r3, #4]
   d44c0:	9301      	str	r3, [sp, #4]
   d44c2:	bd08      	pop	{r3, pc}
   d44c4:	00030218 	.word	0x00030218

000d44c8 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d44c8:	b508      	push	{r3, lr}
   d44ca:	4b02      	ldr	r3, [pc, #8]	; (d44d4 <HAL_Delay_Microseconds+0xc>)
   d44cc:	681b      	ldr	r3, [r3, #0]
   d44ce:	68db      	ldr	r3, [r3, #12]
   d44d0:	9301      	str	r3, [sp, #4]
   d44d2:	bd08      	pop	{r3, pc}
   d44d4:	00030218 	.word	0x00030218

000d44d8 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d44d8:	b508      	push	{r3, lr}
   d44da:	4b02      	ldr	r3, [pc, #8]	; (d44e4 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d44dc:	681b      	ldr	r3, [r3, #0]
   d44de:	695b      	ldr	r3, [r3, #20]
   d44e0:	9301      	str	r3, [sp, #4]
   d44e2:	bd08      	pop	{r3, pc}
   d44e4:	00030218 	.word	0x00030218

000d44e8 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d44e8:	b508      	push	{r3, lr}
   d44ea:	4b02      	ldr	r3, [pc, #8]	; (d44f4 <HAL_Pin_Map+0xc>)
   d44ec:	681b      	ldr	r3, [r3, #0]
   d44ee:	681b      	ldr	r3, [r3, #0]
   d44f0:	9301      	str	r3, [sp, #4]
   d44f2:	bd08      	pop	{r3, pc}
   d44f4:	0003022c 	.word	0x0003022c

000d44f8 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d44f8:	b508      	push	{r3, lr}
   d44fa:	4b02      	ldr	r3, [pc, #8]	; (d4504 <HAL_Validate_Pin_Function+0xc>)
   d44fc:	681b      	ldr	r3, [r3, #0]
   d44fe:	685b      	ldr	r3, [r3, #4]
   d4500:	9301      	str	r3, [sp, #4]
   d4502:	bd08      	pop	{r3, pc}
   d4504:	0003022c 	.word	0x0003022c

000d4508 <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d4508:	b508      	push	{r3, lr}
   d450a:	4b02      	ldr	r3, [pc, #8]	; (d4514 <HAL_ADC_Read+0xc>)
   d450c:	681b      	ldr	r3, [r3, #0]
   d450e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4510:	9301      	str	r3, [sp, #4]
   d4512:	bd08      	pop	{r3, pc}
   d4514:	0003022c 	.word	0x0003022c

000d4518 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d4518:	b508      	push	{r3, lr}
   d451a:	4b02      	ldr	r3, [pc, #8]	; (d4524 <HAL_I2C_Begin+0xc>)
   d451c:	681b      	ldr	r3, [r3, #0]
   d451e:	68db      	ldr	r3, [r3, #12]
   d4520:	9301      	str	r3, [sp, #4]
   d4522:	bd08      	pop	{r3, pc}
   d4524:	00030228 	.word	0x00030228

000d4528 <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
   d4528:	b508      	push	{r3, lr}
   d452a:	4b02      	ldr	r3, [pc, #8]	; (d4534 <HAL_I2C_Request_Data+0xc>)
   d452c:	681b      	ldr	r3, [r3, #0]
   d452e:	695b      	ldr	r3, [r3, #20]
   d4530:	9301      	str	r3, [sp, #4]
   d4532:	bd08      	pop	{r3, pc}
   d4534:	00030228 	.word	0x00030228

000d4538 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
   d4538:	b508      	push	{r3, lr}
   d453a:	4b02      	ldr	r3, [pc, #8]	; (d4544 <HAL_I2C_Begin_Transmission+0xc>)
   d453c:	681b      	ldr	r3, [r3, #0]
   d453e:	699b      	ldr	r3, [r3, #24]
   d4540:	9301      	str	r3, [sp, #4]
   d4542:	bd08      	pop	{r3, pc}
   d4544:	00030228 	.word	0x00030228

000d4548 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d4548:	b508      	push	{r3, lr}
   d454a:	4b02      	ldr	r3, [pc, #8]	; (d4554 <HAL_I2C_End_Transmission+0xc>)
   d454c:	681b      	ldr	r3, [r3, #0]
   d454e:	69db      	ldr	r3, [r3, #28]
   d4550:	9301      	str	r3, [sp, #4]
   d4552:	bd08      	pop	{r3, pc}
   d4554:	00030228 	.word	0x00030228

000d4558 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d4558:	b508      	push	{r3, lr}
   d455a:	4b02      	ldr	r3, [pc, #8]	; (d4564 <HAL_I2C_Write_Data+0xc>)
   d455c:	681b      	ldr	r3, [r3, #0]
   d455e:	6a1b      	ldr	r3, [r3, #32]
   d4560:	9301      	str	r3, [sp, #4]
   d4562:	bd08      	pop	{r3, pc}
   d4564:	00030228 	.word	0x00030228

000d4568 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d4568:	b508      	push	{r3, lr}
   d456a:	4b02      	ldr	r3, [pc, #8]	; (d4574 <HAL_I2C_Available_Data+0xc>)
   d456c:	681b      	ldr	r3, [r3, #0]
   d456e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4570:	9301      	str	r3, [sp, #4]
   d4572:	bd08      	pop	{r3, pc}
   d4574:	00030228 	.word	0x00030228

000d4578 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d4578:	b508      	push	{r3, lr}
   d457a:	4b02      	ldr	r3, [pc, #8]	; (d4584 <HAL_I2C_Read_Data+0xc>)
   d457c:	681b      	ldr	r3, [r3, #0]
   d457e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4580:	9301      	str	r3, [sp, #4]
   d4582:	bd08      	pop	{r3, pc}
   d4584:	00030228 	.word	0x00030228

000d4588 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d4588:	b508      	push	{r3, lr}
   d458a:	4b02      	ldr	r3, [pc, #8]	; (d4594 <HAL_I2C_Peek_Data+0xc>)
   d458c:	681b      	ldr	r3, [r3, #0]
   d458e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4590:	9301      	str	r3, [sp, #4]
   d4592:	bd08      	pop	{r3, pc}
   d4594:	00030228 	.word	0x00030228

000d4598 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d4598:	b508      	push	{r3, lr}
   d459a:	4b02      	ldr	r3, [pc, #8]	; (d45a4 <HAL_I2C_Flush_Data+0xc>)
   d459c:	681b      	ldr	r3, [r3, #0]
   d459e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d45a0:	9301      	str	r3, [sp, #4]
   d45a2:	bd08      	pop	{r3, pc}
   d45a4:	00030228 	.word	0x00030228

000d45a8 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d45a8:	b508      	push	{r3, lr}
   d45aa:	4b02      	ldr	r3, [pc, #8]	; (d45b4 <HAL_I2C_Is_Enabled+0xc>)
   d45ac:	681b      	ldr	r3, [r3, #0]
   d45ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d45b0:	9301      	str	r3, [sp, #4]
   d45b2:	bd08      	pop	{r3, pc}
   d45b4:	00030228 	.word	0x00030228

000d45b8 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d45b8:	b508      	push	{r3, lr}
   d45ba:	4b02      	ldr	r3, [pc, #8]	; (d45c4 <HAL_I2C_Init+0xc>)
   d45bc:	681b      	ldr	r3, [r3, #0]
   d45be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d45c0:	9301      	str	r3, [sp, #4]
   d45c2:	bd08      	pop	{r3, pc}
   d45c4:	00030228 	.word	0x00030228

000d45c8 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d45c8:	b508      	push	{r3, lr}
   d45ca:	4b02      	ldr	r3, [pc, #8]	; (d45d4 <inet_inet_ntop+0xc>)
   d45cc:	681b      	ldr	r3, [r3, #0]
   d45ce:	695b      	ldr	r3, [r3, #20]
   d45d0:	9301      	str	r3, [sp, #4]
   d45d2:	bd08      	pop	{r3, pc}
   d45d4:	00030264 	.word	0x00030264

000d45d8 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d45d8:	b508      	push	{r3, lr}
   d45da:	4b02      	ldr	r3, [pc, #8]	; (d45e4 <netdb_freeaddrinfo+0xc>)
   d45dc:	681b      	ldr	r3, [r3, #0]
   d45de:	689b      	ldr	r3, [r3, #8]
   d45e0:	9301      	str	r3, [sp, #4]
   d45e2:	bd08      	pop	{r3, pc}
   d45e4:	00030268 	.word	0x00030268

000d45e8 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d45e8:	b508      	push	{r3, lr}
   d45ea:	4b02      	ldr	r3, [pc, #8]	; (d45f4 <netdb_getaddrinfo+0xc>)
   d45ec:	681b      	ldr	r3, [r3, #0]
   d45ee:	68db      	ldr	r3, [r3, #12]
   d45f0:	9301      	str	r3, [sp, #4]
   d45f2:	bd08      	pop	{r3, pc}
   d45f4:	00030268 	.word	0x00030268

000d45f8 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d45f8:	b508      	push	{r3, lr}
   d45fa:	4b02      	ldr	r3, [pc, #8]	; (d4604 <HAL_SPI_Init+0xc>)
   d45fc:	681b      	ldr	r3, [r3, #0]
   d45fe:	69db      	ldr	r3, [r3, #28]
   d4600:	9301      	str	r3, [sp, #4]
   d4602:	bd08      	pop	{r3, pc}
   d4604:	00030230 	.word	0x00030230

000d4608 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d4608:	b508      	push	{r3, lr}
   d460a:	4b02      	ldr	r3, [pc, #8]	; (d4614 <HAL_SPI_Is_Enabled+0xc>)
   d460c:	681b      	ldr	r3, [r3, #0]
   d460e:	6a1b      	ldr	r3, [r3, #32]
   d4610:	9301      	str	r3, [sp, #4]
   d4612:	bd08      	pop	{r3, pc}
   d4614:	00030230 	.word	0x00030230

000d4618 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4618:	b508      	push	{r3, lr}
   d461a:	4b02      	ldr	r3, [pc, #8]	; (d4624 <HAL_USART_Init+0xc>)
   d461c:	681b      	ldr	r3, [r3, #0]
   d461e:	681b      	ldr	r3, [r3, #0]
   d4620:	9301      	str	r3, [sp, #4]
   d4622:	bd08      	pop	{r3, pc}
   d4624:	0003023c 	.word	0x0003023c

000d4628 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4628:	b508      	push	{r3, lr}
   d462a:	4b02      	ldr	r3, [pc, #8]	; (d4634 <HAL_USART_Write_Data+0xc>)
   d462c:	681b      	ldr	r3, [r3, #0]
   d462e:	68db      	ldr	r3, [r3, #12]
   d4630:	9301      	str	r3, [sp, #4]
   d4632:	bd08      	pop	{r3, pc}
   d4634:	0003023c 	.word	0x0003023c

000d4638 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4638:	b508      	push	{r3, lr}
   d463a:	4b02      	ldr	r3, [pc, #8]	; (d4644 <HAL_USART_Available_Data+0xc>)
   d463c:	681b      	ldr	r3, [r3, #0]
   d463e:	691b      	ldr	r3, [r3, #16]
   d4640:	9301      	str	r3, [sp, #4]
   d4642:	bd08      	pop	{r3, pc}
   d4644:	0003023c 	.word	0x0003023c

000d4648 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4648:	b508      	push	{r3, lr}
   d464a:	4b02      	ldr	r3, [pc, #8]	; (d4654 <HAL_USART_Read_Data+0xc>)
   d464c:	681b      	ldr	r3, [r3, #0]
   d464e:	695b      	ldr	r3, [r3, #20]
   d4650:	9301      	str	r3, [sp, #4]
   d4652:	bd08      	pop	{r3, pc}
   d4654:	0003023c 	.word	0x0003023c

000d4658 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d4658:	b508      	push	{r3, lr}
   d465a:	4b02      	ldr	r3, [pc, #8]	; (d4664 <HAL_USART_Peek_Data+0xc>)
   d465c:	681b      	ldr	r3, [r3, #0]
   d465e:	699b      	ldr	r3, [r3, #24]
   d4660:	9301      	str	r3, [sp, #4]
   d4662:	bd08      	pop	{r3, pc}
   d4664:	0003023c 	.word	0x0003023c

000d4668 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d4668:	b508      	push	{r3, lr}
   d466a:	4b02      	ldr	r3, [pc, #8]	; (d4674 <HAL_USART_Flush_Data+0xc>)
   d466c:	681b      	ldr	r3, [r3, #0]
   d466e:	69db      	ldr	r3, [r3, #28]
   d4670:	9301      	str	r3, [sp, #4]
   d4672:	bd08      	pop	{r3, pc}
   d4674:	0003023c 	.word	0x0003023c

000d4678 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d4678:	b508      	push	{r3, lr}
   d467a:	4b02      	ldr	r3, [pc, #8]	; (d4684 <HAL_USART_Is_Enabled+0xc>)
   d467c:	681b      	ldr	r3, [r3, #0]
   d467e:	6a1b      	ldr	r3, [r3, #32]
   d4680:	9301      	str	r3, [sp, #4]
   d4682:	bd08      	pop	{r3, pc}
   d4684:	0003023c 	.word	0x0003023c

000d4688 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4688:	b508      	push	{r3, lr}
   d468a:	4b02      	ldr	r3, [pc, #8]	; (d4694 <HAL_USART_Available_Data_For_Write+0xc>)
   d468c:	681b      	ldr	r3, [r3, #0]
   d468e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4690:	9301      	str	r3, [sp, #4]
   d4692:	bd08      	pop	{r3, pc}
   d4694:	0003023c 	.word	0x0003023c

000d4698 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4698:	b508      	push	{r3, lr}
   d469a:	4b02      	ldr	r3, [pc, #8]	; (d46a4 <HAL_USB_USART_Init+0xc>)
   d469c:	681b      	ldr	r3, [r3, #0]
   d469e:	681b      	ldr	r3, [r3, #0]
   d46a0:	9301      	str	r3, [sp, #4]
   d46a2:	bd08      	pop	{r3, pc}
   d46a4:	0003024c 	.word	0x0003024c

000d46a8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d46a8:	b508      	push	{r3, lr}
   d46aa:	4b02      	ldr	r3, [pc, #8]	; (d46b4 <HAL_USB_USART_Available_Data+0xc>)
   d46ac:	681b      	ldr	r3, [r3, #0]
   d46ae:	691b      	ldr	r3, [r3, #16]
   d46b0:	9301      	str	r3, [sp, #4]
   d46b2:	bd08      	pop	{r3, pc}
   d46b4:	0003024c 	.word	0x0003024c

000d46b8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d46b8:	b508      	push	{r3, lr}
   d46ba:	4b02      	ldr	r3, [pc, #8]	; (d46c4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d46bc:	681b      	ldr	r3, [r3, #0]
   d46be:	695b      	ldr	r3, [r3, #20]
   d46c0:	9301      	str	r3, [sp, #4]
   d46c2:	bd08      	pop	{r3, pc}
   d46c4:	0003024c 	.word	0x0003024c

000d46c8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d46c8:	b508      	push	{r3, lr}
   d46ca:	4b02      	ldr	r3, [pc, #8]	; (d46d4 <HAL_USB_USART_Receive_Data+0xc>)
   d46cc:	681b      	ldr	r3, [r3, #0]
   d46ce:	699b      	ldr	r3, [r3, #24]
   d46d0:	9301      	str	r3, [sp, #4]
   d46d2:	bd08      	pop	{r3, pc}
   d46d4:	0003024c 	.word	0x0003024c

000d46d8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d46d8:	b508      	push	{r3, lr}
   d46da:	4b02      	ldr	r3, [pc, #8]	; (d46e4 <HAL_USB_USART_Send_Data+0xc>)
   d46dc:	681b      	ldr	r3, [r3, #0]
   d46de:	69db      	ldr	r3, [r3, #28]
   d46e0:	9301      	str	r3, [sp, #4]
   d46e2:	bd08      	pop	{r3, pc}
   d46e4:	0003024c 	.word	0x0003024c

000d46e8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d46e8:	b508      	push	{r3, lr}
   d46ea:	4b02      	ldr	r3, [pc, #8]	; (d46f4 <HAL_USB_USART_Flush_Data+0xc>)
   d46ec:	681b      	ldr	r3, [r3, #0]
   d46ee:	6a1b      	ldr	r3, [r3, #32]
   d46f0:	9301      	str	r3, [sp, #4]
   d46f2:	bd08      	pop	{r3, pc}
   d46f4:	0003024c 	.word	0x0003024c

000d46f8 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d46f8:	b508      	push	{r3, lr}
   d46fa:	4b02      	ldr	r3, [pc, #8]	; (d4704 <panic_+0xc>)
   d46fc:	681b      	ldr	r3, [r3, #0]
   d46fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4700:	9301      	str	r3, [sp, #4]
   d4702:	bd08      	pop	{r3, pc}
   d4704:	00030260 	.word	0x00030260

000d4708 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4708:	b508      	push	{r3, lr}
   d470a:	4b02      	ldr	r3, [pc, #8]	; (d4714 <set_system_mode+0xc>)
   d470c:	681b      	ldr	r3, [r3, #0]
   d470e:	685b      	ldr	r3, [r3, #4]
   d4710:	9301      	str	r3, [sp, #4]
   d4712:	bd08      	pop	{r3, pc}
   d4714:	00030220 	.word	0x00030220

000d4718 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4718:	b508      	push	{r3, lr}
   d471a:	4b02      	ldr	r3, [pc, #8]	; (d4724 <system_delay_ms+0xc>)
   d471c:	681b      	ldr	r3, [r3, #0]
   d471e:	695b      	ldr	r3, [r3, #20]
   d4720:	9301      	str	r3, [sp, #4]
   d4722:	bd08      	pop	{r3, pc}
   d4724:	00030220 	.word	0x00030220

000d4728 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d4728:	b508      	push	{r3, lr}
   d472a:	4b02      	ldr	r3, [pc, #8]	; (d4734 <application_thread_current+0xc>)
   d472c:	681b      	ldr	r3, [r3, #0]
   d472e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4730:	9301      	str	r3, [sp, #4]
   d4732:	bd08      	pop	{r3, pc}
   d4734:	00030220 	.word	0x00030220

000d4738 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d4738:	b508      	push	{r3, lr}
   d473a:	4b02      	ldr	r3, [pc, #8]	; (d4744 <application_thread_invoke+0xc>)
   d473c:	681b      	ldr	r3, [r3, #0]
   d473e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4740:	9301      	str	r3, [sp, #4]
   d4742:	bd08      	pop	{r3, pc}
   d4744:	00030220 	.word	0x00030220

000d4748 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4748:	b508      	push	{r3, lr}
   d474a:	4b03      	ldr	r3, [pc, #12]	; (d4758 <system_ctrl_set_app_request_handler+0x10>)
   d474c:	681b      	ldr	r3, [r3, #0]
   d474e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4752:	9301      	str	r3, [sp, #4]
   d4754:	bd08      	pop	{r3, pc}
   d4756:	0000      	.short	0x0000
   d4758:	00030220 	.word	0x00030220

000d475c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d475c:	b508      	push	{r3, lr}
   d475e:	4b03      	ldr	r3, [pc, #12]	; (d476c <system_ctrl_set_result+0x10>)
   d4760:	681b      	ldr	r3, [r3, #0]
   d4762:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4766:	9301      	str	r3, [sp, #4]
   d4768:	bd08      	pop	{r3, pc}
   d476a:	0000      	.short	0x0000
   d476c:	00030220 	.word	0x00030220

000d4770 <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d4770:	b508      	push	{r3, lr}
   d4772:	4b02      	ldr	r3, [pc, #8]	; (d477c <spark_cloud_flag_connected+0xc>)
   d4774:	681b      	ldr	r3, [r3, #0]
   d4776:	695b      	ldr	r3, [r3, #20]
   d4778:	9301      	str	r3, [sp, #4]
   d477a:	bd08      	pop	{r3, pc}
   d477c:	00030244 	.word	0x00030244

000d4780 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d4780:	b508      	push	{r3, lr}
   d4782:	4b02      	ldr	r3, [pc, #8]	; (d478c <spark_send_event+0xc>)
   d4784:	681b      	ldr	r3, [r3, #0]
   d4786:	6a1b      	ldr	r3, [r3, #32]
   d4788:	9301      	str	r3, [sp, #4]
   d478a:	bd08      	pop	{r3, pc}
   d478c:	00030244 	.word	0x00030244

000d4790 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4790:	b508      	push	{r3, lr}
   d4792:	4b02      	ldr	r3, [pc, #8]	; (d479c <spark_set_random_seed_from_cloud_handler+0xc>)
   d4794:	681b      	ldr	r3, [r3, #0]
   d4796:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4798:	9301      	str	r3, [sp, #4]
   d479a:	bd08      	pop	{r3, pc}
   d479c:	00030244 	.word	0x00030244

000d47a0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d47a0:	b508      	push	{r3, lr}
   d47a2:	4b02      	ldr	r3, [pc, #8]	; (d47ac <network_connect+0xc>)
   d47a4:	681b      	ldr	r3, [r3, #0]
   d47a6:	685b      	ldr	r3, [r3, #4]
   d47a8:	9301      	str	r3, [sp, #4]
   d47aa:	bd08      	pop	{r3, pc}
   d47ac:	00030240 	.word	0x00030240

000d47b0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d47b0:	b508      	push	{r3, lr}
   d47b2:	4b02      	ldr	r3, [pc, #8]	; (d47bc <network_connecting+0xc>)
   d47b4:	681b      	ldr	r3, [r3, #0]
   d47b6:	689b      	ldr	r3, [r3, #8]
   d47b8:	9301      	str	r3, [sp, #4]
   d47ba:	bd08      	pop	{r3, pc}
   d47bc:	00030240 	.word	0x00030240

000d47c0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d47c0:	b508      	push	{r3, lr}
   d47c2:	4b02      	ldr	r3, [pc, #8]	; (d47cc <network_disconnect+0xc>)
   d47c4:	681b      	ldr	r3, [r3, #0]
   d47c6:	68db      	ldr	r3, [r3, #12]
   d47c8:	9301      	str	r3, [sp, #4]
   d47ca:	bd08      	pop	{r3, pc}
   d47cc:	00030240 	.word	0x00030240

000d47d0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d47d0:	b508      	push	{r3, lr}
   d47d2:	4b02      	ldr	r3, [pc, #8]	; (d47dc <network_ready+0xc>)
   d47d4:	681b      	ldr	r3, [r3, #0]
   d47d6:	691b      	ldr	r3, [r3, #16]
   d47d8:	9301      	str	r3, [sp, #4]
   d47da:	bd08      	pop	{r3, pc}
   d47dc:	00030240 	.word	0x00030240

000d47e0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d47e0:	b508      	push	{r3, lr}
   d47e2:	4b02      	ldr	r3, [pc, #8]	; (d47ec <network_on+0xc>)
   d47e4:	681b      	ldr	r3, [r3, #0]
   d47e6:	695b      	ldr	r3, [r3, #20]
   d47e8:	9301      	str	r3, [sp, #4]
   d47ea:	bd08      	pop	{r3, pc}
   d47ec:	00030240 	.word	0x00030240

000d47f0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d47f0:	b508      	push	{r3, lr}
   d47f2:	4b02      	ldr	r3, [pc, #8]	; (d47fc <network_off+0xc>)
   d47f4:	681b      	ldr	r3, [r3, #0]
   d47f6:	699b      	ldr	r3, [r3, #24]
   d47f8:	9301      	str	r3, [sp, #4]
   d47fa:	bd08      	pop	{r3, pc}
   d47fc:	00030240 	.word	0x00030240

000d4800 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4800:	b508      	push	{r3, lr}
   d4802:	4b02      	ldr	r3, [pc, #8]	; (d480c <network_listen+0xc>)
   d4804:	681b      	ldr	r3, [r3, #0]
   d4806:	69db      	ldr	r3, [r3, #28]
   d4808:	9301      	str	r3, [sp, #4]
   d480a:	bd08      	pop	{r3, pc}
   d480c:	00030240 	.word	0x00030240

000d4810 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4810:	b508      	push	{r3, lr}
   d4812:	4b02      	ldr	r3, [pc, #8]	; (d481c <network_listening+0xc>)
   d4814:	681b      	ldr	r3, [r3, #0]
   d4816:	6a1b      	ldr	r3, [r3, #32]
   d4818:	9301      	str	r3, [sp, #4]
   d481a:	bd08      	pop	{r3, pc}
   d481c:	00030240 	.word	0x00030240

000d4820 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4820:	b508      	push	{r3, lr}
   d4822:	4b02      	ldr	r3, [pc, #8]	; (d482c <network_set_listen_timeout+0xc>)
   d4824:	681b      	ldr	r3, [r3, #0]
   d4826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4828:	9301      	str	r3, [sp, #4]
   d482a:	bd08      	pop	{r3, pc}
   d482c:	00030240 	.word	0x00030240

000d4830 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4830:	b508      	push	{r3, lr}
   d4832:	4b02      	ldr	r3, [pc, #8]	; (d483c <network_get_listen_timeout+0xc>)
   d4834:	681b      	ldr	r3, [r3, #0]
   d4836:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4838:	9301      	str	r3, [sp, #4]
   d483a:	bd08      	pop	{r3, pc}
   d483c:	00030240 	.word	0x00030240

000d4840 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4840:	b508      	push	{r3, lr}
   d4842:	4b02      	ldr	r3, [pc, #8]	; (d484c <malloc+0xc>)
   d4844:	681b      	ldr	r3, [r3, #0]
   d4846:	681b      	ldr	r3, [r3, #0]
   d4848:	9301      	str	r3, [sp, #4]
   d484a:	bd08      	pop	{r3, pc}
   d484c:	0003021c 	.word	0x0003021c

000d4850 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4850:	b508      	push	{r3, lr}
   d4852:	4b02      	ldr	r3, [pc, #8]	; (d485c <free+0xc>)
   d4854:	681b      	ldr	r3, [r3, #0]
   d4856:	685b      	ldr	r3, [r3, #4]
   d4858:	9301      	str	r3, [sp, #4]
   d485a:	bd08      	pop	{r3, pc}
   d485c:	0003021c 	.word	0x0003021c

000d4860 <sprintf>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   d4860:	b508      	push	{r3, lr}
   d4862:	4b02      	ldr	r3, [pc, #8]	; (d486c <sprintf+0xc>)
   d4864:	681b      	ldr	r3, [r3, #0]
   d4866:	68db      	ldr	r3, [r3, #12]
   d4868:	9301      	str	r3, [sp, #4]
   d486a:	bd08      	pop	{r3, pc}
   d486c:	0003021c 	.word	0x0003021c

000d4870 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d4870:	b508      	push	{r3, lr}
   d4872:	4b02      	ldr	r3, [pc, #8]	; (d487c <abort+0xc>)
   d4874:	681b      	ldr	r3, [r3, #0]
   d4876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4878:	9301      	str	r3, [sp, #4]
   d487a:	bd08      	pop	{r3, pc}
   d487c:	0003021c 	.word	0x0003021c

000d4880 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d4880:	b508      	push	{r3, lr}
   d4882:	4b02      	ldr	r3, [pc, #8]	; (d488c <_malloc_r+0xc>)
   d4884:	681b      	ldr	r3, [r3, #0]
   d4886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4888:	9301      	str	r3, [sp, #4]
   d488a:	bd08      	pop	{r3, pc}
   d488c:	0003021c 	.word	0x0003021c

000d4890 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d4890:	2100      	movs	r1, #0
   d4892:	f7ff bf41 	b.w	d4718 <system_delay_ms>

000d4896 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d4896:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4898:	6883      	ldr	r3, [r0, #8]
   d489a:	4604      	mov	r4, r0
   d489c:	b90b      	cbnz	r3, d48a2 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d489e:	f001 f872 	bl	d5986 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d48a2:	68c3      	ldr	r3, [r0, #12]
   d48a4:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d48a6:	68a3      	ldr	r3, [r4, #8]
   d48a8:	b11b      	cbz	r3, d48b2 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d48aa:	2203      	movs	r2, #3
   d48ac:	4621      	mov	r1, r4
   d48ae:	4620      	mov	r0, r4
   d48b0:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d48b2:	4620      	mov	r0, r4
   d48b4:	2110      	movs	r1, #16
}
   d48b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d48ba:	f001 b862 	b.w	d5982 <_ZdlPvj>

000d48be <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.110>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d48be:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d48c0:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d48c2:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d48c4:	689b      	ldr	r3, [r3, #8]
   d48c6:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d48c8:	68a3      	ldr	r3, [r4, #8]
   d48ca:	3b01      	subs	r3, #1
   d48cc:	60a3      	str	r3, [r4, #8]
   d48ce:	b92b      	cbnz	r3, d48dc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.110+0x1e>
            _M_destroy();
   d48d0:	6823      	ldr	r3, [r4, #0]
   d48d2:	4620      	mov	r0, r4
   d48d4:	68db      	ldr	r3, [r3, #12]
        }
    }
   d48d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d48da:	4718      	bx	r3
   d48dc:	bd10      	pop	{r4, pc}

000d48de <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d48de:	680b      	ldr	r3, [r1, #0]
   d48e0:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d48e2:	b113      	cbz	r3, d48ea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d48e4:	685a      	ldr	r2, [r3, #4]
   d48e6:	3201      	adds	r2, #1
   d48e8:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d48ea:	4770      	bx	lr

000d48ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d48ec:	b510      	push	{r4, lr}
   d48ee:	4604      	mov	r4, r0
      {
	if (_M_pi != nullptr)
   d48f0:	6800      	ldr	r0, [r0, #0]
   d48f2:	b128      	cbz	r0, d4900 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d48f4:	6843      	ldr	r3, [r0, #4]
   d48f6:	3b01      	subs	r3, #1
   d48f8:	6043      	str	r3, [r0, #4]
   d48fa:	b90b      	cbnz	r3, d4900 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d48fc:	f7ff ffdf 	bl	d48be <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.110>

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d4900:	4620      	mov	r0, r4
   d4902:	bd10      	pop	{r4, pc}

000d4904 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4904:	4802      	ldr	r0, [pc, #8]	; (d4910 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d4906:	2300      	movs	r3, #0
   d4908:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d490a:	f7ff bdcd 	b.w	d44a8 <os_mutex_recursive_create>
   d490e:	bf00      	nop
   d4910:	2003e3c8 	.word	0x2003e3c8

000d4914 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4914:	4770      	bx	lr

000d4916 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d4916:	2000      	movs	r0, #0
   d4918:	4770      	bx	lr

000d491a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d491a:	b510      	push	{r4, lr}
   d491c:	2110      	movs	r1, #16
   d491e:	4604      	mov	r4, r0
   d4920:	f001 f82f 	bl	d5982 <_ZdlPvj>
   d4924:	4620      	mov	r0, r4
   d4926:	bd10      	pop	{r4, pc}

000d4928 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d4928:	b508      	push	{r3, lr}
      { delete this; }
   d492a:	b108      	cbz	r0, d4930 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d492c:	f7ff fff5 	bl	d491a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d4930:	bd08      	pop	{r3, pc}

000d4932 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4932:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4934:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4936:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d4938:	b113      	cbz	r3, d4940 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d493a:	2203      	movs	r2, #3
   d493c:	4601      	mov	r1, r0
   d493e:	4798      	blx	r3
    }
   d4940:	4620      	mov	r0, r4
   d4942:	bd10      	pop	{r4, pc}

000d4944 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d4944:	2200      	movs	r2, #0
   d4946:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d4948:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d494a:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d494e:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4950:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d4954:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d4956:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4958:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d495a:	680c      	ldr	r4, [r1, #0]
   d495c:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d495e:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d4960:	bd10      	pop	{r4, pc}

000d4962 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d4962:	b510      	push	{r4, lr}
   d4964:	4604      	mov	r4, r0
    free((void*)msg_);
   d4966:	6800      	ldr	r0, [r0, #0]
   d4968:	f7ff ff72 	bl	d4850 <free>
}
   d496c:	4620      	mov	r0, r4
   d496e:	bd10      	pop	{r4, pc}

000d4970 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d4970:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d4972:	68c4      	ldr	r4, [r0, #12]
   d4974:	b1f4      	cbz	r4, d49b4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d4976:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d4978:	2b02      	cmp	r3, #2
   d497a:	d103      	bne.n	d4984 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d497c:	f104 000c 	add.w	r0, r4, #12
   d4980:	f7ff ffef 	bl	d4962 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d4984:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d4986:	b135      	cbz	r5, d4996 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4988:	4628      	mov	r0, r5
   d498a:	f7ff ffd2 	bl	d4932 <_ZNSt14_Function_baseD1Ev>
   d498e:	2110      	movs	r1, #16
   d4990:	4628      	mov	r0, r5
   d4992:	f000 fff6 	bl	d5982 <_ZdlPvj>
   d4996:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d4998:	b135      	cbz	r5, d49a8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d499a:	4628      	mov	r0, r5
   d499c:	f7ff ffc9 	bl	d4932 <_ZNSt14_Function_baseD1Ev>
   d49a0:	2110      	movs	r1, #16
   d49a2:	4628      	mov	r0, r5
   d49a4:	f000 ffed 	bl	d5982 <_ZdlPvj>
   d49a8:	4620      	mov	r0, r4
   d49aa:	2114      	movs	r1, #20
   d49ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d49b0:	f000 bfe7 	b.w	d5982 <_ZdlPvj>
   d49b4:	bd38      	pop	{r3, r4, r5, pc}

000d49b6 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d49b6:	b513      	push	{r0, r1, r4, lr}
   d49b8:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d49ba:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d49be:	2300      	movs	r3, #0
   d49c0:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d49c2:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d49c4:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d49c6:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d49c8:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d49ca:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d49cc:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d49ce:	f7ff ff8d 	bl	d48ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d49d2:	4620      	mov	r0, r4
   d49d4:	b002      	add	sp, #8
   d49d6:	bd10      	pop	{r4, pc}

000d49d8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d49d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d49da:	460c      	mov	r4, r1
   d49dc:	ad02      	add	r5, sp, #8
   d49de:	f854 3b04 	ldr.w	r3, [r4], #4
   d49e2:	f845 3d08 	str.w	r3, [r5, #-8]!
   d49e6:	4606      	mov	r6, r0
   d49e8:	460f      	mov	r7, r1
   d49ea:	a801      	add	r0, sp, #4
   d49ec:	4621      	mov	r1, r4
   d49ee:	f7ff ff76 	bl	d48de <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d49f2:	4629      	mov	r1, r5
   d49f4:	4630      	mov	r0, r6
   d49f6:	f7ff ffde 	bl	d49b6 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d49fa:	a801      	add	r0, sp, #4
   d49fc:	f7ff ff76 	bl	d48ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4a00:	4620      	mov	r0, r4
   d4a02:	f7ff ff73 	bl	d48ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d4a06:	4638      	mov	r0, r7
   d4a08:	2108      	movs	r1, #8
   d4a0a:	f000 ffba 	bl	d5982 <_ZdlPvj>
        return p;
    }
   d4a0e:	4630      	mov	r0, r6
   d4a10:	b003      	add	sp, #12
   d4a12:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4a14 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d4a14:	b513      	push	{r0, r1, r4, lr}
   d4a16:	460b      	mov	r3, r1
   d4a18:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4a1a:	c803      	ldmia	r0, {r0, r1}
   d4a1c:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d4a20:	e893 0003 	ldmia.w	r3, {r0, r1}
   d4a24:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d4a28:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d4a2c:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d4a30:	b002      	add	sp, #8
   d4a32:	bd10      	pop	{r4, pc}

000d4a34 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d4a34:	b538      	push	{r3, r4, r5, lr}
   d4a36:	2300      	movs	r3, #0
   d4a38:	4604      	mov	r4, r0
   d4a3a:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4a3c:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d4a3e:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4a40:	f7ff fb2b 	bl	d409a <_Znwj>
   d4a44:	b128      	cbz	r0, d4a52 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d4a46:	2301      	movs	r3, #1
   d4a48:	6043      	str	r3, [r0, #4]
   d4a4a:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d4a4c:	4b02      	ldr	r3, [pc, #8]	; (d4a58 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d4a4e:	6003      	str	r3, [r0, #0]
   d4a50:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4a52:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d4a54:	4620      	mov	r0, r4
   d4a56:	bd38      	pop	{r3, r4, r5, pc}
   d4a58:	000d65d0 	.word	0x000d65d0

000d4a5c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4a5c:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d4a5e:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4a60:	b90a      	cbnz	r2, d4a66 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d4a62:	f000 ff90 	bl	d5986 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4a66:	68c3      	ldr	r3, [r0, #12]
    }
   d4a68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4a6c:	4718      	bx	r3

000d4a6e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d4a6e:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4a70:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d4a72:	f100 0110 	add.w	r1, r0, #16
   d4a76:	f7ff fff1 	bl	d4a5c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d4a7a:	bd08      	pop	{r3, pc}

000d4a7c <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4a7c:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d4a7e:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4a80:	b90a      	cbnz	r2, d4a86 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d4a82:	f000 ff80 	bl	d5986 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4a86:	68c3      	ldr	r3, [r0, #12]
    }
   d4a88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4a8c:	4718      	bx	r3

000d4a8e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d4a8e:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4a90:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d4a92:	f100 0110 	add.w	r1, r0, #16
   d4a96:	f7ff fff1 	bl	d4a7c <_ZNKSt8functionIFvRKbEEclES1_>
   d4a9a:	bd08      	pop	{r3, pc}

000d4a9c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d4a9c:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4a9e:	2300      	movs	r3, #0
   d4aa0:	6083      	str	r3, [r0, #8]
   d4aa2:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d4aa4:	4604      	mov	r4, r0
   d4aa6:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d4aa8:	b12b      	cbz	r3, d4ab6 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d4aaa:	2202      	movs	r2, #2
   d4aac:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d4aae:	68eb      	ldr	r3, [r5, #12]
   d4ab0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d4ab2:	68ab      	ldr	r3, [r5, #8]
   d4ab4:	60a3      	str	r3, [r4, #8]
	}
    }
   d4ab6:	4620      	mov	r0, r4
   d4ab8:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4abc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d4abc:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4abe:	b089      	sub	sp, #36	; 0x24
   d4ac0:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d4ac2:	4668      	mov	r0, sp
   d4ac4:	f7ff ff3e 	bl	d4944 <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d4ac8:	2300      	movs	r3, #0
   d4aca:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d4ace:	f04f 0202 	mov.w	r2, #2
   d4ad2:	e8d4 3f4f 	ldrexb	r3, [r4]
   d4ad6:	2b00      	cmp	r3, #0
   d4ad8:	d103      	bne.n	d4ae2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d4ada:	e8c4 2f41 	strexb	r1, r2, [r4]
   d4ade:	2900      	cmp	r1, #0
   d4ae0:	d1f7      	bne.n	d4ad2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d4ae2:	d002      	beq.n	d4aea <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d4ae4:	f88d 3008 	strb.w	r3, [sp, #8]
   d4ae8:	e063      	b.n	d4bb2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d4aea:	f114 050c 	adds.w	r5, r4, #12
   d4aee:	d003      	beq.n	d4af8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d4af0:	4669      	mov	r1, sp
   d4af2:	4628      	mov	r0, r5
   d4af4:	f7ff ff26 	bl	d4944 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d4af8:	f3bf 8f5f 	dmb	sy
   d4afc:	2301      	movs	r3, #1
   d4afe:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d4b00:	2000      	movs	r0, #0
   d4b02:	f104 0308 	add.w	r3, r4, #8
   d4b06:	f3bf 8f5f 	dmb	sy
   d4b0a:	e853 6f00 	ldrex	r6, [r3]
   d4b0e:	e843 0200 	strex	r2, r0, [r3]
   d4b12:	2a00      	cmp	r2, #0
   d4b14:	d1f9      	bne.n	d4b0a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d4b16:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d4b1a:	2e00      	cmp	r6, #0
   d4b1c:	d049      	beq.n	d4bb2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d4b1e:	f7ff fe03 	bl	d4728 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d4b22:	b120      	cbz	r0, d4b2e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d4b24:	4629      	mov	r1, r5
   d4b26:	4630      	mov	r0, r6
   d4b28:	f7ff ff98 	bl	d4a5c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d4b2c:	e03a      	b.n	d4ba4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d4b2e:	4631      	mov	r1, r6
   d4b30:	a802      	add	r0, sp, #8
   d4b32:	f7ff ffb3 	bl	d4a9c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d4b36:	68e0      	ldr	r0, [r4, #12]
   d4b38:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d4b3c:	b108      	cbz	r0, d4b42 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d4b3e:	f001 fcd9 	bl	d64f4 <strdup>
   d4b42:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d4b44:	2010      	movs	r0, #16
   d4b46:	f8ad 501c 	strh.w	r5, [sp, #28]
   d4b4a:	f7ff faa6 	bl	d409a <_Znwj>
   d4b4e:	4605      	mov	r5, r0
   d4b50:	b1e8      	cbz	r0, d4b8e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4b52:	2700      	movs	r7, #0
   d4b54:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4b56:	2018      	movs	r0, #24
   d4b58:	f7ff fa9f 	bl	d409a <_Znwj>
   d4b5c:	4604      	mov	r4, r0
   d4b5e:	b188      	cbz	r0, d4b84 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d4b60:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4b62:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d4b64:	a802      	add	r0, sp, #8
   d4b66:	f7ff ff55 	bl	d4a14 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4b6a:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d4b6c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d4b6e:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4b70:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d4b72:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d4b74:	a906      	add	r1, sp, #24
   d4b76:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d4b78:	60e3      	str	r3, [r4, #12]
   d4b7a:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4b7e:	9205      	str	r2, [sp, #20]
   d4b80:	f7ff fee0 	bl	d4944 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d4b84:	4b0d      	ldr	r3, [pc, #52]	; (d4bbc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d4b86:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d4b88:	4b0d      	ldr	r3, [pc, #52]	; (d4bc0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4b8a:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d4b8c:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d4b8e:	a806      	add	r0, sp, #24
   d4b90:	f7ff fee7 	bl	d4962 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4b94:	a802      	add	r0, sp, #8
   d4b96:	f7ff fecc 	bl	d4932 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d4b9a:	2200      	movs	r2, #0
   d4b9c:	4629      	mov	r1, r5
   d4b9e:	4809      	ldr	r0, [pc, #36]	; (d4bc4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d4ba0:	f7ff fdca 	bl	d4738 <application_thread_invoke>
   d4ba4:	4630      	mov	r0, r6
   d4ba6:	f7ff fec4 	bl	d4932 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d4baa:	2110      	movs	r1, #16
   d4bac:	4630      	mov	r0, r6
   d4bae:	f000 fee8 	bl	d5982 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d4bb2:	4668      	mov	r0, sp
   d4bb4:	f7ff fed5 	bl	d4962 <_ZN8particle5ErrorD1Ev>
    }
   d4bb8:	b009      	add	sp, #36	; 0x24
   d4bba:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4bbc:	000d4a6f 	.word	0x000d4a6f
   d4bc0:	000d4ce5 	.word	0x000d4ce5
   d4bc4:	000d4897 	.word	0x000d4897

000d4bc8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d4bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4bcc:	b08b      	sub	sp, #44	; 0x2c
   d4bce:	4606      	mov	r6, r0
   d4bd0:	460f      	mov	r7, r1
   d4bd2:	4690      	mov	r8, r2
   d4bd4:	4699      	mov	r9, r3
   d4bd6:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4bda:	f7ff fdc9 	bl	d4770 <spark_cloud_flag_connected>
   d4bde:	ad07      	add	r5, sp, #28
#ifndef SPARK_NO_CLOUD
    if (!connected()) {
   d4be0:	4683      	mov	fp, r0
   d4be2:	bb30      	cbnz	r0, d4c32 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d4be4:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d4be8:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d4bea:	a905      	add	r1, sp, #20
   d4bec:	4628      	mov	r0, r5
   d4bee:	f8ad 3018 	strh.w	r3, [sp, #24]
   d4bf2:	f7ff fea7 	bl	d4944 <_ZN8particle5ErrorC1EOS0_>
   d4bf6:	2014      	movs	r0, #20
   d4bf8:	f7ff fa4f 	bl	d409a <_Znwj>
   d4bfc:	4604      	mov	r4, r0
   d4bfe:	b158      	cbz	r0, d4c18 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d4c00:	2302      	movs	r3, #2
   d4c02:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d4c04:	2301      	movs	r3, #1
   d4c06:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d4c08:	f8c0 b004 	str.w	fp, [r0, #4]
   d4c0c:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d4c10:	4629      	mov	r1, r5
   d4c12:	300c      	adds	r0, #12
   d4c14:	f7ff fe96 	bl	d4944 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d4c18:	4630      	mov	r0, r6
   d4c1a:	4621      	mov	r1, r4
   d4c1c:	f840 4b04 	str.w	r4, [r0], #4
   d4c20:	f7ff ff08 	bl	d4a34 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d4c24:	4628      	mov	r0, r5
   d4c26:	f7ff fe9c 	bl	d4962 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d4c2a:	a805      	add	r0, sp, #20
   d4c2c:	f7ff fe99 	bl	d4962 <_ZN8particle5ErrorD1Ev>
   d4c30:	e052      	b.n	d4cd8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d4c32:	2400      	movs	r4, #0
   d4c34:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d4c36:	2014      	movs	r0, #20
   d4c38:	606c      	str	r4, [r5, #4]
   d4c3a:	60ac      	str	r4, [r5, #8]
   d4c3c:	9307      	str	r3, [sp, #28]
   d4c3e:	f7ff fa2c 	bl	d409a <_Znwj>
   d4c42:	4601      	mov	r1, r0
   d4c44:	b118      	cbz	r0, d4c4e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d4c46:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d4c48:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d4c4a:	6044      	str	r4, [r0, #4]
   d4c4c:	6084      	str	r4, [r0, #8]
   d4c4e:	a804      	add	r0, sp, #16
   d4c50:	9103      	str	r1, [sp, #12]
   d4c52:	f7ff feef 	bl	d4a34 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d4c56:	4b22      	ldr	r3, [pc, #136]	; (d4ce0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d4c58:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d4c5a:	2008      	movs	r0, #8
   d4c5c:	f7ff fa1d 	bl	d409a <_Znwj>
   d4c60:	4604      	mov	r4, r0
   d4c62:	b128      	cbz	r0, d4c70 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4c64:	9b03      	ldr	r3, [sp, #12]
   d4c66:	f840 3b04 	str.w	r3, [r0], #4
   d4c6a:	a904      	add	r1, sp, #16
   d4c6c:	f7ff fe37 	bl	d48de <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d4c70:	9500      	str	r5, [sp, #0]
   d4c72:	fa5f f38a 	uxtb.w	r3, sl
   d4c76:	464a      	mov	r2, r9
   d4c78:	4641      	mov	r1, r8
   d4c7a:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d4c7c:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d4c7e:	f7ff fd7f 	bl	d4780 <spark_send_event>
   d4c82:	b920      	cbnz	r0, d4c8e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d4c84:	9b03      	ldr	r3, [sp, #12]
   d4c86:	785b      	ldrb	r3, [r3, #1]
   d4c88:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d4c8c:	b183      	cbz	r3, d4cb0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d4c8e:	9b03      	ldr	r3, [sp, #12]
   d4c90:	9305      	str	r3, [sp, #20]
   d4c92:	a904      	add	r1, sp, #16
   d4c94:	a806      	add	r0, sp, #24
   d4c96:	f7ff fe22 	bl	d48de <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d4c9a:	a905      	add	r1, sp, #20
   d4c9c:	4630      	mov	r0, r6
   d4c9e:	f7ff fe8a 	bl	d49b6 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4ca2:	a806      	add	r0, sp, #24
   d4ca4:	f7ff fe22 	bl	d48ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4ca8:	a804      	add	r0, sp, #16
   d4caa:	f7ff fe1f 	bl	d48ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4cae:	e013      	b.n	d4cd8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d4cb0:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d4cb4:	a905      	add	r1, sp, #20
   d4cb6:	a803      	add	r0, sp, #12
   d4cb8:	9205      	str	r2, [sp, #20]
   d4cba:	f8ad 3018 	strh.w	r3, [sp, #24]
   d4cbe:	f7ff fefd 	bl	d4abc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d4cc2:	a805      	add	r0, sp, #20
   d4cc4:	f7ff fe4d 	bl	d4962 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d4cc8:	a805      	add	r0, sp, #20
   d4cca:	9909      	ldr	r1, [sp, #36]	; 0x24
   d4ccc:	f7ff fe84 	bl	d49d8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d4cd0:	a806      	add	r0, sp, #24
   d4cd2:	f7ff fe0b 	bl	d48ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4cd6:	e7da      	b.n	d4c8e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
   d4cd8:	4630      	mov	r0, r6
   d4cda:	b00b      	add	sp, #44	; 0x2c
   d4cdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4ce0:	000d4e55 	.word	0x000d4e55

000d4ce4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d4ce4:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d4ce6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4ce8:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d4cea:	d006      	beq.n	d4cfa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d4cec:	2a03      	cmp	r2, #3
   d4cee:	d017      	beq.n	d4d20 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d4cf0:	2a01      	cmp	r2, #1
   d4cf2:	d122      	bne.n	d4d3a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4cf4:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d4cf6:	6003      	str	r3, [r0, #0]
	      break;
   d4cf8:	e01f      	b.n	d4d3a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d4cfa:	2018      	movs	r0, #24
   d4cfc:	680e      	ldr	r6, [r1, #0]
   d4cfe:	f7ff f9cc 	bl	d409a <_Znwj>
   d4d02:	4605      	mov	r5, r0
   d4d04:	b150      	cbz	r0, d4d1c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d4d06:	4631      	mov	r1, r6
   d4d08:	f7ff fec8 	bl	d4a9c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d4d0c:	6930      	ldr	r0, [r6, #16]
   d4d0e:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d4d12:	b108      	cbz	r0, d4d18 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d4d14:	f001 fbee 	bl	d64f4 <strdup>
   d4d18:	6128      	str	r0, [r5, #16]
   d4d1a:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d4d1c:	6025      	str	r5, [r4, #0]
   d4d1e:	e00c      	b.n	d4d3a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d4d20:	6804      	ldr	r4, [r0, #0]
   d4d22:	b154      	cbz	r4, d4d3a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d4d24:	f104 0010 	add.w	r0, r4, #16
   d4d28:	f7ff fe1b 	bl	d4962 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4d2c:	4620      	mov	r0, r4
   d4d2e:	f7ff fe00 	bl	d4932 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d4d32:	2118      	movs	r1, #24
   d4d34:	4620      	mov	r0, r4
   d4d36:	f000 fe24 	bl	d5982 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d4d3a:	2000      	movs	r0, #0
   d4d3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4d3e <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d4d3e:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4d40:	2300      	movs	r3, #0
   d4d42:	6083      	str	r3, [r0, #8]
   d4d44:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d4d46:	4604      	mov	r4, r0
   d4d48:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d4d4a:	b12b      	cbz	r3, d4d58 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d4d4c:	2202      	movs	r2, #2
   d4d4e:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d4d50:	68eb      	ldr	r3, [r5, #12]
   d4d52:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d4d54:	68ab      	ldr	r3, [r5, #8]
   d4d56:	60a3      	str	r3, [r4, #8]
	}
    }
   d4d58:	4620      	mov	r0, r4
   d4d5a:	bd38      	pop	{r3, r4, r5, pc}

000d4d5c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d4d5c:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d4d5e:	b570      	push	{r4, r5, r6, lr}
   d4d60:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d4d62:	d006      	beq.n	d4d72 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d4d64:	2a03      	cmp	r2, #3
   d4d66:	d011      	beq.n	d4d8c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d4d68:	2a01      	cmp	r2, #1
   d4d6a:	d118      	bne.n	d4d9e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4d6c:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d4d6e:	6003      	str	r3, [r0, #0]
	      break;
   d4d70:	e015      	b.n	d4d9e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d4d72:	2014      	movs	r0, #20
   d4d74:	680e      	ldr	r6, [r1, #0]
   d4d76:	f7ff f990 	bl	d409a <_Znwj>
   d4d7a:	4605      	mov	r5, r0
   d4d7c:	b120      	cbz	r0, d4d88 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d4d7e:	4631      	mov	r1, r6
   d4d80:	f7ff ffdd 	bl	d4d3e <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d4d84:	7c33      	ldrb	r3, [r6, #16]
   d4d86:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d4d88:	6025      	str	r5, [r4, #0]
   d4d8a:	e008      	b.n	d4d9e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d4d8c:	6804      	ldr	r4, [r0, #0]
   d4d8e:	b134      	cbz	r4, d4d9e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4d90:	4620      	mov	r0, r4
   d4d92:	f7ff fdce 	bl	d4932 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d4d96:	2114      	movs	r1, #20
   d4d98:	4620      	mov	r0, r4
   d4d9a:	f000 fdf2 	bl	d5982 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d4d9e:	2000      	movs	r0, #0
   d4da0:	bd70      	pop	{r4, r5, r6, pc}
	...

000d4da4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d4da4:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d4da6:	2300      	movs	r3, #0
   d4da8:	b087      	sub	sp, #28
   d4daa:	460c      	mov	r4, r1
   d4dac:	f3bf 8f5f 	dmb	sy
   d4db0:	e850 6f00 	ldrex	r6, [r0]
   d4db4:	e840 3200 	strex	r2, r3, [r0]
   d4db8:	2a00      	cmp	r2, #0
   d4dba:	d1f9      	bne.n	d4db0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d4dbc:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d4dc0:	2e00      	cmp	r6, #0
   d4dc2:	d03f      	beq.n	d4e44 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d4dc4:	4618      	mov	r0, r3
   d4dc6:	f7ff fcaf 	bl	d4728 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d4dca:	4607      	mov	r7, r0
   d4dcc:	b120      	cbz	r0, d4dd8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d4dce:	4621      	mov	r1, r4
   d4dd0:	4630      	mov	r0, r6
   d4dd2:	f7ff fe53 	bl	d4a7c <_ZNKSt8functionIFvRKbEEclES1_>
   d4dd6:	e02e      	b.n	d4e36 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d4dd8:	4631      	mov	r1, r6
   d4dda:	a801      	add	r0, sp, #4
   d4ddc:	f7ff ffaf 	bl	d4d3e <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d4de0:	7823      	ldrb	r3, [r4, #0]
   d4de2:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d4de6:	2010      	movs	r0, #16
   d4de8:	f7ff f957 	bl	d409a <_Znwj>
   d4dec:	4605      	mov	r5, r0
   d4dee:	b1d0      	cbz	r0, d4e26 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4df0:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4df2:	2014      	movs	r0, #20
   d4df4:	f7ff f951 	bl	d409a <_Znwj>
   d4df8:	4604      	mov	r4, r0
   d4dfa:	b178      	cbz	r0, d4e1c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4dfc:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d4dfe:	4601      	mov	r1, r0
   d4e00:	a801      	add	r0, sp, #4
   d4e02:	f7ff fe07 	bl	d4a14 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4e06:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d4e08:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d4e0a:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4e0c:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d4e0e:	9203      	str	r2, [sp, #12]
   d4e10:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d4e12:	60e3      	str	r3, [r4, #12]
   d4e14:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4e18:	9204      	str	r2, [sp, #16]
   d4e1a:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d4e1c:	4b0a      	ldr	r3, [pc, #40]	; (d4e48 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d4e1e:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d4e20:	4b0a      	ldr	r3, [pc, #40]	; (d4e4c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4e22:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d4e24:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4e26:	a801      	add	r0, sp, #4
   d4e28:	f7ff fd83 	bl	d4932 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d4e2c:	2200      	movs	r2, #0
   d4e2e:	4629      	mov	r1, r5
   d4e30:	4807      	ldr	r0, [pc, #28]	; (d4e50 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d4e32:	f7ff fc81 	bl	d4738 <application_thread_invoke>
   d4e36:	4630      	mov	r0, r6
   d4e38:	f7ff fd7b 	bl	d4932 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d4e3c:	2110      	movs	r1, #16
   d4e3e:	4630      	mov	r0, r6
   d4e40:	f000 fd9f 	bl	d5982 <_ZdlPvj>
        }
    }
   d4e44:	b007      	add	sp, #28
   d4e46:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4e48:	000d4a8f 	.word	0x000d4a8f
   d4e4c:	000d4d5d 	.word	0x000d4d5d
   d4e50:	000d4897 	.word	0x000d4897

000d4e54 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d4e54:	b530      	push	{r4, r5, lr}
   d4e56:	b085      	sub	sp, #20
   d4e58:	4604      	mov	r4, r0
   d4e5a:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d4e5c:	4668      	mov	r0, sp
   d4e5e:	4611      	mov	r1, r2
   d4e60:	f7ff fdba 	bl	d49d8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d4e64:	b17c      	cbz	r4, d4e86 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d4e66:	b224      	sxth	r4, r4
   d4e68:	4628      	mov	r0, r5
   d4e6a:	b10d      	cbz	r5, d4e70 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d4e6c:	f001 fb42 	bl	d64f4 <strdup>
   d4e70:	9002      	str	r0, [sp, #8]
   d4e72:	a902      	add	r1, sp, #8
   d4e74:	4668      	mov	r0, sp
   d4e76:	f8ad 400c 	strh.w	r4, [sp, #12]
   d4e7a:	f7ff fe1f 	bl	d4abc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d4e7e:	a802      	add	r0, sp, #8
   d4e80:	f7ff fd6f 	bl	d4962 <_ZN8particle5ErrorD1Ev>
   d4e84:	e01d      	b.n	d4ec2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d4e86:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d4e88:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d4e8c:	f04f 0201 	mov.w	r2, #1
   d4e90:	e8d0 3f4f 	ldrexb	r3, [r0]
   d4e94:	42a3      	cmp	r3, r4
   d4e96:	d103      	bne.n	d4ea0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d4e98:	e8c0 2f41 	strexb	r1, r2, [r0]
   d4e9c:	2900      	cmp	r1, #0
   d4e9e:	d1f7      	bne.n	d4e90 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d4ea0:	d002      	beq.n	d4ea8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d4ea2:	f88d 3008 	strb.w	r3, [sp, #8]
   d4ea6:	e00c      	b.n	d4ec2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d4ea8:	f110 010c 	adds.w	r1, r0, #12
   d4eac:	f04f 0301 	mov.w	r3, #1
   d4eb0:	bf18      	it	ne
   d4eb2:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d4eb4:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d4eb8:	3004      	adds	r0, #4
   d4eba:	f800 3c03 	strb.w	r3, [r0, #-3]
   d4ebe:	f7ff ff71 	bl	d4da4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d4ec2:	a801      	add	r0, sp, #4
   d4ec4:	f7ff fd12 	bl	d48ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d4ec8:	b005      	add	sp, #20
   d4eca:	bd30      	pop	{r4, r5, pc}

000d4ecc <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4ecc:	2200      	movs	r2, #0
   d4ece:	4611      	mov	r1, r2
   d4ed0:	6840      	ldr	r0, [r0, #4]
   d4ed2:	f7ff bc9d 	b.w	d4810 <network_listening>

000d4ed6 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4ed6:	2200      	movs	r2, #0
   d4ed8:	4611      	mov	r1, r2
   d4eda:	6840      	ldr	r0, [r0, #4]
   d4edc:	f7ff bca8 	b.w	d4830 <network_get_listen_timeout>

000d4ee0 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4ee0:	2200      	movs	r2, #0
   d4ee2:	6840      	ldr	r0, [r0, #4]
   d4ee4:	f7ff bc9c 	b.w	d4820 <network_set_listen_timeout>

000d4ee8 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4ee8:	2200      	movs	r2, #0
   d4eea:	f081 0101 	eor.w	r1, r1, #1
   d4eee:	6840      	ldr	r0, [r0, #4]
   d4ef0:	f7ff bc86 	b.w	d4800 <network_listen>

000d4ef4 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d4ef4:	2300      	movs	r3, #0
   d4ef6:	461a      	mov	r2, r3
   d4ef8:	4619      	mov	r1, r3
   d4efa:	6840      	ldr	r0, [r0, #4]
   d4efc:	f7ff bc78 	b.w	d47f0 <network_off>

000d4f00 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4f00:	2300      	movs	r3, #0
   d4f02:	461a      	mov	r2, r3
   d4f04:	4619      	mov	r1, r3
   d4f06:	6840      	ldr	r0, [r0, #4]
   d4f08:	f7ff bc6a 	b.w	d47e0 <network_on>

000d4f0c <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4f0c:	2200      	movs	r2, #0
   d4f0e:	4611      	mov	r1, r2
   d4f10:	6840      	ldr	r0, [r0, #4]
   d4f12:	f7ff bc5d 	b.w	d47d0 <network_ready>

000d4f16 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4f16:	2200      	movs	r2, #0
   d4f18:	4611      	mov	r1, r2
   d4f1a:	6840      	ldr	r0, [r0, #4]
   d4f1c:	f7ff bc48 	b.w	d47b0 <network_connecting>

000d4f20 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4f20:	2200      	movs	r2, #0
   d4f22:	2102      	movs	r1, #2
   d4f24:	6840      	ldr	r0, [r0, #4]
   d4f26:	f7ff bc4b 	b.w	d47c0 <network_disconnect>

000d4f2a <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4f2a:	2300      	movs	r3, #0
   d4f2c:	461a      	mov	r2, r3
   d4f2e:	6840      	ldr	r0, [r0, #4]
   d4f30:	f7ff bc36 	b.w	d47a0 <network_connect>

000d4f34 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4f34:	4b02      	ldr	r3, [pc, #8]	; (d4f40 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4f36:	2203      	movs	r2, #3
   d4f38:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4f3a:	4a02      	ldr	r2, [pc, #8]	; (d4f44 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4f3c:	601a      	str	r2, [r3, #0]
   d4f3e:	4770      	bx	lr
   d4f40:	2003e3cc 	.word	0x2003e3cc
   d4f44:	000d65ec 	.word	0x000d65ec

000d4f48 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d4f48:	4770      	bx	lr

000d4f4a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d4f4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4f4c:	4606      	mov	r6, r0
   d4f4e:	4615      	mov	r5, r2
   d4f50:	460c      	mov	r4, r1
   d4f52:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4f54:	42bc      	cmp	r4, r7
   d4f56:	d006      	beq.n	d4f66 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d4f58:	6833      	ldr	r3, [r6, #0]
   d4f5a:	f814 1b01 	ldrb.w	r1, [r4], #1
   d4f5e:	689b      	ldr	r3, [r3, #8]
   d4f60:	4630      	mov	r0, r6
   d4f62:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4f64:	e7f6      	b.n	d4f54 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d4f66:	4628      	mov	r0, r5
   d4f68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4f6a <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d4f6a:	2200      	movs	r2, #0
   d4f6c:	7c00      	ldrb	r0, [r0, #16]
   d4f6e:	f7ff baf3 	b.w	d4558 <HAL_I2C_Write_Data>

000d4f72 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d4f72:	2100      	movs	r1, #0
   d4f74:	7c00      	ldrb	r0, [r0, #16]
   d4f76:	f7ff baf7 	b.w	d4568 <HAL_I2C_Available_Data>

000d4f7a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d4f7a:	2100      	movs	r1, #0
   d4f7c:	7c00      	ldrb	r0, [r0, #16]
   d4f7e:	f7ff bafb 	b.w	d4578 <HAL_I2C_Read_Data>

000d4f82 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d4f82:	2100      	movs	r1, #0
   d4f84:	7c00      	ldrb	r0, [r0, #16]
   d4f86:	f7ff baff 	b.w	d4588 <HAL_I2C_Peek_Data>

000d4f8a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d4f8a:	2100      	movs	r1, #0
   d4f8c:	7c00      	ldrb	r0, [r0, #16]
   d4f8e:	f7ff bb03 	b.w	d4598 <HAL_I2C_Flush_Data>

000d4f92 <_ZN7TwoWireD0Ev>:
   d4f92:	b510      	push	{r4, lr}
   d4f94:	2114      	movs	r1, #20
   d4f96:	4604      	mov	r4, r0
   d4f98:	f000 fcf3 	bl	d5982 <_ZdlPvj>
   d4f9c:	4620      	mov	r0, r4
   d4f9e:	bd10      	pop	{r4, pc}

000d4fa0 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d4fa0:	b510      	push	{r4, lr}
   d4fa2:	4604      	mov	r4, r0
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d4fa4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4fa8:	4608      	mov	r0, r1
   d4faa:	60a3      	str	r3, [r4, #8]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d4fac:	2100      	movs	r1, #0
   d4fae:	4b04      	ldr	r3, [pc, #16]	; (d4fc0 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d4fb0:	7420      	strb	r0, [r4, #16]
   d4fb2:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d4fb4:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d4fb6:	f7ff faff 	bl	d45b8 <HAL_I2C_Init>

}
   d4fba:	4620      	mov	r0, r4
   d4fbc:	bd10      	pop	{r4, pc}
   d4fbe:	bf00      	nop
   d4fc0:	000d6620 	.word	0x000d6620

000d4fc4 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d4fc4:	2300      	movs	r3, #0
   d4fc6:	461a      	mov	r2, r3
   d4fc8:	4619      	mov	r1, r3
   d4fca:	7c00      	ldrb	r0, [r0, #16]
   d4fcc:	f7ff baa4 	b.w	d4518 <HAL_I2C_Begin>

000d4fd0 <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
   d4fd0:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
   d4fd2:	2400      	movs	r4, #0
   d4fd4:	7c00      	ldrb	r0, [r0, #16]
   d4fd6:	9400      	str	r4, [sp, #0]
   d4fd8:	f7ff faa6 	bl	d4528 <HAL_I2C_Request_Data>
  return result;
}
   d4fdc:	b2c0      	uxtb	r0, r0
   d4fde:	b002      	add	sp, #8
   d4fe0:	bd10      	pop	{r4, pc}

000d4fe2 <_ZN7TwoWire11requestFromEii>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
   d4fe2:	2301      	movs	r3, #1
   d4fe4:	b2d2      	uxtb	r2, r2
   d4fe6:	b2c9      	uxtb	r1, r1
   d4fe8:	f7ff bff2 	b.w	d4fd0 <_ZN7TwoWire11requestFromEhhh>

000d4fec <_ZN7TwoWire17beginTransmissionEh>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d4fec:	2200      	movs	r2, #0
   d4fee:	7c00      	ldrb	r0, [r0, #16]
   d4ff0:	f7ff baa2 	b.w	d4538 <HAL_I2C_Begin_Transmission>

000d4ff4 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   d4ff4:	b2c9      	uxtb	r1, r1
   d4ff6:	f7ff bff9 	b.w	d4fec <_ZN7TwoWire17beginTransmissionEh>

000d4ffa <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d4ffa:	2200      	movs	r2, #0
   d4ffc:	7c00      	ldrb	r0, [r0, #16]
   d4ffe:	f7ff baa3 	b.w	d4548 <HAL_I2C_End_Transmission>

000d5002 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d5002:	2101      	movs	r1, #1
   d5004:	f7ff bff9 	b.w	d4ffa <_ZN7TwoWire15endTransmissionEh>

000d5008 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d5008:	2100      	movs	r1, #0
   d500a:	7c00      	ldrb	r0, [r0, #16]
   d500c:	f7ff bacc 	b.w	d45a8 <HAL_I2C_Is_Enabled>

000d5010 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5010:	4770      	bx	lr

000d5012 <_ZN9IPAddressD0Ev>:
   d5012:	b510      	push	{r4, lr}
   d5014:	2118      	movs	r1, #24
   d5016:	4604      	mov	r4, r0
   d5018:	f000 fcb3 	bl	d5982 <_ZdlPvj>
   d501c:	4620      	mov	r0, r4
   d501e:	bd10      	pop	{r4, pc}

000d5020 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5020:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5022:	7d03      	ldrb	r3, [r0, #20]
   d5024:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5026:	b08d      	sub	sp, #52	; 0x34
   d5028:	460e      	mov	r6, r1
   d502a:	f100 0704 	add.w	r7, r0, #4
   d502e:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5032:	d002      	beq.n	d503a <_ZNK9IPAddress7printToER5Print+0x1a>
   d5034:	f100 0508 	add.w	r5, r0, #8
   d5038:	e018      	b.n	d506c <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d503a:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d503c:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d503e:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5042:	232f      	movs	r3, #47	; 0x2f
   d5044:	462a      	mov	r2, r5
   d5046:	200a      	movs	r0, #10
   d5048:	f7ff fabe 	bl	d45c8 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d504c:	4628      	mov	r0, r5
   d504e:	f001 fa6c 	bl	d652a <strlen>
   d5052:	6833      	ldr	r3, [r6, #0]
   d5054:	4602      	mov	r2, r0
   d5056:	68db      	ldr	r3, [r3, #12]
   d5058:	4629      	mov	r1, r5
   d505a:	4630      	mov	r0, r6
   d505c:	4798      	blx	r3
   d505e:	e00f      	b.n	d5080 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d5060:	b124      	cbz	r4, d506c <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d5062:	212e      	movs	r1, #46	; 0x2e
   d5064:	4630      	mov	r0, r6
   d5066:	f000 f9c9 	bl	d53fc <_ZN5Print5printEc>
   d506a:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d506c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5070:	220a      	movs	r2, #10
   d5072:	4630      	mov	r0, r6
   d5074:	f000 fa08 	bl	d5488 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5078:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d507a:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d507c:	d1f0      	bne.n	d5060 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d507e:	4620      	mov	r0, r4
    }
    return n;
}
   d5080:	b00d      	add	sp, #52	; 0x34
   d5082:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5084 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d5084:	b510      	push	{r4, lr}
   d5086:	4b05      	ldr	r3, [pc, #20]	; (d509c <_ZN9IPAddressC1Ev+0x18>)
   d5088:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d508a:	2211      	movs	r2, #17
   d508c:	f840 3b04 	str.w	r3, [r0], #4
   d5090:	2100      	movs	r1, #0
   d5092:	f001 f9f6 	bl	d6482 <memset>
{
    clear();
}
   d5096:	4620      	mov	r0, r4
   d5098:	bd10      	pop	{r4, pc}
   d509a:	bf00      	nop
   d509c:	000d6648 	.word	0x000d6648

000d50a0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d50a0:	4603      	mov	r3, r0
   d50a2:	4a07      	ldr	r2, [pc, #28]	; (d50c0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d50a4:	b510      	push	{r4, lr}
   d50a6:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d50aa:	f101 0210 	add.w	r2, r1, #16
   d50ae:	f851 4b04 	ldr.w	r4, [r1], #4
   d50b2:	f843 4b04 	str.w	r4, [r3], #4
   d50b6:	4291      	cmp	r1, r2
   d50b8:	d1f9      	bne.n	d50ae <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d50ba:	780a      	ldrb	r2, [r1, #0]
   d50bc:	701a      	strb	r2, [r3, #0]
}
   d50be:	bd10      	pop	{r4, pc}
   d50c0:	000d6648 	.word	0x000d6648

000d50c4 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d50c4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d50c6:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d50ca:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d50ce:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d50d2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d50d6:	2304      	movs	r3, #4
   d50d8:	6041      	str	r1, [r0, #4]
   d50da:	7503      	strb	r3, [r0, #20]
   d50dc:	bd10      	pop	{r4, pc}

000d50de <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d50de:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d50e0:	780d      	ldrb	r5, [r1, #0]
   d50e2:	788b      	ldrb	r3, [r1, #2]
   d50e4:	784a      	ldrb	r2, [r1, #1]
   d50e6:	78c9      	ldrb	r1, [r1, #3]
   d50e8:	9100      	str	r1, [sp, #0]
   d50ea:	4629      	mov	r1, r5
   d50ec:	f7ff ffea 	bl	d50c4 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d50f0:	b003      	add	sp, #12
   d50f2:	bd30      	pop	{r4, r5, pc}

000d50f4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d50f4:	4b01      	ldr	r3, [pc, #4]	; (d50fc <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d50f6:	4a02      	ldr	r2, [pc, #8]	; (d5100 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d50f8:	601a      	str	r2, [r3, #0]
   d50fa:	4770      	bx	lr
   d50fc:	2003e3d4 	.word	0x2003e3d4
   d5100:	000d66c7 	.word	0x000d66c7

000d5104 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5104:	2200      	movs	r2, #0
   d5106:	4611      	mov	r1, r2
   d5108:	6840      	ldr	r0, [r0, #4]
   d510a:	f7ff bb81 	b.w	d4810 <network_listening>

000d510e <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d510e:	2200      	movs	r2, #0
   d5110:	4611      	mov	r1, r2
   d5112:	6840      	ldr	r0, [r0, #4]
   d5114:	f7ff bb8c 	b.w	d4830 <network_get_listen_timeout>

000d5118 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5118:	2200      	movs	r2, #0
   d511a:	6840      	ldr	r0, [r0, #4]
   d511c:	f7ff bb80 	b.w	d4820 <network_set_listen_timeout>

000d5120 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5120:	2200      	movs	r2, #0
   d5122:	f081 0101 	eor.w	r1, r1, #1
   d5126:	6840      	ldr	r0, [r0, #4]
   d5128:	f7ff bb6a 	b.w	d4800 <network_listen>

000d512c <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d512c:	2300      	movs	r3, #0
   d512e:	461a      	mov	r2, r3
   d5130:	2101      	movs	r1, #1
   d5132:	6840      	ldr	r0, [r0, #4]
   d5134:	f7ff bb5c 	b.w	d47f0 <network_off>

000d5138 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5138:	2300      	movs	r3, #0
   d513a:	461a      	mov	r2, r3
   d513c:	4619      	mov	r1, r3
   d513e:	6840      	ldr	r0, [r0, #4]
   d5140:	f7ff bb4e 	b.w	d47e0 <network_on>

000d5144 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5144:	2200      	movs	r2, #0
   d5146:	4611      	mov	r1, r2
   d5148:	6840      	ldr	r0, [r0, #4]
   d514a:	f7ff bb41 	b.w	d47d0 <network_ready>

000d514e <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d514e:	2200      	movs	r2, #0
   d5150:	4611      	mov	r1, r2
   d5152:	6840      	ldr	r0, [r0, #4]
   d5154:	f7ff bb2c 	b.w	d47b0 <network_connecting>

000d5158 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5158:	2200      	movs	r2, #0
   d515a:	2102      	movs	r1, #2
   d515c:	6840      	ldr	r0, [r0, #4]
   d515e:	f7ff bb2f 	b.w	d47c0 <network_disconnect>

000d5162 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5162:	2300      	movs	r3, #0
   d5164:	461a      	mov	r2, r3
   d5166:	6840      	ldr	r0, [r0, #4]
   d5168:	f7ff bb1a 	b.w	d47a0 <network_connect>

000d516c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d516c:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d516e:	4605      	mov	r5, r0
   d5170:	b188      	cbz	r0, d5196 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5172:	6804      	ldr	r4, [r0, #0]
   d5174:	b14c      	cbz	r4, d518a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d5176:	68a3      	ldr	r3, [r4, #8]
   d5178:	b11b      	cbz	r3, d5182 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d517a:	2203      	movs	r2, #3
   d517c:	4621      	mov	r1, r4
   d517e:	4620      	mov	r0, r4
   d5180:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5182:	2110      	movs	r1, #16
   d5184:	4620      	mov	r0, r4
   d5186:	f000 fbfc 	bl	d5982 <_ZdlPvj>
   d518a:	4628      	mov	r0, r5
   d518c:	2114      	movs	r1, #20
      }
   d518e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5192:	f000 bbf6 	b.w	d5982 <_ZdlPvj>
   d5196:	bd38      	pop	{r3, r4, r5, pc}

000d5198 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d5198:	b110      	cbz	r0, d51a0 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d519a:	6803      	ldr	r3, [r0, #0]
   d519c:	685b      	ldr	r3, [r3, #4]
   d519e:	4718      	bx	r3
   d51a0:	4770      	bx	lr

000d51a2 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d51a2:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d51a4:	6803      	ldr	r3, [r0, #0]
   d51a6:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d51a8:	b1bb      	cbz	r3, d51da <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d51aa:	6858      	ldr	r0, [r3, #4]
   d51ac:	f7ff f95c 	bl	d4468 <os_thread_is_current>
   d51b0:	b978      	cbnz	r0, d51d2 <_ZN6ThreadD1Ev+0x30>
   d51b2:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d51b4:	7c5a      	ldrb	r2, [r3, #17]
   d51b6:	b912      	cbnz	r2, d51be <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d51b8:	6858      	ldr	r0, [r3, #4]
   d51ba:	f7ff f95d 	bl	d4478 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d51be:	6823      	ldr	r3, [r4, #0]
   d51c0:	6858      	ldr	r0, [r3, #4]
   d51c2:	f7ff f961 	bl	d4488 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d51c6:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d51c8:	2300      	movs	r3, #0
   d51ca:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d51cc:	b128      	cbz	r0, d51da <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d51ce:	f7ff ffcd 	bl	d516c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d51d2:	6820      	ldr	r0, [r4, #0]
   d51d4:	b108      	cbz	r0, d51da <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d51d6:	f7ff ffc9 	bl	d516c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d51da:	4620      	mov	r0, r4
   d51dc:	bd10      	pop	{r4, pc}
	...

000d51e0 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d51e0:	b538      	push	{r3, r4, r5, lr}
   d51e2:	4b0c      	ldr	r3, [pc, #48]	; (d5214 <_ZN5spark9MeshClassD1Ev+0x34>)
   d51e4:	6003      	str	r3, [r0, #0]
   d51e6:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d51e8:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d51ec:	b108      	cbz	r0, d51f2 <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d51ee:	f7fe ff58 	bl	d40a2 <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d51f2:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d51f6:	b135      	cbz	r5, d5206 <_ZN5spark9MeshClassD1Ev+0x26>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d51f8:	4628      	mov	r0, r5
   d51fa:	f7ff ffd2 	bl	d51a2 <_ZN6ThreadD1Ev>
   d51fe:	2104      	movs	r1, #4
   d5200:	4628      	mov	r0, r5
   d5202:	f000 fbbe 	bl	d5982 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5206:	68a0      	ldr	r0, [r4, #8]
   d5208:	b108      	cbz	r0, d520e <_ZN5spark9MeshClassD1Ev+0x2e>
	  get_deleter()(__ptr);
   d520a:	f7ff ffc5 	bl	d5198 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d520e:	4620      	mov	r0, r4
   d5210:	bd38      	pop	{r3, r4, r5, pc}
   d5212:	bf00      	nop
   d5214:	000d6738 	.word	0x000d6738

000d5218 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d5218:	b538      	push	{r3, r4, r5, lr}
   d521a:	4c0e      	ldr	r4, [pc, #56]	; (d5254 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d521c:	4b0e      	ldr	r3, [pc, #56]	; (d5258 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d521e:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d5220:	2500      	movs	r5, #0
   d5222:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d5224:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d5228:	6063      	str	r3, [r4, #4]
   d522a:	60a5      	str	r5, [r4, #8]
   d522c:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5230:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d5234:	f7ff f938 	bl	d44a8 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d5238:	4b08      	ldr	r3, [pc, #32]	; (d525c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d523a:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d523e:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d5242:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d5244:	4620      	mov	r0, r4
   d5246:	4a06      	ldr	r2, [pc, #24]	; (d5260 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d5248:	4906      	ldr	r1, [pc, #24]	; (d5264 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d524a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d524e:	f000 bb93 	b.w	d5978 <__aeabi_atexit>
   d5252:	bf00      	nop
   d5254:	2003e3d8 	.word	0x2003e3d8
   d5258:	000d676c 	.word	0x000d676c
   d525c:	000d6738 	.word	0x000d6738
   d5260:	2003e3b0 	.word	0x2003e3b0
   d5264:	000d51e1 	.word	0x000d51e1

000d5268 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5268:	2300      	movs	r3, #0
   d526a:	461a      	mov	r2, r3
   d526c:	6840      	ldr	r0, [r0, #4]
   d526e:	f7ff ba97 	b.w	d47a0 <network_connect>

000d5272 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d5272:	2200      	movs	r2, #0
   d5274:	2102      	movs	r1, #2
   d5276:	6840      	ldr	r0, [r0, #4]
   d5278:	f7ff baa2 	b.w	d47c0 <network_disconnect>

000d527c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d527c:	2200      	movs	r2, #0
   d527e:	4611      	mov	r1, r2
   d5280:	6840      	ldr	r0, [r0, #4]
   d5282:	f7ff ba95 	b.w	d47b0 <network_connecting>

000d5286 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d5286:	2200      	movs	r2, #0
   d5288:	4611      	mov	r1, r2
   d528a:	6840      	ldr	r0, [r0, #4]
   d528c:	f7ff baa0 	b.w	d47d0 <network_ready>

000d5290 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d5290:	2300      	movs	r3, #0
   d5292:	461a      	mov	r2, r3
   d5294:	4619      	mov	r1, r3
   d5296:	6840      	ldr	r0, [r0, #4]
   d5298:	f7ff baa2 	b.w	d47e0 <network_on>

000d529c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d529c:	2300      	movs	r3, #0
   d529e:	461a      	mov	r2, r3
   d52a0:	4619      	mov	r1, r3
   d52a2:	6840      	ldr	r0, [r0, #4]
   d52a4:	f7ff baa4 	b.w	d47f0 <network_off>

000d52a8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d52a8:	2200      	movs	r2, #0
   d52aa:	f081 0101 	eor.w	r1, r1, #1
   d52ae:	6840      	ldr	r0, [r0, #4]
   d52b0:	f7ff baa6 	b.w	d4800 <network_listen>

000d52b4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d52b4:	2200      	movs	r2, #0
   d52b6:	6840      	ldr	r0, [r0, #4]
   d52b8:	f7ff bab2 	b.w	d4820 <network_set_listen_timeout>

000d52bc <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d52bc:	2200      	movs	r2, #0
   d52be:	4611      	mov	r1, r2
   d52c0:	6840      	ldr	r0, [r0, #4]
   d52c2:	f7ff bab5 	b.w	d4830 <network_get_listen_timeout>

000d52c6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d52c6:	2200      	movs	r2, #0
   d52c8:	4611      	mov	r1, r2
   d52ca:	6840      	ldr	r0, [r0, #4]
   d52cc:	f7ff baa0 	b.w	d4810 <network_listening>

000d52d0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d52d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d52d4:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d52d6:	b095      	sub	sp, #84	; 0x54
   d52d8:	4616      	mov	r6, r2
   d52da:	460d      	mov	r5, r1
   d52dc:	4607      	mov	r7, r0
    IPAddress addr;
   d52de:	f7ff fed1 	bl	d5084 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d52e2:	4621      	mov	r1, r4
   d52e4:	2220      	movs	r2, #32
   d52e6:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d52e8:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d52ea:	f001 f8ca 	bl	d6482 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d52ee:	2340      	movs	r3, #64	; 0x40
   d52f0:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d52f2:	4621      	mov	r1, r4
   d52f4:	466b      	mov	r3, sp
   d52f6:	aa0c      	add	r2, sp, #48	; 0x30
   d52f8:	4630      	mov	r0, r6
   d52fa:	f7ff f975 	bl	d45e8 <netdb_getaddrinfo>
    if (!r) {
   d52fe:	4604      	mov	r4, r0
   d5300:	2800      	cmp	r0, #0
   d5302:	d144      	bne.n	d538e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5304:	4602      	mov	r2, r0
   d5306:	2101      	movs	r1, #1
   d5308:	6868      	ldr	r0, [r5, #4]
   d530a:	f7ff fa61 	bl	d47d0 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d530e:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5310:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5312:	4622      	mov	r2, r4
   d5314:	6868      	ldr	r0, [r5, #4]
   d5316:	f7ff fa5b 	bl	d47d0 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d531a:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d531c:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d531e:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5320:	2e00      	cmp	r6, #0
   d5322:	d034      	beq.n	d538e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d5324:	2900      	cmp	r1, #0
   d5326:	d132      	bne.n	d538e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d5328:	6873      	ldr	r3, [r6, #4]
   d532a:	2b02      	cmp	r3, #2
   d532c:	d002      	beq.n	d5334 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d532e:	2b0a      	cmp	r3, #10
   d5330:	d009      	beq.n	d5346 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d5332:	e02a      	b.n	d538a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d5334:	f1b8 0f00 	cmp.w	r8, #0
   d5338:	d027      	beq.n	d538a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d533a:	6971      	ldr	r1, [r6, #20]
   d533c:	4638      	mov	r0, r7
   d533e:	3104      	adds	r1, #4
   d5340:	f7ff fecd 	bl	d50de <_ZN9IPAddressaSEPKh>
   d5344:	e020      	b.n	d5388 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d5346:	f1b9 0f00 	cmp.w	r9, #0
   d534a:	d01e      	beq.n	d538a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d534c:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d534e:	2211      	movs	r2, #17
   d5350:	a801      	add	r0, sp, #4
   d5352:	f001 f896 	bl	d6482 <memset>
                    a.v = 6;
   d5356:	2306      	movs	r3, #6
   d5358:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d535c:	ad01      	add	r5, sp, #4
   d535e:	f104 0308 	add.w	r3, r4, #8
   d5362:	3418      	adds	r4, #24
   d5364:	6818      	ldr	r0, [r3, #0]
   d5366:	6859      	ldr	r1, [r3, #4]
   d5368:	462a      	mov	r2, r5
   d536a:	c203      	stmia	r2!, {r0, r1}
   d536c:	3308      	adds	r3, #8
   d536e:	42a3      	cmp	r3, r4
   d5370:	4615      	mov	r5, r2
   d5372:	d1f7      	bne.n	d5364 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d5374:	a901      	add	r1, sp, #4
   d5376:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5378:	ad07      	add	r5, sp, #28
   d537a:	f7ff fe91 	bl	d50a0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d537e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5380:	1d3c      	adds	r4, r7, #4
   d5382:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5384:	682b      	ldr	r3, [r5, #0]
   d5386:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d5388:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d538a:	69f6      	ldr	r6, [r6, #28]
   d538c:	e7c8      	b.n	d5320 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d538e:	9800      	ldr	r0, [sp, #0]
   d5390:	f7ff f922 	bl	d45d8 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5394:	4638      	mov	r0, r7
   d5396:	b015      	add	sp, #84	; 0x54
   d5398:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d539c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d539c:	4b02      	ldr	r3, [pc, #8]	; (d53a8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d539e:	4a03      	ldr	r2, [pc, #12]	; (d53ac <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d53a0:	601a      	str	r2, [r3, #0]
   d53a2:	2200      	movs	r2, #0
   d53a4:	605a      	str	r2, [r3, #4]
   d53a6:	4770      	bx	lr
   d53a8:	2003e5ac 	.word	0x2003e5ac
   d53ac:	000d676c 	.word	0x000d676c

000d53b0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d53b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d53b2:	4606      	mov	r6, r0
   d53b4:	460d      	mov	r5, r1
   d53b6:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d53b8:	2400      	movs	r4, #0
  while (size--) {
   d53ba:	42bd      	cmp	r5, r7
   d53bc:	d00c      	beq.n	d53d8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d53be:	6833      	ldr	r3, [r6, #0]
   d53c0:	f815 1b01 	ldrb.w	r1, [r5], #1
   d53c4:	689b      	ldr	r3, [r3, #8]
   d53c6:	4630      	mov	r0, r6
   d53c8:	4798      	blx	r3
     if (chunk>=0)
   d53ca:	2800      	cmp	r0, #0
   d53cc:	db01      	blt.n	d53d2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d53ce:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d53d0:	e7f3      	b.n	d53ba <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d53d2:	2c00      	cmp	r4, #0
   d53d4:	bf08      	it	eq
   d53d6:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d53d8:	4620      	mov	r0, r4
   d53da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d53dc <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d53dc:	b570      	push	{r4, r5, r6, lr}
   d53de:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d53e0:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d53e2:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d53e4:	b149      	cbz	r1, d53fa <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d53e6:	f001 f8a0 	bl	d652a <strlen>
   d53ea:	682b      	ldr	r3, [r5, #0]
   d53ec:	4602      	mov	r2, r0
   d53ee:	4621      	mov	r1, r4
   d53f0:	4628      	mov	r0, r5
   d53f2:	68db      	ldr	r3, [r3, #12]
    }
   d53f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d53f8:	4718      	bx	r3
    }
   d53fa:	bd70      	pop	{r4, r5, r6, pc}

000d53fc <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d53fc:	6803      	ldr	r3, [r0, #0]
   d53fe:	689b      	ldr	r3, [r3, #8]
   d5400:	4718      	bx	r3

000d5402 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5402:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d5404:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5406:	4605      	mov	r5, r0
  size_t n = print('\r');
   d5408:	f7ff fff8 	bl	d53fc <_ZN5Print5printEc>
  n += print('\n');
   d540c:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d540e:	4604      	mov	r4, r0
  n += print('\n');
   d5410:	4628      	mov	r0, r5
   d5412:	f7ff fff3 	bl	d53fc <_ZN5Print5printEc>
  return n;
}
   d5416:	4420      	add	r0, r4
   d5418:	bd38      	pop	{r3, r4, r5, pc}

000d541a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d541a:	b538      	push	{r3, r4, r5, lr}
   d541c:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d541e:	f7ff ffdd 	bl	d53dc <_ZN5Print5writeEPKc>
   d5422:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d5424:	4628      	mov	r0, r5
   d5426:	f7ff ffec 	bl	d5402 <_ZN5Print7printlnEv>
  return n;
}
   d542a:	4420      	add	r0, r4
   d542c:	bd38      	pop	{r3, r4, r5, pc}

000d542e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d542e:	b530      	push	{r4, r5, lr}
   d5430:	b08b      	sub	sp, #44	; 0x2c
   d5432:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d5434:	2100      	movs	r1, #0
   d5436:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d543a:	2a01      	cmp	r2, #1
   d543c:	bf98      	it	ls
   d543e:	220a      	movls	r2, #10
   d5440:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d5444:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d5448:	fb05 3312 	mls	r3, r5, r2, r3
   d544c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5450:	2b09      	cmp	r3, #9
   d5452:	bf94      	ite	ls
   d5454:	3330      	addls	r3, #48	; 0x30
   d5456:	3337      	addhi	r3, #55	; 0x37
   d5458:	b2db      	uxtb	r3, r3
   d545a:	4621      	mov	r1, r4
   d545c:	f804 3901 	strb.w	r3, [r4], #-1
   d5460:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d5462:	2d00      	cmp	r5, #0
   d5464:	d1ee      	bne.n	d5444 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d5466:	f7ff ffb9 	bl	d53dc <_ZN5Print5writeEPKc>
}
   d546a:	b00b      	add	sp, #44	; 0x2c
   d546c:	bd30      	pop	{r4, r5, pc}

000d546e <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d546e:	b410      	push	{r4}
  if (base == 0) return write(n);
   d5470:	b92a      	cbnz	r2, d547e <_ZN5Print5printEmi+0x10>
   d5472:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d5474:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d5478:	689b      	ldr	r3, [r3, #8]
   d547a:	b2c9      	uxtb	r1, r1
   d547c:	4718      	bx	r3
  else return printNumber(n, base);
   d547e:	b2d2      	uxtb	r2, r2
}
   d5480:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d5484:	f7ff bfd3 	b.w	d542e <_ZN5Print11printNumberEmh>

000d5488 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d5488:	f7ff bff1 	b.w	d546e <_ZN5Print5printEmi>

000d548c <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d548c:	b510      	push	{r4, lr}
   d548e:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5490:	f7ff fa4f 	bl	d4932 <_ZNSt14_Function_baseD1Ev>
   d5494:	4620      	mov	r0, r4
   d5496:	bd10      	pop	{r4, pc}

000d5498 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5498:	4803      	ldr	r0, [pc, #12]	; (d54a8 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d549a:	4a04      	ldr	r2, [pc, #16]	; (d54ac <_GLOBAL__sub_I_RGB+0x14>)
   d549c:	4904      	ldr	r1, [pc, #16]	; (d54b0 <_GLOBAL__sub_I_RGB+0x18>)
   d549e:	2300      	movs	r3, #0
   d54a0:	6083      	str	r3, [r0, #8]
   d54a2:	f000 ba69 	b.w	d5978 <__aeabi_atexit>
   d54a6:	bf00      	nop
   d54a8:	2003e5b4 	.word	0x2003e5b4
   d54ac:	2003e3b0 	.word	0x2003e3b0
   d54b0:	000d548d 	.word	0x000d548d

000d54b4 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d54b4:	4770      	bx	lr

000d54b6 <_ZN8SPIClassD0Ev>:
   d54b6:	b510      	push	{r4, lr}
   d54b8:	2110      	movs	r1, #16
   d54ba:	4604      	mov	r4, r0
   d54bc:	f000 fa61 	bl	d5982 <_ZdlPvj>
   d54c0:	4620      	mov	r0, r4
   d54c2:	bd10      	pop	{r4, pc}

000d54c4 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d54c4:	b570      	push	{r4, r5, r6, lr}
   d54c6:	4b08      	ldr	r3, [pc, #32]	; (d54e8 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d54c8:	6003      	str	r3, [r0, #0]
   d54ca:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d54cc:	2500      	movs	r5, #0
   d54ce:	460e      	mov	r6, r1
   d54d0:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d54d4:	f7fe ffe0 	bl	d4498 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d54d8:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d54da:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d54dc:	f7ff f88c 	bl	d45f8 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d54e0:	60a5      	str	r5, [r4, #8]
}
   d54e2:	4620      	mov	r0, r4
   d54e4:	bd70      	pop	{r4, r5, r6, pc}
   d54e6:	bf00      	nop
   d54e8:	000d67a0 	.word	0x000d67a0

000d54ec <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d54ec:	7900      	ldrb	r0, [r0, #4]
   d54ee:	f7ff b88b 	b.w	d4608 <HAL_SPI_Is_Enabled>
	...

000d54f4 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d54f4:	4b04      	ldr	r3, [pc, #16]	; (d5508 <_GLOBAL__sub_I_System+0x14>)
   d54f6:	2000      	movs	r0, #0
   d54f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d54fc:	7018      	strb	r0, [r3, #0]
   d54fe:	8058      	strh	r0, [r3, #2]
   d5500:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5502:	f7ff b901 	b.w	d4708 <set_system_mode>
   d5506:	bf00      	nop
   d5508:	2003e5c4 	.word	0x2003e5c4

000d550c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d550c:	4b02      	ldr	r3, [pc, #8]	; (d5518 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d550e:	681a      	ldr	r2, [r3, #0]
   d5510:	4b02      	ldr	r3, [pc, #8]	; (d551c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d5512:	601a      	str	r2, [r3, #0]
   d5514:	4770      	bx	lr
   d5516:	bf00      	nop
   d5518:	2003e348 	.word	0x2003e348
   d551c:	2003e5cc 	.word	0x2003e5cc

000d5520 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d5520:	4770      	bx	lr

000d5522 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5522:	7441      	strb	r1, [r0, #17]
   d5524:	4770      	bx	lr

000d5526 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d5526:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d5528:	7c00      	ldrb	r0, [r0, #16]
   d552a:	f7ff f8ad 	bl	d4688 <HAL_USART_Available_Data_For_Write>
}
   d552e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5532:	bd08      	pop	{r3, pc}

000d5534 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d5534:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d5536:	7c00      	ldrb	r0, [r0, #16]
   d5538:	f7ff f87e 	bl	d4638 <HAL_USART_Available_Data>
}
   d553c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5540:	bd08      	pop	{r3, pc}

000d5542 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d5542:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d5544:	7c00      	ldrb	r0, [r0, #16]
   d5546:	f7ff f887 	bl	d4658 <HAL_USART_Peek_Data>
}
   d554a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d554e:	bf28      	it	cs
   d5550:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d5554:	bd08      	pop	{r3, pc}

000d5556 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d5556:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d5558:	7c00      	ldrb	r0, [r0, #16]
   d555a:	f7ff f875 	bl	d4648 <HAL_USART_Read_Data>
}
   d555e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5562:	bf28      	it	cs
   d5564:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d5568:	bd08      	pop	{r3, pc}

000d556a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d556a:	7c00      	ldrb	r0, [r0, #16]
   d556c:	f7ff b87c 	b.w	d4668 <HAL_USART_Flush_Data>

000d5570 <_ZN11USARTSerialD0Ev>:
   d5570:	b510      	push	{r4, lr}
   d5572:	2114      	movs	r1, #20
   d5574:	4604      	mov	r4, r0
   d5576:	f000 fa04 	bl	d5982 <_ZdlPvj>
   d557a:	4620      	mov	r0, r4
   d557c:	bd10      	pop	{r4, pc}

000d557e <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d557e:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5580:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d5582:	4604      	mov	r4, r0
   d5584:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5586:	b925      	cbnz	r5, d5592 <_ZN11USARTSerial5writeEh+0x14>
   d5588:	7c00      	ldrb	r0, [r0, #16]
   d558a:	f7ff f87d 	bl	d4688 <HAL_USART_Available_Data_For_Write>
   d558e:	2800      	cmp	r0, #0
   d5590:	dd05      	ble.n	d559e <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5592:	4631      	mov	r1, r6
   d5594:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d5596:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d559a:	f7ff b845 	b.w	d4628 <HAL_USART_Write_Data>
  }
  return 0;
}
   d559e:	4628      	mov	r0, r5
   d55a0:	bd70      	pop	{r4, r5, r6, pc}
	...

000d55a4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d55a4:	b510      	push	{r4, lr}
   d55a6:	4604      	mov	r4, r0
   d55a8:	4608      	mov	r0, r1
   d55aa:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d55ac:	2200      	movs	r2, #0
   d55ae:	6062      	str	r2, [r4, #4]
   d55b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d55b4:	60a2      	str	r2, [r4, #8]
   d55b6:	4a05      	ldr	r2, [pc, #20]	; (d55cc <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d55b8:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d55ba:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d55bc:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d55be:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d55c0:	461a      	mov	r2, r3
   d55c2:	f7ff f829 	bl	d4618 <HAL_USART_Init>
}
   d55c6:	4620      	mov	r0, r4
   d55c8:	bd10      	pop	{r4, pc}
   d55ca:	bf00      	nop
   d55cc:	000d67dc 	.word	0x000d67dc

000d55d0 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d55d0:	7c00      	ldrb	r0, [r0, #16]
   d55d2:	f7ff b851 	b.w	d4678 <HAL_USART_Is_Enabled>
	...

000d55d8 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d55d8:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d55da:	4d0c      	ldr	r5, [pc, #48]	; (d560c <_Z22__fetch_global_Serial1v+0x34>)
   d55dc:	6829      	ldr	r1, [r5, #0]
   d55de:	f011 0401 	ands.w	r4, r1, #1
   d55e2:	d111      	bne.n	d5608 <_Z22__fetch_global_Serial1v+0x30>
   d55e4:	4628      	mov	r0, r5
   d55e6:	f7fe fd69 	bl	d40bc <__cxa_guard_acquire>
   d55ea:	b168      	cbz	r0, d5608 <_Z22__fetch_global_Serial1v+0x30>
   d55ec:	4a08      	ldr	r2, [pc, #32]	; (d5610 <_Z22__fetch_global_Serial1v+0x38>)
   d55ee:	4b09      	ldr	r3, [pc, #36]	; (d5614 <_Z22__fetch_global_Serial1v+0x3c>)
   d55f0:	4809      	ldr	r0, [pc, #36]	; (d5618 <_Z22__fetch_global_Serial1v+0x40>)
   d55f2:	4621      	mov	r1, r4
   d55f4:	f7ff ffd6 	bl	d55a4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d55f8:	4628      	mov	r0, r5
   d55fa:	f7fe fd64 	bl	d40c6 <__cxa_guard_release>
   d55fe:	4a07      	ldr	r2, [pc, #28]	; (d561c <_Z22__fetch_global_Serial1v+0x44>)
   d5600:	4907      	ldr	r1, [pc, #28]	; (d5620 <_Z22__fetch_global_Serial1v+0x48>)
   d5602:	4805      	ldr	r0, [pc, #20]	; (d5618 <_Z22__fetch_global_Serial1v+0x40>)
   d5604:	f000 f9b8 	bl	d5978 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d5608:	4803      	ldr	r0, [pc, #12]	; (d5618 <_Z22__fetch_global_Serial1v+0x40>)
   d560a:	bd38      	pop	{r3, r4, r5, pc}
   d560c:	2003e668 	.word	0x2003e668
   d5610:	2003e66c 	.word	0x2003e66c
   d5614:	2003e5e4 	.word	0x2003e5e4
   d5618:	2003e5d0 	.word	0x2003e5d0
   d561c:	2003e3b0 	.word	0x2003e3b0
   d5620:	000d5521 	.word	0x000d5521

000d5624 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5624:	7441      	strb	r1, [r0, #17]
   d5626:	4770      	bx	lr

000d5628 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5628:	4770      	bx	lr

000d562a <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d562a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d562c:	2100      	movs	r1, #0
   d562e:	7c00      	ldrb	r0, [r0, #16]
   d5630:	f7ff f84a 	bl	d46c8 <HAL_USB_USART_Receive_Data>
}
   d5634:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5638:	bf28      	it	cs
   d563a:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d563e:	bd08      	pop	{r3, pc}

000d5640 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d5640:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d5642:	2101      	movs	r1, #1
   d5644:	7c00      	ldrb	r0, [r0, #16]
   d5646:	f7ff f83f 	bl	d46c8 <HAL_USB_USART_Receive_Data>
}
   d564a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d564e:	bf28      	it	cs
   d5650:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d5654:	bd08      	pop	{r3, pc}

000d5656 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d5656:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d5658:	7c00      	ldrb	r0, [r0, #16]
   d565a:	f7ff f82d 	bl	d46b8 <HAL_USB_USART_Available_Data_For_Write>
}
   d565e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5662:	bd08      	pop	{r3, pc}

000d5664 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d5664:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d5666:	7c00      	ldrb	r0, [r0, #16]
   d5668:	f7ff f81e 	bl	d46a8 <HAL_USB_USART_Available_Data>
}
   d566c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5670:	bd08      	pop	{r3, pc}

000d5672 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d5672:	7c00      	ldrb	r0, [r0, #16]
   d5674:	f7ff b838 	b.w	d46e8 <HAL_USB_USART_Flush_Data>

000d5678 <_ZN9USBSerialD0Ev>:
   d5678:	b510      	push	{r4, lr}
   d567a:	2114      	movs	r1, #20
   d567c:	4604      	mov	r4, r0
   d567e:	f000 f980 	bl	d5982 <_ZdlPvj>
   d5682:	4620      	mov	r0, r4
   d5684:	bd10      	pop	{r4, pc}

000d5686 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5686:	b538      	push	{r3, r4, r5, lr}
   d5688:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d568a:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d568c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d568e:	f7ff f813 	bl	d46b8 <HAL_USB_USART_Available_Data_For_Write>
   d5692:	2800      	cmp	r0, #0
   d5694:	dc01      	bgt.n	d569a <_ZN9USBSerial5writeEh+0x14>
   d5696:	7c60      	ldrb	r0, [r4, #17]
   d5698:	b128      	cbz	r0, d56a6 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d569a:	4629      	mov	r1, r5
   d569c:	7c20      	ldrb	r0, [r4, #16]
   d569e:	f7ff f81b 	bl	d46d8 <HAL_USB_USART_Send_Data>
   d56a2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d56a6:	bd38      	pop	{r3, r4, r5, pc}

000d56a8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d56a8:	b510      	push	{r4, lr}
   d56aa:	4604      	mov	r4, r0
   d56ac:	2300      	movs	r3, #0
   d56ae:	6063      	str	r3, [r4, #4]
   d56b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d56b4:	60a3      	str	r3, [r4, #8]
   d56b6:	4b05      	ldr	r3, [pc, #20]	; (d56cc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d56b8:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d56ba:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d56bc:	4608      	mov	r0, r1
{
  _serial = serial;
   d56be:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d56c0:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d56c2:	4611      	mov	r1, r2
   d56c4:	f7fe ffe8 	bl	d4698 <HAL_USB_USART_Init>
}
   d56c8:	4620      	mov	r0, r4
   d56ca:	bd10      	pop	{r4, pc}
   d56cc:	000d680c 	.word	0x000d680c

000d56d0 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d56d0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d56d2:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d56d4:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d56d6:	2100      	movs	r1, #0
   d56d8:	f000 fed3 	bl	d6482 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d56dc:	4620      	mov	r0, r4
   d56de:	bd10      	pop	{r4, pc}

000d56e0 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d56e0:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d56e2:	4d0e      	ldr	r5, [pc, #56]	; (d571c <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d56e4:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d56e6:	a801      	add	r0, sp, #4
   d56e8:	f7ff fff2 	bl	d56d0 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d56ec:	6829      	ldr	r1, [r5, #0]
   d56ee:	f011 0401 	ands.w	r4, r1, #1
   d56f2:	d110      	bne.n	d5716 <_Z16_fetch_usbserialv+0x36>
   d56f4:	4628      	mov	r0, r5
   d56f6:	f7fe fce1 	bl	d40bc <__cxa_guard_acquire>
   d56fa:	b160      	cbz	r0, d5716 <_Z16_fetch_usbserialv+0x36>
   d56fc:	aa01      	add	r2, sp, #4
   d56fe:	4621      	mov	r1, r4
   d5700:	4807      	ldr	r0, [pc, #28]	; (d5720 <_Z16_fetch_usbserialv+0x40>)
   d5702:	f7ff ffd1 	bl	d56a8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d5706:	4628      	mov	r0, r5
   d5708:	f7fe fcdd 	bl	d40c6 <__cxa_guard_release>
   d570c:	4a05      	ldr	r2, [pc, #20]	; (d5724 <_Z16_fetch_usbserialv+0x44>)
   d570e:	4906      	ldr	r1, [pc, #24]	; (d5728 <_Z16_fetch_usbserialv+0x48>)
   d5710:	4803      	ldr	r0, [pc, #12]	; (d5720 <_Z16_fetch_usbserialv+0x40>)
   d5712:	f000 f931 	bl	d5978 <__aeabi_atexit>
	return _usbserial;
}
   d5716:	4802      	ldr	r0, [pc, #8]	; (d5720 <_Z16_fetch_usbserialv+0x40>)
   d5718:	b007      	add	sp, #28
   d571a:	bd30      	pop	{r4, r5, pc}
   d571c:	2003e6f0 	.word	0x2003e6f0
   d5720:	2003e6f4 	.word	0x2003e6f4
   d5724:	2003e3b0 	.word	0x2003e3b0
   d5728:	000d5629 	.word	0x000d5629

000d572c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d572c:	2200      	movs	r2, #0
   d572e:	4611      	mov	r1, r2
   d5730:	6840      	ldr	r0, [r0, #4]
   d5732:	f7ff b84d 	b.w	d47d0 <network_ready>

000d5736 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5736:	2200      	movs	r2, #0
   d5738:	4611      	mov	r1, r2
   d573a:	6840      	ldr	r0, [r0, #4]
   d573c:	f7ff b868 	b.w	d4810 <network_listening>

000d5740 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5740:	2200      	movs	r2, #0
   d5742:	4611      	mov	r1, r2
   d5744:	6840      	ldr	r0, [r0, #4]
   d5746:	f7ff b873 	b.w	d4830 <network_get_listen_timeout>

000d574a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d574a:	2200      	movs	r2, #0
   d574c:	6840      	ldr	r0, [r0, #4]
   d574e:	f7ff b867 	b.w	d4820 <network_set_listen_timeout>

000d5752 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5752:	2200      	movs	r2, #0
   d5754:	f081 0101 	eor.w	r1, r1, #1
   d5758:	6840      	ldr	r0, [r0, #4]
   d575a:	f7ff b851 	b.w	d4800 <network_listen>

000d575e <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d575e:	2300      	movs	r3, #0
   d5760:	461a      	mov	r2, r3
   d5762:	4619      	mov	r1, r3
   d5764:	6840      	ldr	r0, [r0, #4]
   d5766:	f7ff b843 	b.w	d47f0 <network_off>

000d576a <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d576a:	2300      	movs	r3, #0
   d576c:	461a      	mov	r2, r3
   d576e:	4619      	mov	r1, r3
   d5770:	6840      	ldr	r0, [r0, #4]
   d5772:	f7ff b835 	b.w	d47e0 <network_on>

000d5776 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5776:	2200      	movs	r2, #0
   d5778:	4611      	mov	r1, r2
   d577a:	6840      	ldr	r0, [r0, #4]
   d577c:	f7ff b818 	b.w	d47b0 <network_connecting>

000d5780 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5780:	2200      	movs	r2, #0
   d5782:	2102      	movs	r1, #2
   d5784:	6840      	ldr	r0, [r0, #4]
   d5786:	f7ff b81b 	b.w	d47c0 <network_disconnect>

000d578a <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d578a:	2300      	movs	r3, #0
   d578c:	461a      	mov	r2, r3
   d578e:	6840      	ldr	r0, [r0, #4]
   d5790:	f7ff b806 	b.w	d47a0 <network_connect>

000d5794 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d5794:	4b02      	ldr	r3, [pc, #8]	; (d57a0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d5796:	2204      	movs	r2, #4
   d5798:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d579a:	4a02      	ldr	r2, [pc, #8]	; (d57a4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d579c:	601a      	str	r2, [r3, #0]
   d579e:	4770      	bx	lr
   d57a0:	2003e708 	.word	0x2003e708
   d57a4:	000d683c 	.word	0x000d683c

000d57a8 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d57a8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d57aa:	4b0c      	ldr	r3, [pc, #48]	; (d57dc <serialEventRun+0x34>)
   d57ac:	b133      	cbz	r3, d57bc <serialEventRun+0x14>
   d57ae:	f7ff ff97 	bl	d56e0 <_Z16_fetch_usbserialv>
   d57b2:	6803      	ldr	r3, [r0, #0]
   d57b4:	691b      	ldr	r3, [r3, #16]
   d57b6:	4798      	blx	r3
   d57b8:	2800      	cmp	r0, #0
   d57ba:	dc09      	bgt.n	d57d0 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d57bc:	4b08      	ldr	r3, [pc, #32]	; (d57e0 <serialEventRun+0x38>)
   d57be:	b163      	cbz	r3, d57da <serialEventRun+0x32>
   d57c0:	f7ff ff0a 	bl	d55d8 <_Z22__fetch_global_Serial1v>
   d57c4:	6803      	ldr	r3, [r0, #0]
   d57c6:	691b      	ldr	r3, [r3, #16]
   d57c8:	4798      	blx	r3
   d57ca:	2800      	cmp	r0, #0
   d57cc:	dc03      	bgt.n	d57d6 <serialEventRun+0x2e>
   d57ce:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d57d0:	f3af 8000 	nop.w
   d57d4:	e7f2      	b.n	d57bc <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d57d6:	f3af 8000 	nop.w
   d57da:	bd08      	pop	{r3, pc}
	...

000d57e4 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d57e4:	b508      	push	{r3, lr}
	serialEventRun();
   d57e6:	f7ff ffdf 	bl	d57a8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d57ea:	f7fe fe75 	bl	d44d8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d57ee:	4b01      	ldr	r3, [pc, #4]	; (d57f4 <_post_loop+0x10>)
   d57f0:	6018      	str	r0, [r3, #0]
   d57f2:	bd08      	pop	{r3, pc}
   d57f4:	2003e714 	.word	0x2003e714

000d57f8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d57f8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d57fa:	2300      	movs	r3, #0
   d57fc:	9300      	str	r3, [sp, #0]
   d57fe:	461a      	mov	r2, r3
   d5800:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5804:	f7fe ffaa 	bl	d475c <system_ctrl_set_result>
}
   d5808:	b003      	add	sp, #12
   d580a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5810 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d5810:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d5812:	8843      	ldrh	r3, [r0, #2]
   d5814:	2b0a      	cmp	r3, #10
   d5816:	d008      	beq.n	d582a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d5818:	2b50      	cmp	r3, #80	; 0x50
   d581a:	d109      	bne.n	d5830 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d581c:	4b09      	ldr	r3, [pc, #36]	; (d5844 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d581e:	681b      	ldr	r3, [r3, #0]
   d5820:	b13b      	cbz	r3, d5832 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d5822:	b003      	add	sp, #12
   d5824:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d5828:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d582a:	f7ff ffe5 	bl	d57f8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d582e:	e006      	b.n	d583e <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5830:	2300      	movs	r3, #0
   d5832:	9300      	str	r3, [sp, #0]
   d5834:	461a      	mov	r2, r3
   d5836:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d583a:	f7fe ff8f 	bl	d475c <system_ctrl_set_result>
        break;
    }
}
   d583e:	b003      	add	sp, #12
   d5840:	f85d fb04 	ldr.w	pc, [sp], #4
   d5844:	2003e710 	.word	0x2003e710

000d5848 <module_user_init_hook>:

void module_user_init_hook()
{
   d5848:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d584a:	f7fe fe35 	bl	d44b8 <HAL_RNG_GetRandomNumber>
   d584e:	4604      	mov	r4, r0
    srand(seed);
   d5850:	f000 fe20 	bl	d6494 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d5854:	4b07      	ldr	r3, [pc, #28]	; (d5874 <module_user_init_hook+0x2c>)
   d5856:	b113      	cbz	r3, d585e <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d5858:	4620      	mov	r0, r4
   d585a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d585e:	2100      	movs	r1, #0
   d5860:	4804      	ldr	r0, [pc, #16]	; (d5874 <module_user_init_hook+0x2c>)
   d5862:	f7fe ff95 	bl	d4790 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5866:	2100      	movs	r1, #0
   d5868:	4803      	ldr	r0, [pc, #12]	; (d5878 <module_user_init_hook+0x30>)
}
   d586a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d586e:	f7fe bf6b 	b.w	d4748 <system_ctrl_set_app_request_handler>
   d5872:	bf00      	nop
   d5874:	00000000 	.word	0x00000000
   d5878:	000d5811 	.word	0x000d5811

000d587c <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d587c:	b510      	push	{r4, lr}
   d587e:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d5880:	480f      	ldr	r0, [pc, #60]	; (d58c0 <pinAvailable+0x44>)
   d5882:	f7ff fe33 	bl	d54ec <_ZN8SPIClass9isEnabledEv>
   d5886:	b128      	cbz	r0, d5894 <pinAvailable+0x18>
   d5888:	f1a4 030b 	sub.w	r3, r4, #11
   d588c:	2b02      	cmp	r3, #2
   d588e:	d801      	bhi.n	d5894 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d5890:	2000      	movs	r0, #0
   d5892:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d5894:	f000 f82e 	bl	d58f4 <_Z19__fetch_global_Wirev>
   d5898:	f7ff fbb6 	bl	d5008 <_ZN7TwoWire9isEnabledEv>
   d589c:	b108      	cbz	r0, d58a2 <pinAvailable+0x26>
   d589e:	2c01      	cmp	r4, #1
   d58a0:	d9f6      	bls.n	d5890 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d58a2:	f7ff fe99 	bl	d55d8 <_Z22__fetch_global_Serial1v>
   d58a6:	f7ff fe93 	bl	d55d0 <_ZN11USARTSerial9isEnabledEv>
   d58aa:	b118      	cbz	r0, d58b4 <pinAvailable+0x38>
   d58ac:	f1a4 0309 	sub.w	r3, r4, #9
   d58b0:	2b01      	cmp	r3, #1
   d58b2:	d9ed      	bls.n	d5890 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d58b4:	2c23      	cmp	r4, #35	; 0x23
   d58b6:	bf8c      	ite	hi
   d58b8:	2000      	movhi	r0, #0
   d58ba:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d58bc:	bd10      	pop	{r4, pc}
   d58be:	bf00      	nop
   d58c0:	2003e730 	.word	0x2003e730

000d58c4 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d58c4:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d58c6:	b510      	push	{r4, lr}
   d58c8:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d58ca:	bf9c      	itt	ls
   d58cc:	340e      	addls	r4, #14
   d58ce:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d58d0:	4620      	mov	r0, r4
   d58d2:	f7ff ffd3 	bl	d587c <pinAvailable>
   d58d6:	b150      	cbz	r0, d58ee <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d58d8:	2103      	movs	r1, #3
   d58da:	4620      	mov	r0, r4
   d58dc:	f7fe fe0c 	bl	d44f8 <HAL_Validate_Pin_Function>
   d58e0:	2803      	cmp	r0, #3
   d58e2:	d104      	bne.n	d58ee <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d58e4:	4620      	mov	r0, r4
}
   d58e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d58ea:	f7fe be0d 	b.w	d4508 <HAL_ADC_Read>
}
   d58ee:	2000      	movs	r0, #0
   d58f0:	bd10      	pop	{r4, pc}
	...

000d58f4 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d58f4:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d58f6:	4d0b      	ldr	r5, [pc, #44]	; (d5924 <_Z19__fetch_global_Wirev+0x30>)
   d58f8:	6829      	ldr	r1, [r5, #0]
   d58fa:	f011 0401 	ands.w	r4, r1, #1
   d58fe:	d10f      	bne.n	d5920 <_Z19__fetch_global_Wirev+0x2c>
   d5900:	4628      	mov	r0, r5
   d5902:	f7fe fbdb 	bl	d40bc <__cxa_guard_acquire>
   d5906:	b158      	cbz	r0, d5920 <_Z19__fetch_global_Wirev+0x2c>
   d5908:	4621      	mov	r1, r4
   d590a:	4807      	ldr	r0, [pc, #28]	; (d5928 <_Z19__fetch_global_Wirev+0x34>)
   d590c:	f7ff fb48 	bl	d4fa0 <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d5910:	4628      	mov	r0, r5
   d5912:	f7fe fbd8 	bl	d40c6 <__cxa_guard_release>
   d5916:	4a05      	ldr	r2, [pc, #20]	; (d592c <_Z19__fetch_global_Wirev+0x38>)
   d5918:	4905      	ldr	r1, [pc, #20]	; (d5930 <_Z19__fetch_global_Wirev+0x3c>)
   d591a:	4803      	ldr	r0, [pc, #12]	; (d5928 <_Z19__fetch_global_Wirev+0x34>)
   d591c:	f000 f82c 	bl	d5978 <__aeabi_atexit>
	return wire;
}
   d5920:	4801      	ldr	r0, [pc, #4]	; (d5928 <_Z19__fetch_global_Wirev+0x34>)
   d5922:	bd38      	pop	{r3, r4, r5, pc}
   d5924:	2003e718 	.word	0x2003e718
   d5928:	2003e71c 	.word	0x2003e71c
   d592c:	2003e3b0 	.word	0x2003e3b0
   d5930:	000d4f49 	.word	0x000d4f49

000d5934 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d5934:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d5936:	4c0c      	ldr	r4, [pc, #48]	; (d5968 <_GLOBAL__sub_I_SPI+0x34>)
   d5938:	4e0c      	ldr	r6, [pc, #48]	; (d596c <_GLOBAL__sub_I_SPI+0x38>)
   d593a:	4d0d      	ldr	r5, [pc, #52]	; (d5970 <_GLOBAL__sub_I_SPI+0x3c>)
   d593c:	2100      	movs	r1, #0
   d593e:	4620      	mov	r0, r4
   d5940:	f7ff fdc0 	bl	d54c4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d5944:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d5946:	4c0b      	ldr	r4, [pc, #44]	; (d5974 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d5948:	4632      	mov	r2, r6
   d594a:	4629      	mov	r1, r5
   d594c:	f000 f814 	bl	d5978 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d5950:	2101      	movs	r1, #1
   d5952:	4620      	mov	r0, r4
   d5954:	f7ff fdb6 	bl	d54c4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d5958:	4632      	mov	r2, r6
   d595a:	4629      	mov	r1, r5
   d595c:	4620      	mov	r0, r4
   d595e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d5962:	f000 b809 	b.w	d5978 <__aeabi_atexit>
   d5966:	bf00      	nop
   d5968:	2003e730 	.word	0x2003e730
   d596c:	2003e3b0 	.word	0x2003e3b0
   d5970:	000d54b5 	.word	0x000d54b5
   d5974:	2003e740 	.word	0x2003e740

000d5978 <__aeabi_atexit>:
   d5978:	460b      	mov	r3, r1
   d597a:	4601      	mov	r1, r0
   d597c:	4618      	mov	r0, r3
   d597e:	f000 bd67 	b.w	d6450 <__cxa_atexit>

000d5982 <_ZdlPvj>:
   d5982:	f7fe bb8c 	b.w	d409e <_ZdlPv>

000d5986 <_ZSt25__throw_bad_function_callv>:
   d5986:	b508      	push	{r3, lr}
   d5988:	f7fe ff72 	bl	d4870 <abort>

000d598c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d598c:	4b24      	ldr	r3, [pc, #144]	; (d5a20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d598e:	681a      	ldr	r2, [r3, #0]
   d5990:	07d0      	lsls	r0, r2, #31
   d5992:	bf5c      	itt	pl
   d5994:	2201      	movpl	r2, #1
   d5996:	601a      	strpl	r2, [r3, #0]
   d5998:	4b22      	ldr	r3, [pc, #136]	; (d5a24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d599a:	681a      	ldr	r2, [r3, #0]
   d599c:	07d1      	lsls	r1, r2, #31
   d599e:	bf5c      	itt	pl
   d59a0:	2201      	movpl	r2, #1
   d59a2:	601a      	strpl	r2, [r3, #0]
   d59a4:	4b20      	ldr	r3, [pc, #128]	; (d5a28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d59a6:	681a      	ldr	r2, [r3, #0]
   d59a8:	07d2      	lsls	r2, r2, #31
   d59aa:	bf5c      	itt	pl
   d59ac:	2201      	movpl	r2, #1
   d59ae:	601a      	strpl	r2, [r3, #0]
   d59b0:	4b1e      	ldr	r3, [pc, #120]	; (d5a2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d59b2:	681a      	ldr	r2, [r3, #0]
   d59b4:	07d0      	lsls	r0, r2, #31
   d59b6:	bf5c      	itt	pl
   d59b8:	2201      	movpl	r2, #1
   d59ba:	601a      	strpl	r2, [r3, #0]
   d59bc:	4b1c      	ldr	r3, [pc, #112]	; (d5a30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d59be:	681a      	ldr	r2, [r3, #0]
   d59c0:	07d1      	lsls	r1, r2, #31
   d59c2:	bf5c      	itt	pl
   d59c4:	2201      	movpl	r2, #1
   d59c6:	601a      	strpl	r2, [r3, #0]
   d59c8:	4b1a      	ldr	r3, [pc, #104]	; (d5a34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d59ca:	681a      	ldr	r2, [r3, #0]
   d59cc:	07d2      	lsls	r2, r2, #31
   d59ce:	bf5c      	itt	pl
   d59d0:	2201      	movpl	r2, #1
   d59d2:	601a      	strpl	r2, [r3, #0]
   d59d4:	4b18      	ldr	r3, [pc, #96]	; (d5a38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d59d6:	681a      	ldr	r2, [r3, #0]
   d59d8:	07d0      	lsls	r0, r2, #31
   d59da:	bf5c      	itt	pl
   d59dc:	2201      	movpl	r2, #1
   d59de:	601a      	strpl	r2, [r3, #0]
   d59e0:	4b16      	ldr	r3, [pc, #88]	; (d5a3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d59e2:	681a      	ldr	r2, [r3, #0]
   d59e4:	07d1      	lsls	r1, r2, #31
   d59e6:	bf5c      	itt	pl
   d59e8:	2201      	movpl	r2, #1
   d59ea:	601a      	strpl	r2, [r3, #0]
   d59ec:	4b14      	ldr	r3, [pc, #80]	; (d5a40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d59ee:	681a      	ldr	r2, [r3, #0]
   d59f0:	07d2      	lsls	r2, r2, #31
   d59f2:	bf5c      	itt	pl
   d59f4:	2201      	movpl	r2, #1
   d59f6:	601a      	strpl	r2, [r3, #0]
   d59f8:	4b12      	ldr	r3, [pc, #72]	; (d5a44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d59fa:	681a      	ldr	r2, [r3, #0]
   d59fc:	07d0      	lsls	r0, r2, #31
   d59fe:	bf5c      	itt	pl
   d5a00:	2201      	movpl	r2, #1
   d5a02:	601a      	strpl	r2, [r3, #0]
   d5a04:	4b10      	ldr	r3, [pc, #64]	; (d5a48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d5a06:	681a      	ldr	r2, [r3, #0]
   d5a08:	07d1      	lsls	r1, r2, #31
   d5a0a:	bf5c      	itt	pl
   d5a0c:	2201      	movpl	r2, #1
   d5a0e:	601a      	strpl	r2, [r3, #0]
   d5a10:	4b0e      	ldr	r3, [pc, #56]	; (d5a4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d5a12:	681a      	ldr	r2, [r3, #0]
   d5a14:	07d2      	lsls	r2, r2, #31
   d5a16:	bf5c      	itt	pl
   d5a18:	2201      	movpl	r2, #1
   d5a1a:	601a      	strpl	r2, [r3, #0]
   d5a1c:	4770      	bx	lr
   d5a1e:	bf00      	nop
   d5a20:	2003e77c 	.word	0x2003e77c
   d5a24:	2003e778 	.word	0x2003e778
   d5a28:	2003e774 	.word	0x2003e774
   d5a2c:	2003e770 	.word	0x2003e770
   d5a30:	2003e76c 	.word	0x2003e76c
   d5a34:	2003e768 	.word	0x2003e768
   d5a38:	2003e764 	.word	0x2003e764
   d5a3c:	2003e760 	.word	0x2003e760
   d5a40:	2003e75c 	.word	0x2003e75c
   d5a44:	2003e758 	.word	0x2003e758
   d5a48:	2003e754 	.word	0x2003e754
   d5a4c:	2003e750 	.word	0x2003e750

000d5a50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5a50:	4b18      	ldr	r3, [pc, #96]	; (d5ab4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5a52:	681a      	ldr	r2, [r3, #0]
   d5a54:	07d1      	lsls	r1, r2, #31
   d5a56:	bf5c      	itt	pl
   d5a58:	2201      	movpl	r2, #1
   d5a5a:	601a      	strpl	r2, [r3, #0]
   d5a5c:	4b16      	ldr	r3, [pc, #88]	; (d5ab8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5a5e:	681a      	ldr	r2, [r3, #0]
   d5a60:	07d2      	lsls	r2, r2, #31
   d5a62:	bf5c      	itt	pl
   d5a64:	2201      	movpl	r2, #1
   d5a66:	601a      	strpl	r2, [r3, #0]
   d5a68:	4b14      	ldr	r3, [pc, #80]	; (d5abc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5a6a:	681a      	ldr	r2, [r3, #0]
   d5a6c:	07d0      	lsls	r0, r2, #31
   d5a6e:	bf5c      	itt	pl
   d5a70:	2201      	movpl	r2, #1
   d5a72:	601a      	strpl	r2, [r3, #0]
   d5a74:	4b12      	ldr	r3, [pc, #72]	; (d5ac0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5a76:	681a      	ldr	r2, [r3, #0]
   d5a78:	07d1      	lsls	r1, r2, #31
   d5a7a:	bf5c      	itt	pl
   d5a7c:	2201      	movpl	r2, #1
   d5a7e:	601a      	strpl	r2, [r3, #0]
   d5a80:	4b10      	ldr	r3, [pc, #64]	; (d5ac4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5a82:	681a      	ldr	r2, [r3, #0]
   d5a84:	07d2      	lsls	r2, r2, #31
   d5a86:	bf5c      	itt	pl
   d5a88:	2201      	movpl	r2, #1
   d5a8a:	601a      	strpl	r2, [r3, #0]
   d5a8c:	4b0e      	ldr	r3, [pc, #56]	; (d5ac8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5a8e:	681a      	ldr	r2, [r3, #0]
   d5a90:	07d0      	lsls	r0, r2, #31
   d5a92:	bf5c      	itt	pl
   d5a94:	2201      	movpl	r2, #1
   d5a96:	601a      	strpl	r2, [r3, #0]
   d5a98:	4b0c      	ldr	r3, [pc, #48]	; (d5acc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5a9a:	681a      	ldr	r2, [r3, #0]
   d5a9c:	07d1      	lsls	r1, r2, #31
   d5a9e:	bf5c      	itt	pl
   d5aa0:	2201      	movpl	r2, #1
   d5aa2:	601a      	strpl	r2, [r3, #0]
   d5aa4:	4b0a      	ldr	r3, [pc, #40]	; (d5ad0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5aa6:	681a      	ldr	r2, [r3, #0]
   d5aa8:	07d2      	lsls	r2, r2, #31
   d5aaa:	bf5c      	itt	pl
   d5aac:	2201      	movpl	r2, #1
   d5aae:	601a      	strpl	r2, [r3, #0]
   d5ab0:	4770      	bx	lr
   d5ab2:	bf00      	nop
   d5ab4:	2003e79c 	.word	0x2003e79c
   d5ab8:	2003e798 	.word	0x2003e798
   d5abc:	2003e794 	.word	0x2003e794
   d5ac0:	2003e790 	.word	0x2003e790
   d5ac4:	2003e78c 	.word	0x2003e78c
   d5ac8:	2003e788 	.word	0x2003e788
   d5acc:	2003e784 	.word	0x2003e784
   d5ad0:	2003e780 	.word	0x2003e780

000d5ad4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5ad4:	4b18      	ldr	r3, [pc, #96]	; (d5b38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5ad6:	681a      	ldr	r2, [r3, #0]
   d5ad8:	07d1      	lsls	r1, r2, #31
   d5ada:	bf5c      	itt	pl
   d5adc:	2201      	movpl	r2, #1
   d5ade:	601a      	strpl	r2, [r3, #0]
   d5ae0:	4b16      	ldr	r3, [pc, #88]	; (d5b3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5ae2:	681a      	ldr	r2, [r3, #0]
   d5ae4:	07d2      	lsls	r2, r2, #31
   d5ae6:	bf5c      	itt	pl
   d5ae8:	2201      	movpl	r2, #1
   d5aea:	601a      	strpl	r2, [r3, #0]
   d5aec:	4b14      	ldr	r3, [pc, #80]	; (d5b40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5aee:	681a      	ldr	r2, [r3, #0]
   d5af0:	07d0      	lsls	r0, r2, #31
   d5af2:	bf5c      	itt	pl
   d5af4:	2201      	movpl	r2, #1
   d5af6:	601a      	strpl	r2, [r3, #0]
   d5af8:	4b12      	ldr	r3, [pc, #72]	; (d5b44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5afa:	681a      	ldr	r2, [r3, #0]
   d5afc:	07d1      	lsls	r1, r2, #31
   d5afe:	bf5c      	itt	pl
   d5b00:	2201      	movpl	r2, #1
   d5b02:	601a      	strpl	r2, [r3, #0]
   d5b04:	4b10      	ldr	r3, [pc, #64]	; (d5b48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5b06:	681a      	ldr	r2, [r3, #0]
   d5b08:	07d2      	lsls	r2, r2, #31
   d5b0a:	bf5c      	itt	pl
   d5b0c:	2201      	movpl	r2, #1
   d5b0e:	601a      	strpl	r2, [r3, #0]
   d5b10:	4b0e      	ldr	r3, [pc, #56]	; (d5b4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5b12:	681a      	ldr	r2, [r3, #0]
   d5b14:	07d0      	lsls	r0, r2, #31
   d5b16:	bf5c      	itt	pl
   d5b18:	2201      	movpl	r2, #1
   d5b1a:	601a      	strpl	r2, [r3, #0]
   d5b1c:	4b0c      	ldr	r3, [pc, #48]	; (d5b50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5b1e:	681a      	ldr	r2, [r3, #0]
   d5b20:	07d1      	lsls	r1, r2, #31
   d5b22:	bf5c      	itt	pl
   d5b24:	2201      	movpl	r2, #1
   d5b26:	601a      	strpl	r2, [r3, #0]
   d5b28:	4b0a      	ldr	r3, [pc, #40]	; (d5b54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5b2a:	681a      	ldr	r2, [r3, #0]
   d5b2c:	07d2      	lsls	r2, r2, #31
   d5b2e:	bf5c      	itt	pl
   d5b30:	2201      	movpl	r2, #1
   d5b32:	601a      	strpl	r2, [r3, #0]
   d5b34:	4770      	bx	lr
   d5b36:	bf00      	nop
   d5b38:	2003e7bc 	.word	0x2003e7bc
   d5b3c:	2003e7b8 	.word	0x2003e7b8
   d5b40:	2003e7b4 	.word	0x2003e7b4
   d5b44:	2003e7b0 	.word	0x2003e7b0
   d5b48:	2003e7ac 	.word	0x2003e7ac
   d5b4c:	2003e7a8 	.word	0x2003e7a8
   d5b50:	2003e7a4 	.word	0x2003e7a4
   d5b54:	2003e7a0 	.word	0x2003e7a0

000d5b58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d5b58:	4b24      	ldr	r3, [pc, #144]	; (d5bec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d5b5a:	681a      	ldr	r2, [r3, #0]
   d5b5c:	07d0      	lsls	r0, r2, #31
   d5b5e:	bf5c      	itt	pl
   d5b60:	2201      	movpl	r2, #1
   d5b62:	601a      	strpl	r2, [r3, #0]
   d5b64:	4b22      	ldr	r3, [pc, #136]	; (d5bf0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d5b66:	681a      	ldr	r2, [r3, #0]
   d5b68:	07d1      	lsls	r1, r2, #31
   d5b6a:	bf5c      	itt	pl
   d5b6c:	2201      	movpl	r2, #1
   d5b6e:	601a      	strpl	r2, [r3, #0]
   d5b70:	4b20      	ldr	r3, [pc, #128]	; (d5bf4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d5b72:	681a      	ldr	r2, [r3, #0]
   d5b74:	07d2      	lsls	r2, r2, #31
   d5b76:	bf5c      	itt	pl
   d5b78:	2201      	movpl	r2, #1
   d5b7a:	601a      	strpl	r2, [r3, #0]
   d5b7c:	4b1e      	ldr	r3, [pc, #120]	; (d5bf8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d5b7e:	681a      	ldr	r2, [r3, #0]
   d5b80:	07d0      	lsls	r0, r2, #31
   d5b82:	bf5c      	itt	pl
   d5b84:	2201      	movpl	r2, #1
   d5b86:	601a      	strpl	r2, [r3, #0]
   d5b88:	4b1c      	ldr	r3, [pc, #112]	; (d5bfc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d5b8a:	681a      	ldr	r2, [r3, #0]
   d5b8c:	07d1      	lsls	r1, r2, #31
   d5b8e:	bf5c      	itt	pl
   d5b90:	2201      	movpl	r2, #1
   d5b92:	601a      	strpl	r2, [r3, #0]
   d5b94:	4b1a      	ldr	r3, [pc, #104]	; (d5c00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d5b96:	681a      	ldr	r2, [r3, #0]
   d5b98:	07d2      	lsls	r2, r2, #31
   d5b9a:	bf5c      	itt	pl
   d5b9c:	2201      	movpl	r2, #1
   d5b9e:	601a      	strpl	r2, [r3, #0]
   d5ba0:	4b18      	ldr	r3, [pc, #96]	; (d5c04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d5ba2:	681a      	ldr	r2, [r3, #0]
   d5ba4:	07d0      	lsls	r0, r2, #31
   d5ba6:	bf5c      	itt	pl
   d5ba8:	2201      	movpl	r2, #1
   d5baa:	601a      	strpl	r2, [r3, #0]
   d5bac:	4b16      	ldr	r3, [pc, #88]	; (d5c08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d5bae:	681a      	ldr	r2, [r3, #0]
   d5bb0:	07d1      	lsls	r1, r2, #31
   d5bb2:	bf5c      	itt	pl
   d5bb4:	2201      	movpl	r2, #1
   d5bb6:	601a      	strpl	r2, [r3, #0]
   d5bb8:	4b14      	ldr	r3, [pc, #80]	; (d5c0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d5bba:	681a      	ldr	r2, [r3, #0]
   d5bbc:	07d2      	lsls	r2, r2, #31
   d5bbe:	bf5c      	itt	pl
   d5bc0:	2201      	movpl	r2, #1
   d5bc2:	601a      	strpl	r2, [r3, #0]
   d5bc4:	4b12      	ldr	r3, [pc, #72]	; (d5c10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d5bc6:	681a      	ldr	r2, [r3, #0]
   d5bc8:	07d0      	lsls	r0, r2, #31
   d5bca:	bf5c      	itt	pl
   d5bcc:	2201      	movpl	r2, #1
   d5bce:	601a      	strpl	r2, [r3, #0]
   d5bd0:	4b10      	ldr	r3, [pc, #64]	; (d5c14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d5bd2:	681a      	ldr	r2, [r3, #0]
   d5bd4:	07d1      	lsls	r1, r2, #31
   d5bd6:	bf5c      	itt	pl
   d5bd8:	2201      	movpl	r2, #1
   d5bda:	601a      	strpl	r2, [r3, #0]
   d5bdc:	4b0e      	ldr	r3, [pc, #56]	; (d5c18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d5bde:	681a      	ldr	r2, [r3, #0]
   d5be0:	07d2      	lsls	r2, r2, #31
   d5be2:	bf5c      	itt	pl
   d5be4:	2201      	movpl	r2, #1
   d5be6:	601a      	strpl	r2, [r3, #0]
   d5be8:	4770      	bx	lr
   d5bea:	bf00      	nop
   d5bec:	2003e7ec 	.word	0x2003e7ec
   d5bf0:	2003e7e8 	.word	0x2003e7e8
   d5bf4:	2003e7e4 	.word	0x2003e7e4
   d5bf8:	2003e7e0 	.word	0x2003e7e0
   d5bfc:	2003e7dc 	.word	0x2003e7dc
   d5c00:	2003e7d8 	.word	0x2003e7d8
   d5c04:	2003e7d4 	.word	0x2003e7d4
   d5c08:	2003e7d0 	.word	0x2003e7d0
   d5c0c:	2003e7cc 	.word	0x2003e7cc
   d5c10:	2003e7c8 	.word	0x2003e7c8
   d5c14:	2003e7c4 	.word	0x2003e7c4
   d5c18:	2003e7c0 	.word	0x2003e7c0

000d5c1c <__aeabi_drsub>:
   d5c1c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d5c20:	e002      	b.n	d5c28 <__adddf3>
   d5c22:	bf00      	nop

000d5c24 <__aeabi_dsub>:
   d5c24:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d5c28 <__adddf3>:
   d5c28:	b530      	push	{r4, r5, lr}
   d5c2a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d5c2e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d5c32:	ea94 0f05 	teq	r4, r5
   d5c36:	bf08      	it	eq
   d5c38:	ea90 0f02 	teqeq	r0, r2
   d5c3c:	bf1f      	itttt	ne
   d5c3e:	ea54 0c00 	orrsne.w	ip, r4, r0
   d5c42:	ea55 0c02 	orrsne.w	ip, r5, r2
   d5c46:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d5c4a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d5c4e:	f000 80e2 	beq.w	d5e16 <__adddf3+0x1ee>
   d5c52:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d5c56:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d5c5a:	bfb8      	it	lt
   d5c5c:	426d      	neglt	r5, r5
   d5c5e:	dd0c      	ble.n	d5c7a <__adddf3+0x52>
   d5c60:	442c      	add	r4, r5
   d5c62:	ea80 0202 	eor.w	r2, r0, r2
   d5c66:	ea81 0303 	eor.w	r3, r1, r3
   d5c6a:	ea82 0000 	eor.w	r0, r2, r0
   d5c6e:	ea83 0101 	eor.w	r1, r3, r1
   d5c72:	ea80 0202 	eor.w	r2, r0, r2
   d5c76:	ea81 0303 	eor.w	r3, r1, r3
   d5c7a:	2d36      	cmp	r5, #54	; 0x36
   d5c7c:	bf88      	it	hi
   d5c7e:	bd30      	pophi	{r4, r5, pc}
   d5c80:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d5c84:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d5c88:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d5c8c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d5c90:	d002      	beq.n	d5c98 <__adddf3+0x70>
   d5c92:	4240      	negs	r0, r0
   d5c94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d5c98:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d5c9c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d5ca0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d5ca4:	d002      	beq.n	d5cac <__adddf3+0x84>
   d5ca6:	4252      	negs	r2, r2
   d5ca8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d5cac:	ea94 0f05 	teq	r4, r5
   d5cb0:	f000 80a7 	beq.w	d5e02 <__adddf3+0x1da>
   d5cb4:	f1a4 0401 	sub.w	r4, r4, #1
   d5cb8:	f1d5 0e20 	rsbs	lr, r5, #32
   d5cbc:	db0d      	blt.n	d5cda <__adddf3+0xb2>
   d5cbe:	fa02 fc0e 	lsl.w	ip, r2, lr
   d5cc2:	fa22 f205 	lsr.w	r2, r2, r5
   d5cc6:	1880      	adds	r0, r0, r2
   d5cc8:	f141 0100 	adc.w	r1, r1, #0
   d5ccc:	fa03 f20e 	lsl.w	r2, r3, lr
   d5cd0:	1880      	adds	r0, r0, r2
   d5cd2:	fa43 f305 	asr.w	r3, r3, r5
   d5cd6:	4159      	adcs	r1, r3
   d5cd8:	e00e      	b.n	d5cf8 <__adddf3+0xd0>
   d5cda:	f1a5 0520 	sub.w	r5, r5, #32
   d5cde:	f10e 0e20 	add.w	lr, lr, #32
   d5ce2:	2a01      	cmp	r2, #1
   d5ce4:	fa03 fc0e 	lsl.w	ip, r3, lr
   d5ce8:	bf28      	it	cs
   d5cea:	f04c 0c02 	orrcs.w	ip, ip, #2
   d5cee:	fa43 f305 	asr.w	r3, r3, r5
   d5cf2:	18c0      	adds	r0, r0, r3
   d5cf4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d5cf8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5cfc:	d507      	bpl.n	d5d0e <__adddf3+0xe6>
   d5cfe:	f04f 0e00 	mov.w	lr, #0
   d5d02:	f1dc 0c00 	rsbs	ip, ip, #0
   d5d06:	eb7e 0000 	sbcs.w	r0, lr, r0
   d5d0a:	eb6e 0101 	sbc.w	r1, lr, r1
   d5d0e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d5d12:	d31b      	bcc.n	d5d4c <__adddf3+0x124>
   d5d14:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d5d18:	d30c      	bcc.n	d5d34 <__adddf3+0x10c>
   d5d1a:	0849      	lsrs	r1, r1, #1
   d5d1c:	ea5f 0030 	movs.w	r0, r0, rrx
   d5d20:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d5d24:	f104 0401 	add.w	r4, r4, #1
   d5d28:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d5d2c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d5d30:	f080 809a 	bcs.w	d5e68 <__adddf3+0x240>
   d5d34:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d5d38:	bf08      	it	eq
   d5d3a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d5d3e:	f150 0000 	adcs.w	r0, r0, #0
   d5d42:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d5d46:	ea41 0105 	orr.w	r1, r1, r5
   d5d4a:	bd30      	pop	{r4, r5, pc}
   d5d4c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d5d50:	4140      	adcs	r0, r0
   d5d52:	eb41 0101 	adc.w	r1, r1, r1
   d5d56:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d5d5a:	f1a4 0401 	sub.w	r4, r4, #1
   d5d5e:	d1e9      	bne.n	d5d34 <__adddf3+0x10c>
   d5d60:	f091 0f00 	teq	r1, #0
   d5d64:	bf04      	itt	eq
   d5d66:	4601      	moveq	r1, r0
   d5d68:	2000      	moveq	r0, #0
   d5d6a:	fab1 f381 	clz	r3, r1
   d5d6e:	bf08      	it	eq
   d5d70:	3320      	addeq	r3, #32
   d5d72:	f1a3 030b 	sub.w	r3, r3, #11
   d5d76:	f1b3 0220 	subs.w	r2, r3, #32
   d5d7a:	da0c      	bge.n	d5d96 <__adddf3+0x16e>
   d5d7c:	320c      	adds	r2, #12
   d5d7e:	dd08      	ble.n	d5d92 <__adddf3+0x16a>
   d5d80:	f102 0c14 	add.w	ip, r2, #20
   d5d84:	f1c2 020c 	rsb	r2, r2, #12
   d5d88:	fa01 f00c 	lsl.w	r0, r1, ip
   d5d8c:	fa21 f102 	lsr.w	r1, r1, r2
   d5d90:	e00c      	b.n	d5dac <__adddf3+0x184>
   d5d92:	f102 0214 	add.w	r2, r2, #20
   d5d96:	bfd8      	it	le
   d5d98:	f1c2 0c20 	rsble	ip, r2, #32
   d5d9c:	fa01 f102 	lsl.w	r1, r1, r2
   d5da0:	fa20 fc0c 	lsr.w	ip, r0, ip
   d5da4:	bfdc      	itt	le
   d5da6:	ea41 010c 	orrle.w	r1, r1, ip
   d5daa:	4090      	lslle	r0, r2
   d5dac:	1ae4      	subs	r4, r4, r3
   d5dae:	bfa2      	ittt	ge
   d5db0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d5db4:	4329      	orrge	r1, r5
   d5db6:	bd30      	popge	{r4, r5, pc}
   d5db8:	ea6f 0404 	mvn.w	r4, r4
   d5dbc:	3c1f      	subs	r4, #31
   d5dbe:	da1c      	bge.n	d5dfa <__adddf3+0x1d2>
   d5dc0:	340c      	adds	r4, #12
   d5dc2:	dc0e      	bgt.n	d5de2 <__adddf3+0x1ba>
   d5dc4:	f104 0414 	add.w	r4, r4, #20
   d5dc8:	f1c4 0220 	rsb	r2, r4, #32
   d5dcc:	fa20 f004 	lsr.w	r0, r0, r4
   d5dd0:	fa01 f302 	lsl.w	r3, r1, r2
   d5dd4:	ea40 0003 	orr.w	r0, r0, r3
   d5dd8:	fa21 f304 	lsr.w	r3, r1, r4
   d5ddc:	ea45 0103 	orr.w	r1, r5, r3
   d5de0:	bd30      	pop	{r4, r5, pc}
   d5de2:	f1c4 040c 	rsb	r4, r4, #12
   d5de6:	f1c4 0220 	rsb	r2, r4, #32
   d5dea:	fa20 f002 	lsr.w	r0, r0, r2
   d5dee:	fa01 f304 	lsl.w	r3, r1, r4
   d5df2:	ea40 0003 	orr.w	r0, r0, r3
   d5df6:	4629      	mov	r1, r5
   d5df8:	bd30      	pop	{r4, r5, pc}
   d5dfa:	fa21 f004 	lsr.w	r0, r1, r4
   d5dfe:	4629      	mov	r1, r5
   d5e00:	bd30      	pop	{r4, r5, pc}
   d5e02:	f094 0f00 	teq	r4, #0
   d5e06:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d5e0a:	bf06      	itte	eq
   d5e0c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d5e10:	3401      	addeq	r4, #1
   d5e12:	3d01      	subne	r5, #1
   d5e14:	e74e      	b.n	d5cb4 <__adddf3+0x8c>
   d5e16:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d5e1a:	bf18      	it	ne
   d5e1c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d5e20:	d029      	beq.n	d5e76 <__adddf3+0x24e>
   d5e22:	ea94 0f05 	teq	r4, r5
   d5e26:	bf08      	it	eq
   d5e28:	ea90 0f02 	teqeq	r0, r2
   d5e2c:	d005      	beq.n	d5e3a <__adddf3+0x212>
   d5e2e:	ea54 0c00 	orrs.w	ip, r4, r0
   d5e32:	bf04      	itt	eq
   d5e34:	4619      	moveq	r1, r3
   d5e36:	4610      	moveq	r0, r2
   d5e38:	bd30      	pop	{r4, r5, pc}
   d5e3a:	ea91 0f03 	teq	r1, r3
   d5e3e:	bf1e      	ittt	ne
   d5e40:	2100      	movne	r1, #0
   d5e42:	2000      	movne	r0, #0
   d5e44:	bd30      	popne	{r4, r5, pc}
   d5e46:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d5e4a:	d105      	bne.n	d5e58 <__adddf3+0x230>
   d5e4c:	0040      	lsls	r0, r0, #1
   d5e4e:	4149      	adcs	r1, r1
   d5e50:	bf28      	it	cs
   d5e52:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d5e56:	bd30      	pop	{r4, r5, pc}
   d5e58:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d5e5c:	bf3c      	itt	cc
   d5e5e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d5e62:	bd30      	popcc	{r4, r5, pc}
   d5e64:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5e68:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d5e6c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d5e70:	f04f 0000 	mov.w	r0, #0
   d5e74:	bd30      	pop	{r4, r5, pc}
   d5e76:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d5e7a:	bf1a      	itte	ne
   d5e7c:	4619      	movne	r1, r3
   d5e7e:	4610      	movne	r0, r2
   d5e80:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d5e84:	bf1c      	itt	ne
   d5e86:	460b      	movne	r3, r1
   d5e88:	4602      	movne	r2, r0
   d5e8a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d5e8e:	bf06      	itte	eq
   d5e90:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d5e94:	ea91 0f03 	teqeq	r1, r3
   d5e98:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d5e9c:	bd30      	pop	{r4, r5, pc}
   d5e9e:	bf00      	nop

000d5ea0 <__aeabi_ui2d>:
   d5ea0:	f090 0f00 	teq	r0, #0
   d5ea4:	bf04      	itt	eq
   d5ea6:	2100      	moveq	r1, #0
   d5ea8:	4770      	bxeq	lr
   d5eaa:	b530      	push	{r4, r5, lr}
   d5eac:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5eb0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5eb4:	f04f 0500 	mov.w	r5, #0
   d5eb8:	f04f 0100 	mov.w	r1, #0
   d5ebc:	e750      	b.n	d5d60 <__adddf3+0x138>
   d5ebe:	bf00      	nop

000d5ec0 <__aeabi_i2d>:
   d5ec0:	f090 0f00 	teq	r0, #0
   d5ec4:	bf04      	itt	eq
   d5ec6:	2100      	moveq	r1, #0
   d5ec8:	4770      	bxeq	lr
   d5eca:	b530      	push	{r4, r5, lr}
   d5ecc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5ed0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5ed4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d5ed8:	bf48      	it	mi
   d5eda:	4240      	negmi	r0, r0
   d5edc:	f04f 0100 	mov.w	r1, #0
   d5ee0:	e73e      	b.n	d5d60 <__adddf3+0x138>
   d5ee2:	bf00      	nop

000d5ee4 <__aeabi_f2d>:
   d5ee4:	0042      	lsls	r2, r0, #1
   d5ee6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d5eea:	ea4f 0131 	mov.w	r1, r1, rrx
   d5eee:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d5ef2:	bf1f      	itttt	ne
   d5ef4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d5ef8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d5efc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d5f00:	4770      	bxne	lr
   d5f02:	f092 0f00 	teq	r2, #0
   d5f06:	bf14      	ite	ne
   d5f08:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d5f0c:	4770      	bxeq	lr
   d5f0e:	b530      	push	{r4, r5, lr}
   d5f10:	f44f 7460 	mov.w	r4, #896	; 0x380
   d5f14:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5f18:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d5f1c:	e720      	b.n	d5d60 <__adddf3+0x138>
   d5f1e:	bf00      	nop

000d5f20 <__aeabi_ul2d>:
   d5f20:	ea50 0201 	orrs.w	r2, r0, r1
   d5f24:	bf08      	it	eq
   d5f26:	4770      	bxeq	lr
   d5f28:	b530      	push	{r4, r5, lr}
   d5f2a:	f04f 0500 	mov.w	r5, #0
   d5f2e:	e00a      	b.n	d5f46 <__aeabi_l2d+0x16>

000d5f30 <__aeabi_l2d>:
   d5f30:	ea50 0201 	orrs.w	r2, r0, r1
   d5f34:	bf08      	it	eq
   d5f36:	4770      	bxeq	lr
   d5f38:	b530      	push	{r4, r5, lr}
   d5f3a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d5f3e:	d502      	bpl.n	d5f46 <__aeabi_l2d+0x16>
   d5f40:	4240      	negs	r0, r0
   d5f42:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d5f46:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5f4a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5f4e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d5f52:	f43f aedc 	beq.w	d5d0e <__adddf3+0xe6>
   d5f56:	f04f 0203 	mov.w	r2, #3
   d5f5a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d5f5e:	bf18      	it	ne
   d5f60:	3203      	addne	r2, #3
   d5f62:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d5f66:	bf18      	it	ne
   d5f68:	3203      	addne	r2, #3
   d5f6a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d5f6e:	f1c2 0320 	rsb	r3, r2, #32
   d5f72:	fa00 fc03 	lsl.w	ip, r0, r3
   d5f76:	fa20 f002 	lsr.w	r0, r0, r2
   d5f7a:	fa01 fe03 	lsl.w	lr, r1, r3
   d5f7e:	ea40 000e 	orr.w	r0, r0, lr
   d5f82:	fa21 f102 	lsr.w	r1, r1, r2
   d5f86:	4414      	add	r4, r2
   d5f88:	e6c1      	b.n	d5d0e <__adddf3+0xe6>
   d5f8a:	bf00      	nop

000d5f8c <__aeabi_dmul>:
   d5f8c:	b570      	push	{r4, r5, r6, lr}
   d5f8e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d5f92:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d5f96:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d5f9a:	bf1d      	ittte	ne
   d5f9c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d5fa0:	ea94 0f0c 	teqne	r4, ip
   d5fa4:	ea95 0f0c 	teqne	r5, ip
   d5fa8:	f000 f8de 	bleq	d6168 <__aeabi_dmul+0x1dc>
   d5fac:	442c      	add	r4, r5
   d5fae:	ea81 0603 	eor.w	r6, r1, r3
   d5fb2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d5fb6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d5fba:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d5fbe:	bf18      	it	ne
   d5fc0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d5fc4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d5fc8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d5fcc:	d038      	beq.n	d6040 <__aeabi_dmul+0xb4>
   d5fce:	fba0 ce02 	umull	ip, lr, r0, r2
   d5fd2:	f04f 0500 	mov.w	r5, #0
   d5fd6:	fbe1 e502 	umlal	lr, r5, r1, r2
   d5fda:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d5fde:	fbe0 e503 	umlal	lr, r5, r0, r3
   d5fe2:	f04f 0600 	mov.w	r6, #0
   d5fe6:	fbe1 5603 	umlal	r5, r6, r1, r3
   d5fea:	f09c 0f00 	teq	ip, #0
   d5fee:	bf18      	it	ne
   d5ff0:	f04e 0e01 	orrne.w	lr, lr, #1
   d5ff4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d5ff8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d5ffc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d6000:	d204      	bcs.n	d600c <__aeabi_dmul+0x80>
   d6002:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d6006:	416d      	adcs	r5, r5
   d6008:	eb46 0606 	adc.w	r6, r6, r6
   d600c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d6010:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d6014:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d6018:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d601c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d6020:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d6024:	bf88      	it	hi
   d6026:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d602a:	d81e      	bhi.n	d606a <__aeabi_dmul+0xde>
   d602c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d6030:	bf08      	it	eq
   d6032:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d6036:	f150 0000 	adcs.w	r0, r0, #0
   d603a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d603e:	bd70      	pop	{r4, r5, r6, pc}
   d6040:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d6044:	ea46 0101 	orr.w	r1, r6, r1
   d6048:	ea40 0002 	orr.w	r0, r0, r2
   d604c:	ea81 0103 	eor.w	r1, r1, r3
   d6050:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d6054:	bfc2      	ittt	gt
   d6056:	ebd4 050c 	rsbsgt	r5, r4, ip
   d605a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d605e:	bd70      	popgt	{r4, r5, r6, pc}
   d6060:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6064:	f04f 0e00 	mov.w	lr, #0
   d6068:	3c01      	subs	r4, #1
   d606a:	f300 80ab 	bgt.w	d61c4 <__aeabi_dmul+0x238>
   d606e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d6072:	bfde      	ittt	le
   d6074:	2000      	movle	r0, #0
   d6076:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d607a:	bd70      	pople	{r4, r5, r6, pc}
   d607c:	f1c4 0400 	rsb	r4, r4, #0
   d6080:	3c20      	subs	r4, #32
   d6082:	da35      	bge.n	d60f0 <__aeabi_dmul+0x164>
   d6084:	340c      	adds	r4, #12
   d6086:	dc1b      	bgt.n	d60c0 <__aeabi_dmul+0x134>
   d6088:	f104 0414 	add.w	r4, r4, #20
   d608c:	f1c4 0520 	rsb	r5, r4, #32
   d6090:	fa00 f305 	lsl.w	r3, r0, r5
   d6094:	fa20 f004 	lsr.w	r0, r0, r4
   d6098:	fa01 f205 	lsl.w	r2, r1, r5
   d609c:	ea40 0002 	orr.w	r0, r0, r2
   d60a0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d60a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d60a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d60ac:	fa21 f604 	lsr.w	r6, r1, r4
   d60b0:	eb42 0106 	adc.w	r1, r2, r6
   d60b4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d60b8:	bf08      	it	eq
   d60ba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d60be:	bd70      	pop	{r4, r5, r6, pc}
   d60c0:	f1c4 040c 	rsb	r4, r4, #12
   d60c4:	f1c4 0520 	rsb	r5, r4, #32
   d60c8:	fa00 f304 	lsl.w	r3, r0, r4
   d60cc:	fa20 f005 	lsr.w	r0, r0, r5
   d60d0:	fa01 f204 	lsl.w	r2, r1, r4
   d60d4:	ea40 0002 	orr.w	r0, r0, r2
   d60d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d60dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d60e0:	f141 0100 	adc.w	r1, r1, #0
   d60e4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d60e8:	bf08      	it	eq
   d60ea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d60ee:	bd70      	pop	{r4, r5, r6, pc}
   d60f0:	f1c4 0520 	rsb	r5, r4, #32
   d60f4:	fa00 f205 	lsl.w	r2, r0, r5
   d60f8:	ea4e 0e02 	orr.w	lr, lr, r2
   d60fc:	fa20 f304 	lsr.w	r3, r0, r4
   d6100:	fa01 f205 	lsl.w	r2, r1, r5
   d6104:	ea43 0302 	orr.w	r3, r3, r2
   d6108:	fa21 f004 	lsr.w	r0, r1, r4
   d610c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6110:	fa21 f204 	lsr.w	r2, r1, r4
   d6114:	ea20 0002 	bic.w	r0, r0, r2
   d6118:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d611c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6120:	bf08      	it	eq
   d6122:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6126:	bd70      	pop	{r4, r5, r6, pc}
   d6128:	f094 0f00 	teq	r4, #0
   d612c:	d10f      	bne.n	d614e <__aeabi_dmul+0x1c2>
   d612e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d6132:	0040      	lsls	r0, r0, #1
   d6134:	eb41 0101 	adc.w	r1, r1, r1
   d6138:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d613c:	bf08      	it	eq
   d613e:	3c01      	subeq	r4, #1
   d6140:	d0f7      	beq.n	d6132 <__aeabi_dmul+0x1a6>
   d6142:	ea41 0106 	orr.w	r1, r1, r6
   d6146:	f095 0f00 	teq	r5, #0
   d614a:	bf18      	it	ne
   d614c:	4770      	bxne	lr
   d614e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d6152:	0052      	lsls	r2, r2, #1
   d6154:	eb43 0303 	adc.w	r3, r3, r3
   d6158:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d615c:	bf08      	it	eq
   d615e:	3d01      	subeq	r5, #1
   d6160:	d0f7      	beq.n	d6152 <__aeabi_dmul+0x1c6>
   d6162:	ea43 0306 	orr.w	r3, r3, r6
   d6166:	4770      	bx	lr
   d6168:	ea94 0f0c 	teq	r4, ip
   d616c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d6170:	bf18      	it	ne
   d6172:	ea95 0f0c 	teqne	r5, ip
   d6176:	d00c      	beq.n	d6192 <__aeabi_dmul+0x206>
   d6178:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d617c:	bf18      	it	ne
   d617e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6182:	d1d1      	bne.n	d6128 <__aeabi_dmul+0x19c>
   d6184:	ea81 0103 	eor.w	r1, r1, r3
   d6188:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d618c:	f04f 0000 	mov.w	r0, #0
   d6190:	bd70      	pop	{r4, r5, r6, pc}
   d6192:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6196:	bf06      	itte	eq
   d6198:	4610      	moveq	r0, r2
   d619a:	4619      	moveq	r1, r3
   d619c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d61a0:	d019      	beq.n	d61d6 <__aeabi_dmul+0x24a>
   d61a2:	ea94 0f0c 	teq	r4, ip
   d61a6:	d102      	bne.n	d61ae <__aeabi_dmul+0x222>
   d61a8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d61ac:	d113      	bne.n	d61d6 <__aeabi_dmul+0x24a>
   d61ae:	ea95 0f0c 	teq	r5, ip
   d61b2:	d105      	bne.n	d61c0 <__aeabi_dmul+0x234>
   d61b4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d61b8:	bf1c      	itt	ne
   d61ba:	4610      	movne	r0, r2
   d61bc:	4619      	movne	r1, r3
   d61be:	d10a      	bne.n	d61d6 <__aeabi_dmul+0x24a>
   d61c0:	ea81 0103 	eor.w	r1, r1, r3
   d61c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d61c8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d61cc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d61d0:	f04f 0000 	mov.w	r0, #0
   d61d4:	bd70      	pop	{r4, r5, r6, pc}
   d61d6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d61da:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d61de:	bd70      	pop	{r4, r5, r6, pc}

000d61e0 <__aeabi_ddiv>:
   d61e0:	b570      	push	{r4, r5, r6, lr}
   d61e2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d61e6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d61ea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d61ee:	bf1d      	ittte	ne
   d61f0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d61f4:	ea94 0f0c 	teqne	r4, ip
   d61f8:	ea95 0f0c 	teqne	r5, ip
   d61fc:	f000 f8a7 	bleq	d634e <__aeabi_ddiv+0x16e>
   d6200:	eba4 0405 	sub.w	r4, r4, r5
   d6204:	ea81 0e03 	eor.w	lr, r1, r3
   d6208:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d620c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6210:	f000 8088 	beq.w	d6324 <__aeabi_ddiv+0x144>
   d6214:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6218:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d621c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d6220:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d6224:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d6228:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d622c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d6230:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d6234:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d6238:	429d      	cmp	r5, r3
   d623a:	bf08      	it	eq
   d623c:	4296      	cmpeq	r6, r2
   d623e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d6242:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d6246:	d202      	bcs.n	d624e <__aeabi_ddiv+0x6e>
   d6248:	085b      	lsrs	r3, r3, #1
   d624a:	ea4f 0232 	mov.w	r2, r2, rrx
   d624e:	1ab6      	subs	r6, r6, r2
   d6250:	eb65 0503 	sbc.w	r5, r5, r3
   d6254:	085b      	lsrs	r3, r3, #1
   d6256:	ea4f 0232 	mov.w	r2, r2, rrx
   d625a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d625e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d6262:	ebb6 0e02 	subs.w	lr, r6, r2
   d6266:	eb75 0e03 	sbcs.w	lr, r5, r3
   d626a:	bf22      	ittt	cs
   d626c:	1ab6      	subcs	r6, r6, r2
   d626e:	4675      	movcs	r5, lr
   d6270:	ea40 000c 	orrcs.w	r0, r0, ip
   d6274:	085b      	lsrs	r3, r3, #1
   d6276:	ea4f 0232 	mov.w	r2, r2, rrx
   d627a:	ebb6 0e02 	subs.w	lr, r6, r2
   d627e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6282:	bf22      	ittt	cs
   d6284:	1ab6      	subcs	r6, r6, r2
   d6286:	4675      	movcs	r5, lr
   d6288:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d628c:	085b      	lsrs	r3, r3, #1
   d628e:	ea4f 0232 	mov.w	r2, r2, rrx
   d6292:	ebb6 0e02 	subs.w	lr, r6, r2
   d6296:	eb75 0e03 	sbcs.w	lr, r5, r3
   d629a:	bf22      	ittt	cs
   d629c:	1ab6      	subcs	r6, r6, r2
   d629e:	4675      	movcs	r5, lr
   d62a0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d62a4:	085b      	lsrs	r3, r3, #1
   d62a6:	ea4f 0232 	mov.w	r2, r2, rrx
   d62aa:	ebb6 0e02 	subs.w	lr, r6, r2
   d62ae:	eb75 0e03 	sbcs.w	lr, r5, r3
   d62b2:	bf22      	ittt	cs
   d62b4:	1ab6      	subcs	r6, r6, r2
   d62b6:	4675      	movcs	r5, lr
   d62b8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d62bc:	ea55 0e06 	orrs.w	lr, r5, r6
   d62c0:	d018      	beq.n	d62f4 <__aeabi_ddiv+0x114>
   d62c2:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d62c6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d62ca:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d62ce:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d62d2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d62d6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d62da:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d62de:	d1c0      	bne.n	d6262 <__aeabi_ddiv+0x82>
   d62e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d62e4:	d10b      	bne.n	d62fe <__aeabi_ddiv+0x11e>
   d62e6:	ea41 0100 	orr.w	r1, r1, r0
   d62ea:	f04f 0000 	mov.w	r0, #0
   d62ee:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d62f2:	e7b6      	b.n	d6262 <__aeabi_ddiv+0x82>
   d62f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d62f8:	bf04      	itt	eq
   d62fa:	4301      	orreq	r1, r0
   d62fc:	2000      	moveq	r0, #0
   d62fe:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d6302:	bf88      	it	hi
   d6304:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d6308:	f63f aeaf 	bhi.w	d606a <__aeabi_dmul+0xde>
   d630c:	ebb5 0c03 	subs.w	ip, r5, r3
   d6310:	bf04      	itt	eq
   d6312:	ebb6 0c02 	subseq.w	ip, r6, r2
   d6316:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d631a:	f150 0000 	adcs.w	r0, r0, #0
   d631e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6322:	bd70      	pop	{r4, r5, r6, pc}
   d6324:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d6328:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d632c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d6330:	bfc2      	ittt	gt
   d6332:	ebd4 050c 	rsbsgt	r5, r4, ip
   d6336:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d633a:	bd70      	popgt	{r4, r5, r6, pc}
   d633c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6340:	f04f 0e00 	mov.w	lr, #0
   d6344:	3c01      	subs	r4, #1
   d6346:	e690      	b.n	d606a <__aeabi_dmul+0xde>
   d6348:	ea45 0e06 	orr.w	lr, r5, r6
   d634c:	e68d      	b.n	d606a <__aeabi_dmul+0xde>
   d634e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d6352:	ea94 0f0c 	teq	r4, ip
   d6356:	bf08      	it	eq
   d6358:	ea95 0f0c 	teqeq	r5, ip
   d635c:	f43f af3b 	beq.w	d61d6 <__aeabi_dmul+0x24a>
   d6360:	ea94 0f0c 	teq	r4, ip
   d6364:	d10a      	bne.n	d637c <__aeabi_ddiv+0x19c>
   d6366:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d636a:	f47f af34 	bne.w	d61d6 <__aeabi_dmul+0x24a>
   d636e:	ea95 0f0c 	teq	r5, ip
   d6372:	f47f af25 	bne.w	d61c0 <__aeabi_dmul+0x234>
   d6376:	4610      	mov	r0, r2
   d6378:	4619      	mov	r1, r3
   d637a:	e72c      	b.n	d61d6 <__aeabi_dmul+0x24a>
   d637c:	ea95 0f0c 	teq	r5, ip
   d6380:	d106      	bne.n	d6390 <__aeabi_ddiv+0x1b0>
   d6382:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d6386:	f43f aefd 	beq.w	d6184 <__aeabi_dmul+0x1f8>
   d638a:	4610      	mov	r0, r2
   d638c:	4619      	mov	r1, r3
   d638e:	e722      	b.n	d61d6 <__aeabi_dmul+0x24a>
   d6390:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6394:	bf18      	it	ne
   d6396:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d639a:	f47f aec5 	bne.w	d6128 <__aeabi_dmul+0x19c>
   d639e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d63a2:	f47f af0d 	bne.w	d61c0 <__aeabi_dmul+0x234>
   d63a6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d63aa:	f47f aeeb 	bne.w	d6184 <__aeabi_dmul+0x1f8>
   d63ae:	e712      	b.n	d61d6 <__aeabi_dmul+0x24a>

000d63b0 <__aeabi_d2f>:
   d63b0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d63b4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d63b8:	bf24      	itt	cs
   d63ba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d63be:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d63c2:	d90d      	bls.n	d63e0 <__aeabi_d2f+0x30>
   d63c4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d63c8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d63cc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d63d0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d63d4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d63d8:	bf08      	it	eq
   d63da:	f020 0001 	biceq.w	r0, r0, #1
   d63de:	4770      	bx	lr
   d63e0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d63e4:	d121      	bne.n	d642a <__aeabi_d2f+0x7a>
   d63e6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d63ea:	bfbc      	itt	lt
   d63ec:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d63f0:	4770      	bxlt	lr
   d63f2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d63f6:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d63fa:	f1c2 0218 	rsb	r2, r2, #24
   d63fe:	f1c2 0c20 	rsb	ip, r2, #32
   d6402:	fa10 f30c 	lsls.w	r3, r0, ip
   d6406:	fa20 f002 	lsr.w	r0, r0, r2
   d640a:	bf18      	it	ne
   d640c:	f040 0001 	orrne.w	r0, r0, #1
   d6410:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d6414:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d6418:	fa03 fc0c 	lsl.w	ip, r3, ip
   d641c:	ea40 000c 	orr.w	r0, r0, ip
   d6420:	fa23 f302 	lsr.w	r3, r3, r2
   d6424:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d6428:	e7cc      	b.n	d63c4 <__aeabi_d2f+0x14>
   d642a:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d642e:	d107      	bne.n	d6440 <__aeabi_d2f+0x90>
   d6430:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d6434:	bf1e      	ittt	ne
   d6436:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d643a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d643e:	4770      	bxne	lr
   d6440:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d6444:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d6448:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d644c:	4770      	bx	lr
   d644e:	bf00      	nop

000d6450 <__cxa_atexit>:
   d6450:	b510      	push	{r4, lr}
   d6452:	4c05      	ldr	r4, [pc, #20]	; (d6468 <__cxa_atexit+0x18>)
   d6454:	4613      	mov	r3, r2
   d6456:	b12c      	cbz	r4, d6464 <__cxa_atexit+0x14>
   d6458:	460a      	mov	r2, r1
   d645a:	4601      	mov	r1, r0
   d645c:	2002      	movs	r0, #2
   d645e:	f3af 8000 	nop.w
   d6462:	bd10      	pop	{r4, pc}
   d6464:	4620      	mov	r0, r4
   d6466:	bd10      	pop	{r4, pc}
   d6468:	00000000 	.word	0x00000000

000d646c <memcpy>:
   d646c:	b510      	push	{r4, lr}
   d646e:	1e43      	subs	r3, r0, #1
   d6470:	440a      	add	r2, r1
   d6472:	4291      	cmp	r1, r2
   d6474:	d004      	beq.n	d6480 <memcpy+0x14>
   d6476:	f811 4b01 	ldrb.w	r4, [r1], #1
   d647a:	f803 4f01 	strb.w	r4, [r3, #1]!
   d647e:	e7f8      	b.n	d6472 <memcpy+0x6>
   d6480:	bd10      	pop	{r4, pc}

000d6482 <memset>:
   d6482:	4402      	add	r2, r0
   d6484:	4603      	mov	r3, r0
   d6486:	4293      	cmp	r3, r2
   d6488:	d002      	beq.n	d6490 <memset+0xe>
   d648a:	f803 1b01 	strb.w	r1, [r3], #1
   d648e:	e7fa      	b.n	d6486 <memset+0x4>
   d6490:	4770      	bx	lr
	...

000d6494 <srand>:
   d6494:	b538      	push	{r3, r4, r5, lr}
   d6496:	4b12      	ldr	r3, [pc, #72]	; (d64e0 <srand+0x4c>)
   d6498:	681c      	ldr	r4, [r3, #0]
   d649a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d649c:	4605      	mov	r5, r0
   d649e:	b9d3      	cbnz	r3, d64d6 <srand+0x42>
   d64a0:	2018      	movs	r0, #24
   d64a2:	f7fe f9cd 	bl	d4840 <malloc>
   d64a6:	f243 330e 	movw	r3, #13070	; 0x330e
   d64aa:	63a0      	str	r0, [r4, #56]	; 0x38
   d64ac:	8003      	strh	r3, [r0, #0]
   d64ae:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d64b2:	8043      	strh	r3, [r0, #2]
   d64b4:	f241 2334 	movw	r3, #4660	; 0x1234
   d64b8:	8083      	strh	r3, [r0, #4]
   d64ba:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d64be:	80c3      	strh	r3, [r0, #6]
   d64c0:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d64c4:	8103      	strh	r3, [r0, #8]
   d64c6:	2305      	movs	r3, #5
   d64c8:	8143      	strh	r3, [r0, #10]
   d64ca:	230b      	movs	r3, #11
   d64cc:	8183      	strh	r3, [r0, #12]
   d64ce:	2201      	movs	r2, #1
   d64d0:	2300      	movs	r3, #0
   d64d2:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d64d6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d64d8:	2200      	movs	r2, #0
   d64da:	611d      	str	r5, [r3, #16]
   d64dc:	615a      	str	r2, [r3, #20]
   d64de:	bd38      	pop	{r3, r4, r5, pc}
   d64e0:	2003e3ac 	.word	0x2003e3ac

000d64e4 <strcpy>:
   d64e4:	4603      	mov	r3, r0
   d64e6:	f811 2b01 	ldrb.w	r2, [r1], #1
   d64ea:	f803 2b01 	strb.w	r2, [r3], #1
   d64ee:	2a00      	cmp	r2, #0
   d64f0:	d1f9      	bne.n	d64e6 <strcpy+0x2>
   d64f2:	4770      	bx	lr

000d64f4 <strdup>:
   d64f4:	4b02      	ldr	r3, [pc, #8]	; (d6500 <strdup+0xc>)
   d64f6:	4601      	mov	r1, r0
   d64f8:	6818      	ldr	r0, [r3, #0]
   d64fa:	f000 b803 	b.w	d6504 <_strdup_r>
   d64fe:	bf00      	nop
   d6500:	2003e3ac 	.word	0x2003e3ac

000d6504 <_strdup_r>:
   d6504:	b570      	push	{r4, r5, r6, lr}
   d6506:	4606      	mov	r6, r0
   d6508:	4608      	mov	r0, r1
   d650a:	460c      	mov	r4, r1
   d650c:	f000 f80d 	bl	d652a <strlen>
   d6510:	1c45      	adds	r5, r0, #1
   d6512:	4629      	mov	r1, r5
   d6514:	4630      	mov	r0, r6
   d6516:	f7fe f9b3 	bl	d4880 <_malloc_r>
   d651a:	4606      	mov	r6, r0
   d651c:	b118      	cbz	r0, d6526 <_strdup_r+0x22>
   d651e:	462a      	mov	r2, r5
   d6520:	4621      	mov	r1, r4
   d6522:	f7ff ffa3 	bl	d646c <memcpy>
   d6526:	4630      	mov	r0, r6
   d6528:	bd70      	pop	{r4, r5, r6, pc}

000d652a <strlen>:
   d652a:	4603      	mov	r3, r0
   d652c:	f813 2b01 	ldrb.w	r2, [r3], #1
   d6530:	2a00      	cmp	r2, #0
   d6532:	d1fb      	bne.n	d652c <strlen+0x2>
   d6534:	1a18      	subs	r0, r3, r0
   d6536:	3801      	subs	r0, #1
   d6538:	4770      	bx	lr

000d653a <link_code_end>:
	...

000d653c <dynalib_user>:
   d653c:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   d654c:	0000 0000                                   ....

000d6550 <_ZTV10JFieldBase>:
	...
   d6558:	40a9 000d 0000 0000 0000 0000               .@..........

000d6564 <_ZTV6JFieldIfE>:
	...
   d656c:	429d 000d 42e5 000d 42f9 000d 007d 2522     .B...B...B..}."%
   d657c:	2273 203a 2e25 6632 2200 7325 3a22 2520     s": %.2f."%s": %
   d658c:	0069 2522 2273 203a 6c25 0075 6574 706d     i."%s": %lu.temp
   d659c:	7265 7461 7275 0065 7568 696d 6964 7974     erature.humidity
   d65ac:	7600 6c6f 6174 6567 6100 626d 6569 636e     .voltage.ambienc
   d65bc:	2f65 6963 6167 6272 786f 0000               e/cigarbox..

000d65c8 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d65d0:	4915 000d 491b 000d 4971 000d 4929 000d     .I...I..qI..)I..
   d65e0:	4917 000d                                   .I..

000d65e4 <_ZTVN5spark13EthernetClassE>:
	...
   d65ec:	4f2b 000d 4f21 000d 4f17 000d 4f0d 000d     +O..!O...O...O..
   d65fc:	4f01 000d 4ef5 000d 4ee9 000d 4ee1 000d     .O...N...N...N..
   d660c:	4ed7 000d 4ecd 000d 52d1 000d               .N...N...R..

000d6618 <_ZTV7TwoWire>:
	...
   d6620:	4f49 000d 4f93 000d 4f6b 000d 4f4b 000d     IO...O..kO..KO..
   d6630:	4f73 000d 4f7b 000d 4f83 000d 4f8b 000d     sO..{O...O...O..

000d6640 <_ZTV9IPAddress>:
	...
   d6648:	5021 000d 5011 000d 5013 000d 6162 6475     !P...P...P..baud
   d6658:	5300 7265 6169 006c 6553 6972 6c61 0031     .Serial.Serial1.
   d6668:	7974 6570 7000 7261 6d61 6300 646d 6900     type.param.cmd.i
   d6678:	0064 6e68 0064 7473 6d72 6600 6c69 0074     d.hnd.strm.filt.
   d6688:	766c 006c 6461 4864 6e61 6c64 7265 7200     lvl.addHandler.r
   d6698:	6d65 766f 4865 6e61 6c64 7265 6500 756e     emoveHandler.enu
   d66a8:	486d 6e61 6c64 7265 0073 534a 4e4f 7453     mHandlers.JSONSt
   d66b8:	6572 6d61 6f4c 4867 6e61 6c64 7265 6100     reamLogHandler.a
   d66c8:	7070 2500 3130 7530 0020 205d 2500 0064     pp.%010u .] .%d.
   d66d8:	202c 2800 3a29 0020 5b20 6300 646f 2065     , .(): . [.code 
   d66e8:	203d 6400 7465 6961 736c 3d20 0020 0a0d     = .details = ...
   d66f8:	6c00 006e 6e66 6300 646f 0065 6564 6174     .ln.fn.code.deta
   d6708:	6c69 6e00 6e6f 0065 7274 6361 0065 6e69     il.none.trace.in
   d6718:	6f66 7700 7261 006e 7265 6f72 0072 6170     fo.warn.error.pa
   d6728:	696e 0063 6c61 006c                         nic.all.

000d6730 <_ZTVN5spark9MeshClassE>:
	...
   d6738:	5163 000d 5159 000d 514f 000d 5145 000d     cQ..YQ..OQ..EQ..
   d6748:	5139 000d 512d 000d 5121 000d 5119 000d     9Q..-Q..!Q...Q..
   d6758:	510f 000d 5105 000d 52d1 000d               .Q...Q...R..

000d6764 <_ZTVN5spark12NetworkClassE>:
	...
   d676c:	5269 000d 5273 000d 527d 000d 5287 000d     iR..sR..}R...R..
   d677c:	5291 000d 529d 000d 52a9 000d 52b5 000d     .R...R...R...R..
   d678c:	52bd 000d 52c7 000d 52d1 000d               .R...R...R..

000d6798 <_ZTV8SPIClass>:
	...
   d67a0:	54b5 000d 54b7 000d 005a 2b25 3330 3a64     .T...T..Z.%+03d:
   d67b0:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
   d67c0:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
   d67d0:	0000 0000                                   ....

000d67d4 <_ZTV11USARTSerial>:
	...
   d67dc:	5521 000d 5571 000d 557f 000d 53b1 000d     !U..qU...U...S..
   d67ec:	5535 000d 5557 000d 5543 000d 556b 000d     5U..WU..CU..kU..
   d67fc:	5523 000d 5527 000d                         #U..'U..

000d6804 <_ZTV9USBSerial>:
	...
   d680c:	5629 000d 5679 000d 5687 000d 53b1 000d     )V..yV...V...S..
   d681c:	5665 000d 562b 000d 5641 000d 5673 000d     eV..+V..AV..sV..
   d682c:	5657 000d 5625 000d                         WV..%V..

000d6834 <_ZTVN5spark9WiFiClassE>:
	...
   d683c:	578b 000d 5781 000d 5777 000d 572d 000d     .W...W..wW..-W..
   d684c:	576b 000d 575f 000d 5753 000d 574b 000d     kW.._W..SW..KW..
   d685c:	5741 000d 5737 000d 52d1 000d               AW..7W...R..

000d6868 <__sf_fake_stdin>:
	...

000d6888 <__sf_fake_stdout>:
	...

000d68a8 <__sf_fake_stderr>:
	...
   d68c8:	0043                                        C.

000d68ca <link_const_variable_data_end>:
	...

000d68cc <link_constructors_location>:
   d68cc:	000d4279 	.word	0x000d4279
   d68d0:	000d4445 	.word	0x000d4445
   d68d4:	000d4905 	.word	0x000d4905
   d68d8:	000d4f35 	.word	0x000d4f35
   d68dc:	000d50f5 	.word	0x000d50f5
   d68e0:	000d5219 	.word	0x000d5219
   d68e4:	000d539d 	.word	0x000d539d
   d68e8:	000d5499 	.word	0x000d5499
   d68ec:	000d54f5 	.word	0x000d54f5
   d68f0:	000d550d 	.word	0x000d550d
   d68f4:	000d5795 	.word	0x000d5795
   d68f8:	000d5935 	.word	0x000d5935
   d68fc:	000d598d 	.word	0x000d598d
   d6900:	000d5a51 	.word	0x000d5a51
   d6904:	000d5ad5 	.word	0x000d5ad5
   d6908:	000d5b59 	.word	0x000d5b59

000d690c <link_constructors_end>:
   d690c:	00000000 	.word	0x00000000
